Shader "Sphere/Planet" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_SpecColor ("Specular tint", Color) = (1,1,1,1)
		_Shininess ("Shininess", Float) = 10
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_BumpMap ("Normalmap", 2D) = "bump" {}
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_DetailVertTex ("Detail for Vertical Surfaces (RGB)", 2D) = "white" {}
		_DetailScale ("Detail Scale", Range(0,1000)) = 200
		_DetailOffset ("Detail Offset", Vector) = (.5,.5,0,0)
		_DetailVertScale ("Detail Scale", Range(0,1000)) = 200
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_Albedo ("Albedo Index", Range(0,5)) = 1.2
		_CityOverlayTex ("Overlay (RGB)", 2D) = "white" {}
		_CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
		_CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
	}
	
SubShader {

Tags { "Queue"="Geometry" "RenderType"="Opaque" }
	Fog { Mode Global}
	ColorMask RGB
	Cull Back Lighting On ZWrite On
	
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 60
//   d3d9 - ALU: 53 to 63
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w;
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_42;
  tmpvar_42 = texture2D (_LightTexture0, vec2(tmpvar_41)).w;
  mediump float tmpvar_43;
  tmpvar_43 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_42), 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_43)), 0.0, 1.0);
  light_3 = tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_45 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_45;
  highp vec3 i_46;
  i_46 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_47;
  tmpvar_47 = (specularReflection_2 * (((tmpvar_42 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_46 - (2.0 * (dot (norm_11, i_46) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (light_3 + (main_12.w * tmpvar_47));
  light_3 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_50;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_42;
  tmpvar_42 = texture2D (_LightTexture0, vec2(tmpvar_41)).w;
  mediump float tmpvar_43;
  tmpvar_43 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_42), 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_43)), 0.0, 1.0);
  light_3 = tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_45 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_45;
  highp vec3 i_46;
  i_46 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_47;
  tmpvar_47 = (specularReflection_2 * (((tmpvar_42 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_46 - (2.0 * (dot (norm_11, i_46) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (light_3 + (main_12.w * tmpvar_47));
  light_3 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_50;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 423
#line 443
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 431
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 435
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 439
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 423
#line 443
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 447
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 451
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    #line 456
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 460
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 464
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 468
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 472
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 476
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 480
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 484
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec3 i_22;
  i_22 = -(xlv_TEXCOORD5);
  vec3 tmpvar_23;
  tmpvar_23 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_21) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_22 - (2.0 * (dot (normal_16, i_22) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_23));
  color_2.xyz = (color_2.xyz * tmpvar_23);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord8 o5
def c14, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c15, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c13, c13
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c13
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mov r0, c10
dp4 r3.z, c13, r0
mov r0, c9
dp4 r3.y, c13, r0
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c13, r1
add r0.w, r2, c14.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.x, r0.w, c14.w
mul_sat r0.w, -r2, c14.y
mad o5.x, r0.w, r1, c15
dp4 r1.x, v0, v0
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
rsq r1.x, r1.x
mul o2.xyz, r0.w, r0
mul r0.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = clamp (((_LightColor0.w * NdotL_4) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_42;
  tmpvar_42 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_41)), 0.0, 1.0);
  light_3 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_43;
  highp vec3 i_44;
  i_44 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_45;
  tmpvar_45 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_44 - (2.0 * (dot (norm_11, i_44) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 + (main_12.w * tmpvar_45));
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_48;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = clamp (((_LightColor0.w * NdotL_4) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_42;
  tmpvar_42 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_41)), 0.0, 1.0);
  light_3 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_43;
  highp vec3 i_44;
  i_44 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_45;
  tmpvar_45 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_44 - (2.0 * (dot (norm_11, i_44) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 + (main_12.w * tmpvar_45));
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_48;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 420
#line 450
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 420
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 424
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 428
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 432
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 420
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 462
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    #line 466
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 470
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 474
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    light += (main.w * specularReflection);
    #line 478
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = ((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w);
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c15
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15.w = tmpvar_39.w;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  highp float tmpvar_46;
  tmpvar_46 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w);
  atten_4 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_12, i_50) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 + (main_13.w * tmpvar_51));
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_54;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15.w = tmpvar_39.w;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  highp float tmpvar_46;
  tmpvar_46 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w);
  atten_4 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_12, i_50) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 + (main_13.w * tmpvar_51));
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_54;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 432
#line 452
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 432
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 436
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 440
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 444
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 448
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 432
#line 452
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 456
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 460
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 463
lowp vec4 frag( in v2f IN ) {
    #line 465
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 469
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 473
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 477
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 481
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 485
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 489
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 493
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_42;
  tmpvar_42 = (texture2D (_LightTextureB0, vec2(tmpvar_41)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_43;
  tmpvar_43 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_42), 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_43)), 0.0, 1.0);
  light_3 = tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_45 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_45;
  highp vec3 i_46;
  i_46 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_47;
  tmpvar_47 = (specularReflection_2 * (((tmpvar_42 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_46 - (2.0 * (dot (norm_11, i_46) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (light_3 + (main_12.w * tmpvar_47));
  light_3 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_50;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_42;
  tmpvar_42 = (texture2D (_LightTextureB0, vec2(tmpvar_41)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_43;
  tmpvar_43 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_42), 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_43)), 0.0, 1.0);
  light_3 = tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_45 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_45;
  highp vec3 i_46;
  i_46 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_47;
  tmpvar_47 = (specularReflection_2 * (((tmpvar_42 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_46 - (2.0 * (dot (norm_11, i_46) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (light_3 + (main_12.w * tmpvar_47));
  light_3 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_50;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 424
#line 444
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 432
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 436
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 440
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 424
#line 444
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 448
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 452
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 455
lowp vec4 frag( in v2f IN ) {
    #line 457
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 461
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 465
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 469
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 473
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 477
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 481
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 485
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c18, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c19, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
dp3 r2.y, r3, r2
mov r0.xyz, v1
mov r0.w, c18.x
dp4 r1.z, r0, c6
dp4 r1.y, r0, c5
dp4 r1.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r1.xyz, r0.w, r1
mul r0.xyz, r0.y, c17
dp3 r0.w, r1, r0
add r0.x, r0.w, c18.z
dp3 r2.x, r3, v2
dp3 r2.z, v1, r3
dp3 r0.y, r2, r2
rsq r0.z, r0.y
mul o4.xyz, r0.z, r2
frc r0.y, r0.x
add_sat r1.w, r0.x, -r0.y
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r0.xyz, -r1, c16
add r2.y, r1.w, c18.w
mul_sat r2.x, -r0.w, c18.y
dp3 r1.w, r0, r0
rsq r0.w, r1.w
dp4 r1.w, v0, c7
mul o2.xyz, r0.w, r0
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mad o6.x, r2, r2.y, c19
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp float tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_42;
  tmpvar_42 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_41), 0.0, 1.0);
  highp vec3 tmpvar_43;
  tmpvar_43 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_42)), 0.0, 1.0);
  light_3 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_44;
  highp vec3 i_45;
  i_45 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_46;
  tmpvar_46 = (specularReflection_2 * (((tmpvar_41 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_45 - (2.0 * (dot (norm_11, i_45) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 + (main_12.w * tmpvar_46));
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_49;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp float tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_42;
  tmpvar_42 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_41), 0.0, 1.0);
  highp vec3 tmpvar_43;
  tmpvar_43 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_42)), 0.0, 1.0);
  light_3 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_44;
  highp vec3 i_45;
  i_45 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_46;
  tmpvar_46 = (specularReflection_2 * (((tmpvar_41 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_45 - (2.0 * (dot (norm_11, i_45) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 + (main_12.w * tmpvar_46));
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_49;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 423
#line 443
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 431
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 435
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 439
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 423
#line 443
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 447
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 451
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    #line 456
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 460
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 464
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 468
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 472
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 476
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 480
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 484
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  float tmpvar_25;
  if ((tmpvar_24.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  tmpvar_26 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_22.w) * tmpvar_23.w) * tmpvar_25);
  vec3 i_27;
  i_27 = -(xlv_TEXCOORD5);
  vec3 tmpvar_28;
  tmpvar_28 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_26), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_26 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (normal_16, i_27) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_28));
  color_2.xyz = (color_2.xyz * tmpvar_28);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump float shadow_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_49;
  if ((tmpvar_48.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_49 = _LightShadowData.x;
  } else {
    tmpvar_49 = 1.0;
  };
  shadow_47 = tmpvar_49;
  tmpvar_46 = shadow_47;
  highp float tmpvar_50;
  tmpvar_50 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_12, i_54) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_13.w * tmpvar_55));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_58;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump float shadow_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_49;
  if ((tmpvar_48.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_49 = _LightShadowData.x;
  } else {
    tmpvar_49 = 1.0;
  };
  shadow_47 = tmpvar_49;
  tmpvar_46 = shadow_47;
  highp float tmpvar_50;
  tmpvar_50 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_12, i_54) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_13.w * tmpvar_55));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_58;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 439
#line 460
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 447
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 451
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 455
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 439
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 481
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 485
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 489
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 493
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 497
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 501
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x * (1.0 - _LightShadowData.x))));
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15.w = tmpvar_39.w;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump float shadow_47;
  lowp float tmpvar_48;
  tmpvar_48 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD7);
  shadow_47 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = (_LightShadowData.x + (shadow_47 * (1.0 - _LightShadowData.x)));
  shadow_47 = tmpvar_49;
  tmpvar_46 = shadow_47;
  highp float tmpvar_50;
  tmpvar_50 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_12, i_54) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_13.w * tmpvar_55));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_58;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 440
#line 461
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 448
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 452
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 456
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 440
#line 461
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 465
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 469
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 472
lowp vec4 frag( in v2f IN ) {
    #line 474
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 478
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 482
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 486
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 490
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 494
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 498
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 502
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  float tmpvar_4;
  tmpvar_4 = dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_5 = TANGENT.xyz;
  tmpvar_6 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = gl_Normal.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = gl_Normal.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = gl_Normal.z;
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_1 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_8;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_4)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_4)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22.x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c16.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c15, c15
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mov r0, c10
dp4 r3.z, c15, r0
mov r0, c9
dp4 r3.y, c15, r0
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c15, r1
add r0.w, r2, c16.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.w, r0, c16
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
mul_sat r0.z, -r2.w, c16.y
mad o6.x, r0.z, r1.w, c17.y
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c17.x
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
mov o0, r0
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c12
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o2.xyz, r0.x, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
rcp o1.x, r0.x
mov o3.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp float tmpvar_41;
  mediump float lightShadowDataX_42;
  highp float dist_43;
  lowp float tmpvar_44;
  tmpvar_44 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_43 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = _LightShadowData.x;
  lightShadowDataX_42 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = max (float((dist_43 > (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w))), lightShadowDataX_42);
  tmpvar_41 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_41), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((tmpvar_41 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_11, i_50) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 + (main_12.w * tmpvar_51));
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_54;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = dot (worldNormal_3, tmpvar_9.xyz);
  mediump float tmpvar_11;
  tmpvar_11 = mix (1.0, clamp (floor((1.01 + tmpvar_10)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_10)), 0.0, 1.0));
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_2.xyz;
  tmpvar_13 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_1.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_1.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_1.z;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_15;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  mediump float tmpvar_42;
  tmpvar_42 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_41.x), 0.0, 1.0);
  highp vec3 tmpvar_43;
  tmpvar_43 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_42)), 0.0, 1.0);
  light_3 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_44;
  highp vec3 i_45;
  i_45 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_46;
  tmpvar_46 = (specularReflection_2 * (((tmpvar_41.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_45 - (2.0 * (dot (norm_11, i_45) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 + (main_12.w * tmpvar_46));
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_49;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 429
#line 449
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 437
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 441
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 445
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 429
#line 449
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 453
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 457
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    #line 462
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 466
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 470
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 474
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 478
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 482
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 486
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 490
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  float tmpvar_4;
  tmpvar_4 = dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_5 = TANGENT.xyz;
  tmpvar_6 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = gl_Normal.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = gl_Normal.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = gl_Normal.z;
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_1 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_8;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_4)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_4)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_ProjectionParams]
Vector 18 [_ScreenParams]
Vector 19 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 61 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c19, c19
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c19
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c19, r1
mov r0, c10
dp4 r3.z, c19, r0
mov r0, c9
dp4 r3.y, c19, r0
add r0.w, r2, c20.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.z, r0.w, c20.w
mul_sat r0.w, -r2, c20.y
mad o7.x, r0.w, r1.z, c21.y
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c21.x
mul r0.y, r0, c17.x
mad o6.xy, r0.z, c18.zwzw, r0
mov o0, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r2.xyz, -r0, c16
dp3 r0.w, r2, r2
rsq r1.x, r0.w
dp4 r0.w, v0, c7
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
dp4 r1.y, v0, v0
rsq r0.x, r1.y
mul r0.xyz, r0.x, v0
mul o2.xyz, r1.x, r2
mov o6.zw, r1
rcp o1.x, r1.x
mov o3.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp float tmpvar_41;
  mediump float lightShadowDataX_42;
  highp float dist_43;
  lowp float tmpvar_44;
  tmpvar_44 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_43 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = _LightShadowData.x;
  lightShadowDataX_42 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = max (float((dist_43 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_42);
  tmpvar_41 = tmpvar_46;
  lowp float tmpvar_47;
  tmpvar_47 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * tmpvar_41);
  mediump float tmpvar_48;
  tmpvar_48 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_47), 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_48)), 0.0, 1.0);
  light_3 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_50;
  highp vec3 i_51;
  i_51 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_52;
  tmpvar_52 = (specularReflection_2 * (((tmpvar_47 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_51 - (2.0 * (dot (norm_11, i_51) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (light_3 + (main_12.w * tmpvar_52));
  light_3 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_55;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = dot (worldNormal_3, tmpvar_9.xyz);
  mediump float tmpvar_11;
  tmpvar_11 = mix (1.0, clamp (floor((1.01 + tmpvar_10)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_10)), 0.0, 1.0));
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_2.xyz;
  tmpvar_13 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_1.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_1.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_1.z;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_15;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp float tmpvar_41;
  tmpvar_41 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  mediump float tmpvar_42;
  tmpvar_42 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_41), 0.0, 1.0);
  highp vec3 tmpvar_43;
  tmpvar_43 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_42)), 0.0, 1.0);
  light_3 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_44;
  highp vec3 i_45;
  i_45 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_46;
  tmpvar_46 = (specularReflection_2 * (((tmpvar_41 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_45 - (2.0 * (dot (norm_11, i_45) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 + (main_12.w * tmpvar_46));
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_49;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 432
#line 453
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 432
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 436
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 440
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 444
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 448
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 432
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 474
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 478
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 482
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 486
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 490
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 494
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  float tmpvar_23;
  tmpvar_23 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_24;
  tmpvar_24 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_25;
  if ((tmpvar_24 < tmpvar_23)) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  tmpvar_26 = (tmpvar_22.w * tmpvar_25);
  vec3 i_27;
  i_27 = -(xlv_TEXCOORD5);
  vec3 tmpvar_28;
  tmpvar_28 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_26), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_26 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (normal_16, i_27) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_28));
  color_2.xyz = (color_2.xyz * tmpvar_28);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, vec2(tmpvar_42));
  highp float tmpvar_44;
  tmpvar_44 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_45 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = dot (packDist_45, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_48;
  if ((tmpvar_47 < tmpvar_44)) {
    tmpvar_48 = _LightShadowData.x;
  } else {
    tmpvar_48 = 1.0;
  };
  highp float tmpvar_49;
  tmpvar_49 = (tmpvar_43.w * tmpvar_48);
  atten_4 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  light_3 = tmpvar_51;
  mediump vec3 tmpvar_52;
  tmpvar_52 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_52;
  highp vec3 i_53;
  i_53 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_54;
  tmpvar_54 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_53 - (2.0 * (dot (norm_12, i_53) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 + (main_13.w * tmpvar_54));
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_57;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, vec2(tmpvar_42));
  highp float tmpvar_44;
  tmpvar_44 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_45 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = dot (packDist_45, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_48;
  if ((tmpvar_47 < tmpvar_44)) {
    tmpvar_48 = _LightShadowData.x;
  } else {
    tmpvar_48 = 1.0;
  };
  highp float tmpvar_49;
  tmpvar_49 = (tmpvar_43.w * tmpvar_48);
  atten_4 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  light_3 = tmpvar_51;
  mediump vec3 tmpvar_52;
  tmpvar_52 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_52;
  highp vec3 i_53;
  i_53 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_54;
  tmpvar_54 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_53 - (2.0 * (dot (norm_12, i_53) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 + (main_13.w * tmpvar_54));
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_57;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 437
#line 458
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 445
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 449
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 453
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 437
#line 458
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 462
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 466
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 469
lowp vec4 frag( in v2f IN ) {
    #line 471
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 475
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 479
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 483
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 487
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 491
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 495
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 499
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_23;
  tmpvar_23 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  float tmpvar_24;
  tmpvar_24 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_25;
  tmpvar_25 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_26;
  if ((tmpvar_25 < tmpvar_24)) {
    tmpvar_26 = _LightShadowData.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  tmpvar_27 = ((tmpvar_22.w * tmpvar_23.w) * tmpvar_26);
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_16, i_28) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_29));
  color_2.xyz = (color_2.xyz * tmpvar_29);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(tmpvar_42));
  lowp vec4 tmpvar_44;
  tmpvar_44 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_45;
  tmpvar_45 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_46 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = dot (packDist_46, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_49;
  if ((tmpvar_48 < tmpvar_45)) {
    tmpvar_49 = _LightShadowData.x;
  } else {
    tmpvar_49 = 1.0;
  };
  highp float tmpvar_50;
  tmpvar_50 = ((tmpvar_43.w * tmpvar_44.w) * tmpvar_49);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_12, i_54) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_13.w * tmpvar_55));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_58;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(tmpvar_42));
  lowp vec4 tmpvar_44;
  tmpvar_44 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_45;
  tmpvar_45 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_46 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = dot (packDist_46, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_49;
  if ((tmpvar_48 < tmpvar_45)) {
    tmpvar_49 = _LightShadowData.x;
  } else {
    tmpvar_49 = 1.0;
  };
  highp float tmpvar_50;
  tmpvar_50 = ((tmpvar_43.w * tmpvar_44.w) * tmpvar_49);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_12, i_54) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_13.w * tmpvar_55));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_58;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 438
#line 459
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 446
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 450
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 454
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 438
#line 459
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 463
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 467
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 470
lowp vec4 frag( in v2f IN ) {
    #line 472
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 476
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 480
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 484
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 488
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 492
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 496
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 500
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 shadowVals_24;
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadowVals_24.x = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_24.y = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_24.z = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_24.w = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_24, tmpvar_25.zzzz);
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_22.w) * tmpvar_23.w) * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_34;
  i_34 = -(xlv_TEXCOORD5);
  vec3 tmpvar_35;
  tmpvar_35 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_33), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_33 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_34 - (2.0 * (dot (normal_16, i_34) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_35));
  color_2.xyz = (color_2.xyz * tmpvar_35);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump vec4 shadows_47;
  highp vec4 shadowVals_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_50;
  P_50 = (tmpvar_49.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_51;
  tmpvar_51 = texture2D (_ShadowMapTexture, P_50).x;
  shadowVals_48.x = tmpvar_51;
  highp vec2 P_52;
  P_52 = (tmpvar_49.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_53;
  tmpvar_53 = texture2D (_ShadowMapTexture, P_52).x;
  shadowVals_48.y = tmpvar_53;
  highp vec2 P_54;
  P_54 = (tmpvar_49.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_ShadowMapTexture, P_54).x;
  shadowVals_48.z = tmpvar_55;
  highp vec2 P_56;
  P_56 = (tmpvar_49.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_ShadowMapTexture, P_56).x;
  shadowVals_48.w = tmpvar_57;
  bvec4 tmpvar_58;
  tmpvar_58 = lessThan (shadowVals_48, tmpvar_49.zzzz);
  highp vec4 tmpvar_59;
  tmpvar_59 = _LightShadowData.xxxx;
  highp float tmpvar_60;
  if (tmpvar_58.x) {
    tmpvar_60 = tmpvar_59.x;
  } else {
    tmpvar_60 = 1.0;
  };
  highp float tmpvar_61;
  if (tmpvar_58.y) {
    tmpvar_61 = tmpvar_59.y;
  } else {
    tmpvar_61 = 1.0;
  };
  highp float tmpvar_62;
  if (tmpvar_58.z) {
    tmpvar_62 = tmpvar_59.z;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  if (tmpvar_58.w) {
    tmpvar_63 = tmpvar_59.w;
  } else {
    tmpvar_63 = 1.0;
  };
  highp vec4 tmpvar_64;
  tmpvar_64.x = tmpvar_60;
  tmpvar_64.y = tmpvar_61;
  tmpvar_64.z = tmpvar_62;
  tmpvar_64.w = tmpvar_63;
  shadows_47 = tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = dot (shadows_47, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_46 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  highp vec3 i_70;
  i_70 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_71;
  tmpvar_71 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_70 - (2.0 * (dot (norm_12, i_70) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_13.w * tmpvar_71));
  light_3 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_74;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump vec4 shadows_47;
  highp vec4 shadowVals_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_50;
  P_50 = (tmpvar_49.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_51;
  tmpvar_51 = texture2D (_ShadowMapTexture, P_50).x;
  shadowVals_48.x = tmpvar_51;
  highp vec2 P_52;
  P_52 = (tmpvar_49.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_53;
  tmpvar_53 = texture2D (_ShadowMapTexture, P_52).x;
  shadowVals_48.y = tmpvar_53;
  highp vec2 P_54;
  P_54 = (tmpvar_49.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_ShadowMapTexture, P_54).x;
  shadowVals_48.z = tmpvar_55;
  highp vec2 P_56;
  P_56 = (tmpvar_49.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_ShadowMapTexture, P_56).x;
  shadowVals_48.w = tmpvar_57;
  bvec4 tmpvar_58;
  tmpvar_58 = lessThan (shadowVals_48, tmpvar_49.zzzz);
  highp vec4 tmpvar_59;
  tmpvar_59 = _LightShadowData.xxxx;
  highp float tmpvar_60;
  if (tmpvar_58.x) {
    tmpvar_60 = tmpvar_59.x;
  } else {
    tmpvar_60 = 1.0;
  };
  highp float tmpvar_61;
  if (tmpvar_58.y) {
    tmpvar_61 = tmpvar_59.y;
  } else {
    tmpvar_61 = 1.0;
  };
  highp float tmpvar_62;
  if (tmpvar_58.z) {
    tmpvar_62 = tmpvar_59.z;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  if (tmpvar_58.w) {
    tmpvar_63 = tmpvar_59.w;
  } else {
    tmpvar_63 = 1.0;
  };
  highp vec4 tmpvar_64;
  tmpvar_64.x = tmpvar_60;
  tmpvar_64.y = tmpvar_61;
  tmpvar_64.z = tmpvar_62;
  tmpvar_64.w = tmpvar_63;
  shadows_47 = tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = dot (shadows_47, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_46 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  highp vec3 i_70;
  i_70 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_71;
  tmpvar_71 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_70 - (2.0 * (dot (norm_12, i_70) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_13.w * tmpvar_71));
  light_3 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_74;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 447
#line 468
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 455
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 459
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 463
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 447
#line 468
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 472
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 476
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 489
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 493
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 497
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 501
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 505
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 509
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 shadows_22;
  vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadows_22.x = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[0].xyz)).x;
  shadows_22.y = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[1].xyz)).x;
  shadows_22.z = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[2].xyz)).x;
  shadows_22.w = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_24;
  tmpvar_24 = (_LightShadowData.xxxx + (shadows_22 * (1.0 - _LightShadowData.xxxx)));
  shadows_22 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * dot (tmpvar_24, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_26;
  i_26 = -(xlv_TEXCOORD5);
  vec3 tmpvar_27;
  tmpvar_27 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_25), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_26 - (2.0 * (dot (normal_16, i_26) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_27));
  color_2.xyz = (color_2.xyz * tmpvar_27);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15.w = tmpvar_39.w;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump vec4 shadows_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec3 coord_49;
  coord_49 = (tmpvar_48 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_50;
  tmpvar_50 = shadow2DEXT (_ShadowMapTexture, coord_49);
  shadows_47.x = tmpvar_50;
  highp vec3 coord_51;
  coord_51 = (tmpvar_48 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_52;
  tmpvar_52 = shadow2DEXT (_ShadowMapTexture, coord_51);
  shadows_47.y = tmpvar_52;
  highp vec3 coord_53;
  coord_53 = (tmpvar_48 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_54;
  tmpvar_54 = shadow2DEXT (_ShadowMapTexture, coord_53);
  shadows_47.z = tmpvar_54;
  highp vec3 coord_55;
  coord_55 = (tmpvar_48 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_56;
  tmpvar_56 = shadow2DEXT (_ShadowMapTexture, coord_55);
  shadows_47.w = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (_LightShadowData.xxxx + (shadows_47 * (1.0 - _LightShadowData.xxxx)));
  shadows_47 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = dot (shadows_47, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_46 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_3 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_62;
  highp vec3 i_63;
  i_63 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_64;
  tmpvar_64 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_63 - (2.0 * (dot (norm_12, i_63) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_3 + (main_13.w * tmpvar_64));
  light_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_67;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 447
#line 468
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 455
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 459
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 463
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 447
#line 468
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 472
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 476
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 489
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 493
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 497
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 501
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 505
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 509
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 shadowVals_23;
  shadowVals_23.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_24;
  tmpvar_24 = lessThan (shadowVals_23, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_25;
  tmpvar_25 = _LightShadowData.xxxx;
  float tmpvar_26;
  if (tmpvar_24.x) {
    tmpvar_26 = tmpvar_25.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_24.y) {
    tmpvar_27 = tmpvar_25.y;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_24.z) {
    tmpvar_28 = tmpvar_25.z;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_24.w) {
    tmpvar_29 = tmpvar_25.w;
  } else {
    tmpvar_29 = 1.0;
  };
  vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_26;
  tmpvar_30.y = tmpvar_27;
  tmpvar_30.z = tmpvar_28;
  tmpvar_30.w = tmpvar_29;
  float tmpvar_31;
  tmpvar_31 = (tmpvar_22.w * dot (tmpvar_30, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_32;
  i_32 = -(xlv_TEXCOORD5);
  vec3 tmpvar_33;
  tmpvar_33 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (normal_16, i_32) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_33));
  color_2.xyz = (color_2.xyz * tmpvar_33);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, vec2(tmpvar_42));
  highp float tmpvar_44;
  mediump vec4 shadows_45;
  highp vec4 shadowVals_46;
  highp float tmpvar_47;
  tmpvar_47 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_48;
  vec_48 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_49;
  lowp vec4 tmpvar_50;
  tmpvar_50 = textureCube (_ShadowMapTexture, vec_48);
  packDist_49 = tmpvar_50;
  shadowVals_46.x = dot (packDist_49, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_51;
  vec_51 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = textureCube (_ShadowMapTexture, vec_51);
  packDist_52 = tmpvar_53;
  shadowVals_46.y = dot (packDist_52, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_54;
  vec_54 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_55;
  lowp vec4 tmpvar_56;
  tmpvar_56 = textureCube (_ShadowMapTexture, vec_54);
  packDist_55 = tmpvar_56;
  shadowVals_46.z = dot (packDist_55, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_57;
  vec_57 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_ShadowMapTexture, vec_57);
  packDist_58 = tmpvar_59;
  shadowVals_46.w = dot (packDist_58, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_60;
  tmpvar_60 = lessThan (shadowVals_46, vec4(tmpvar_47));
  highp vec4 tmpvar_61;
  tmpvar_61 = _LightShadowData.xxxx;
  highp float tmpvar_62;
  if (tmpvar_60.x) {
    tmpvar_62 = tmpvar_61.x;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  if (tmpvar_60.y) {
    tmpvar_63 = tmpvar_61.y;
  } else {
    tmpvar_63 = 1.0;
  };
  highp float tmpvar_64;
  if (tmpvar_60.z) {
    tmpvar_64 = tmpvar_61.z;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_60.w) {
    tmpvar_65 = tmpvar_61.w;
  } else {
    tmpvar_65 = 1.0;
  };
  highp vec4 tmpvar_66;
  tmpvar_66.x = tmpvar_62;
  tmpvar_66.y = tmpvar_63;
  tmpvar_66.z = tmpvar_64;
  tmpvar_66.w = tmpvar_65;
  shadows_45 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = dot (shadows_45, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_44 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = (tmpvar_43.w * tmpvar_44);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  highp vec3 i_72;
  i_72 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_73;
  tmpvar_73 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_72 - (2.0 * (dot (norm_12, i_72) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (light_3 + (main_13.w * tmpvar_73));
  light_3 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_76;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, vec2(tmpvar_42));
  highp float tmpvar_44;
  mediump vec4 shadows_45;
  highp vec4 shadowVals_46;
  highp float tmpvar_47;
  tmpvar_47 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_48;
  vec_48 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_49;
  lowp vec4 tmpvar_50;
  tmpvar_50 = textureCube (_ShadowMapTexture, vec_48);
  packDist_49 = tmpvar_50;
  shadowVals_46.x = dot (packDist_49, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_51;
  vec_51 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = textureCube (_ShadowMapTexture, vec_51);
  packDist_52 = tmpvar_53;
  shadowVals_46.y = dot (packDist_52, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_54;
  vec_54 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_55;
  lowp vec4 tmpvar_56;
  tmpvar_56 = textureCube (_ShadowMapTexture, vec_54);
  packDist_55 = tmpvar_56;
  shadowVals_46.z = dot (packDist_55, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_57;
  vec_57 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_ShadowMapTexture, vec_57);
  packDist_58 = tmpvar_59;
  shadowVals_46.w = dot (packDist_58, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_60;
  tmpvar_60 = lessThan (shadowVals_46, vec4(tmpvar_47));
  highp vec4 tmpvar_61;
  tmpvar_61 = _LightShadowData.xxxx;
  highp float tmpvar_62;
  if (tmpvar_60.x) {
    tmpvar_62 = tmpvar_61.x;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  if (tmpvar_60.y) {
    tmpvar_63 = tmpvar_61.y;
  } else {
    tmpvar_63 = 1.0;
  };
  highp float tmpvar_64;
  if (tmpvar_60.z) {
    tmpvar_64 = tmpvar_61.z;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_60.w) {
    tmpvar_65 = tmpvar_61.w;
  } else {
    tmpvar_65 = 1.0;
  };
  highp vec4 tmpvar_66;
  tmpvar_66.x = tmpvar_62;
  tmpvar_66.y = tmpvar_63;
  tmpvar_66.z = tmpvar_64;
  tmpvar_66.w = tmpvar_65;
  shadows_45 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = dot (shadows_45, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_44 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = (tmpvar_43.w * tmpvar_44);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  highp vec3 i_72;
  i_72 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_73;
  tmpvar_73 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_72 - (2.0 * (dot (norm_12, i_72) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (light_3 + (main_13.w * tmpvar_73));
  light_3 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_76;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 443
#line 464
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 451
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 455
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 459
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 443
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 485
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 489
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 493
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 497
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 501
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 505
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_23;
  tmpvar_23 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  vec4 shadowVals_24;
  shadowVals_24.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_25;
  tmpvar_25 = lessThan (shadowVals_24, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_26;
  tmpvar_26 = _LightShadowData.xxxx;
  float tmpvar_27;
  if (tmpvar_25.x) {
    tmpvar_27 = tmpvar_26.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_25.y) {
    tmpvar_28 = tmpvar_26.y;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_25.z) {
    tmpvar_29 = tmpvar_26.z;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_25.w) {
    tmpvar_30 = tmpvar_26.w;
  } else {
    tmpvar_30 = 1.0;
  };
  vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_27;
  tmpvar_31.y = tmpvar_28;
  tmpvar_31.z = tmpvar_29;
  tmpvar_31.w = tmpvar_30;
  float tmpvar_32;
  tmpvar_32 = ((tmpvar_22.w * tmpvar_23.w) * dot (tmpvar_31, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_33;
  i_33 = -(xlv_TEXCOORD5);
  vec3 tmpvar_34;
  tmpvar_34 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_32), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_32 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_33 - (2.0 * (dot (normal_16, i_33) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_34));
  color_2.xyz = (color_2.xyz * tmpvar_34);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(tmpvar_42));
  lowp vec4 tmpvar_44;
  tmpvar_44 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_45;
  mediump vec4 shadows_46;
  highp vec4 shadowVals_47;
  highp float tmpvar_48;
  tmpvar_48 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_49;
  vec_49 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_50;
  lowp vec4 tmpvar_51;
  tmpvar_51 = textureCube (_ShadowMapTexture, vec_49);
  packDist_50 = tmpvar_51;
  shadowVals_47.x = dot (packDist_50, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_52;
  vec_52 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_53;
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureCube (_ShadowMapTexture, vec_52);
  packDist_53 = tmpvar_54;
  shadowVals_47.y = dot (packDist_53, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_55;
  vec_55 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_56;
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_ShadowMapTexture, vec_55);
  packDist_56 = tmpvar_57;
  shadowVals_47.z = dot (packDist_56, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_58;
  vec_58 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, vec_58);
  packDist_59 = tmpvar_60;
  shadowVals_47.w = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_61;
  tmpvar_61 = lessThan (shadowVals_47, vec4(tmpvar_48));
  highp vec4 tmpvar_62;
  tmpvar_62 = _LightShadowData.xxxx;
  highp float tmpvar_63;
  if (tmpvar_61.x) {
    tmpvar_63 = tmpvar_62.x;
  } else {
    tmpvar_63 = 1.0;
  };
  highp float tmpvar_64;
  if (tmpvar_61.y) {
    tmpvar_64 = tmpvar_62.y;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_61.z) {
    tmpvar_65 = tmpvar_62.z;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  if (tmpvar_61.w) {
    tmpvar_66 = tmpvar_62.w;
  } else {
    tmpvar_66 = 1.0;
  };
  highp vec4 tmpvar_67;
  tmpvar_67.x = tmpvar_63;
  tmpvar_67.y = tmpvar_64;
  tmpvar_67.z = tmpvar_65;
  tmpvar_67.w = tmpvar_66;
  shadows_46 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = dot (shadows_46, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_45 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = ((tmpvar_43.w * tmpvar_44.w) * tmpvar_45);
  atten_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_3 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_72;
  highp vec3 i_73;
  i_73 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_74;
  tmpvar_74 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_73 - (2.0 * (dot (norm_12, i_73) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (light_3 + (main_13.w * tmpvar_74));
  light_3 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_77;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(tmpvar_42));
  lowp vec4 tmpvar_44;
  tmpvar_44 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_45;
  mediump vec4 shadows_46;
  highp vec4 shadowVals_47;
  highp float tmpvar_48;
  tmpvar_48 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_49;
  vec_49 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_50;
  lowp vec4 tmpvar_51;
  tmpvar_51 = textureCube (_ShadowMapTexture, vec_49);
  packDist_50 = tmpvar_51;
  shadowVals_47.x = dot (packDist_50, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_52;
  vec_52 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_53;
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureCube (_ShadowMapTexture, vec_52);
  packDist_53 = tmpvar_54;
  shadowVals_47.y = dot (packDist_53, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_55;
  vec_55 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_56;
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_ShadowMapTexture, vec_55);
  packDist_56 = tmpvar_57;
  shadowVals_47.z = dot (packDist_56, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_58;
  vec_58 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, vec_58);
  packDist_59 = tmpvar_60;
  shadowVals_47.w = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_61;
  tmpvar_61 = lessThan (shadowVals_47, vec4(tmpvar_48));
  highp vec4 tmpvar_62;
  tmpvar_62 = _LightShadowData.xxxx;
  highp float tmpvar_63;
  if (tmpvar_61.x) {
    tmpvar_63 = tmpvar_62.x;
  } else {
    tmpvar_63 = 1.0;
  };
  highp float tmpvar_64;
  if (tmpvar_61.y) {
    tmpvar_64 = tmpvar_62.y;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_61.z) {
    tmpvar_65 = tmpvar_62.z;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  if (tmpvar_61.w) {
    tmpvar_66 = tmpvar_62.w;
  } else {
    tmpvar_66 = 1.0;
  };
  highp vec4 tmpvar_67;
  tmpvar_67.x = tmpvar_63;
  tmpvar_67.y = tmpvar_64;
  tmpvar_67.z = tmpvar_65;
  tmpvar_67.w = tmpvar_66;
  shadows_46 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = dot (shadows_46, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_45 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = ((tmpvar_43.w * tmpvar_44.w) * tmpvar_45);
  atten_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_3 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_72;
  highp vec3 i_73;
  i_73 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_74;
  tmpvar_74 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_73 - (2.0 * (dot (norm_12, i_73) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (light_3 + (main_13.w * tmpvar_74));
  light_3 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_77;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 444
#line 465
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 452
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 456
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 460
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 444
#line 465
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 469
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 473
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 476
lowp vec4 frag( in v2f IN ) {
    #line 478
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 482
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 486
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 490
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 494
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 498
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 502
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 506
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w;
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_42;
  tmpvar_42 = texture2D (_LightTexture0, vec2(tmpvar_41)).w;
  mediump float tmpvar_43;
  tmpvar_43 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_42), 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_43)), 0.0, 1.0);
  light_3 = tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_45 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_45;
  highp vec3 i_46;
  i_46 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_47;
  tmpvar_47 = (specularReflection_2 * (((tmpvar_42 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_46 - (2.0 * (dot (norm_11, i_46) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (light_3 + (main_12.w * tmpvar_47));
  light_3 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_50;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_42;
  tmpvar_42 = texture2D (_LightTexture0, vec2(tmpvar_41)).w;
  mediump float tmpvar_43;
  tmpvar_43 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_42), 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_43)), 0.0, 1.0);
  light_3 = tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_45 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_45;
  highp vec3 i_46;
  i_46 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_47;
  tmpvar_47 = (specularReflection_2 * (((tmpvar_42 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_46 - (2.0 * (dot (norm_11, i_46) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (light_3 + (main_12.w * tmpvar_47));
  light_3 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_50;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 423
#line 443
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 431
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 435
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 439
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 423
#line 443
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 447
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 451
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    #line 456
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 460
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 464
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 468
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 472
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    #line 476
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 480
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 484
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec3 i_22;
  i_22 = -(xlv_TEXCOORD5);
  vec3 tmpvar_23;
  tmpvar_23 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_21) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_22 - (2.0 * (dot (normal_16, i_22) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_23));
  color_2.xyz = (color_2.xyz * tmpvar_23);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord8 o5
def c14, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c15, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c13, c13
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c13
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mov r0, c10
dp4 r3.z, c13, r0
mov r0, c9
dp4 r3.y, c13, r0
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c13, r1
add r0.w, r2, c14.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.x, r0.w, c14.w
mul_sat r0.w, -r2, c14.y
mad o5.x, r0.w, r1, c15
dp4 r1.x, v0, v0
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
rsq r1.x, r1.x
mul o2.xyz, r0.w, r0
mul r0.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = clamp (((_LightColor0.w * NdotL_4) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_42;
  tmpvar_42 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_41)), 0.0, 1.0);
  light_3 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_43;
  highp vec3 i_44;
  i_44 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_45;
  tmpvar_45 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_44 - (2.0 * (dot (norm_11, i_44) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 + (main_12.w * tmpvar_45));
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_48;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  mediump float tmpvar_41;
  tmpvar_41 = clamp (((_LightColor0.w * NdotL_4) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_42;
  tmpvar_42 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_41)), 0.0, 1.0);
  light_3 = tmpvar_42;
  mediump vec3 tmpvar_43;
  tmpvar_43 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_43;
  highp vec3 i_44;
  i_44 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_45;
  tmpvar_45 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_44 - (2.0 * (dot (norm_11, i_44) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_45;
  highp vec3 tmpvar_46;
  tmpvar_46 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 + (main_12.w * tmpvar_45));
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_48;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 420
#line 450
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 420
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 424
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 428
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 432
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 437
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 420
#line 450
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 441
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 445
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 454
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 458
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 462
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    #line 466
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 470
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    #line 474
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    light += (main.w * specularReflection);
    #line 478
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = ((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w);
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c15
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15.w = tmpvar_39.w;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  highp float tmpvar_46;
  tmpvar_46 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w);
  atten_4 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_12, i_50) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 + (main_13.w * tmpvar_51));
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_54;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15.w = tmpvar_39.w;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  highp float tmpvar_46;
  tmpvar_46 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w);
  atten_4 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_12, i_50) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 + (main_13.w * tmpvar_51));
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_54;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 432
#line 452
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 432
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 436
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 440
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 444
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 448
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 432
#line 452
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 456
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 460
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 463
lowp vec4 frag( in v2f IN ) {
    #line 465
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 469
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 473
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 477
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 481
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    #line 485
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 489
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 493
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_42;
  tmpvar_42 = (texture2D (_LightTextureB0, vec2(tmpvar_41)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_43;
  tmpvar_43 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_42), 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_43)), 0.0, 1.0);
  light_3 = tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_45 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_45;
  highp vec3 i_46;
  i_46 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_47;
  tmpvar_47 = (specularReflection_2 * (((tmpvar_42 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_46 - (2.0 * (dot (norm_11, i_46) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (light_3 + (main_12.w * tmpvar_47));
  light_3 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_50;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_42;
  tmpvar_42 = (texture2D (_LightTextureB0, vec2(tmpvar_41)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_43;
  tmpvar_43 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_42), 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_43)), 0.0, 1.0);
  light_3 = tmpvar_44;
  mediump vec3 tmpvar_45;
  tmpvar_45 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_45;
  highp vec3 i_46;
  i_46 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_47;
  tmpvar_47 = (specularReflection_2 * (((tmpvar_42 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_46 - (2.0 * (dot (norm_11, i_46) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (light_3 + (main_12.w * tmpvar_47));
  light_3 = tmpvar_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_50;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 424
#line 444
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 432
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 436
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 440
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 424
#line 444
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 448
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 452
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 455
lowp vec4 frag( in v2f IN ) {
    #line 457
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 461
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 465
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 469
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 473
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    #line 477
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 481
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 485
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c18, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c19, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
dp3 r2.y, r3, r2
mov r0.xyz, v1
mov r0.w, c18.x
dp4 r1.z, r0, c6
dp4 r1.y, r0, c5
dp4 r1.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r1.xyz, r0.w, r1
mul r0.xyz, r0.y, c17
dp3 r0.w, r1, r0
add r0.x, r0.w, c18.z
dp3 r2.x, r3, v2
dp3 r2.z, v1, r3
dp3 r0.y, r2, r2
rsq r0.z, r0.y
mul o4.xyz, r0.z, r2
frc r0.y, r0.x
add_sat r1.w, r0.x, -r0.y
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r0.xyz, -r1, c16
add r2.y, r1.w, c18.w
mul_sat r2.x, -r0.w, c18.y
dp3 r1.w, r0, r0
rsq r0.w, r1.w
dp4 r1.w, v0, c7
mul o2.xyz, r0.w, r0
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mad o6.x, r2, r2.y, c19
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp float tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_42;
  tmpvar_42 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_41), 0.0, 1.0);
  highp vec3 tmpvar_43;
  tmpvar_43 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_42)), 0.0, 1.0);
  light_3 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_44;
  highp vec3 i_45;
  i_45 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_46;
  tmpvar_46 = (specularReflection_2 * (((tmpvar_41 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_45 - (2.0 * (dot (norm_11, i_45) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 + (main_12.w * tmpvar_46));
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_49;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp float tmpvar_41;
  tmpvar_41 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_42;
  tmpvar_42 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_41), 0.0, 1.0);
  highp vec3 tmpvar_43;
  tmpvar_43 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_42)), 0.0, 1.0);
  light_3 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_44;
  highp vec3 i_45;
  i_45 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_46;
  tmpvar_46 = (specularReflection_2 * (((tmpvar_41 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_45 - (2.0 * (dot (norm_11, i_45) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 + (main_12.w * tmpvar_46));
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_49;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 423
#line 443
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 431
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 435
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 439
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 405
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 423
#line 443
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 447
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 451
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    #line 456
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 460
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 464
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 468
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 472
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    #line 476
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 480
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 484
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  float tmpvar_25;
  if ((tmpvar_24.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  tmpvar_26 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_22.w) * tmpvar_23.w) * tmpvar_25);
  vec3 i_27;
  i_27 = -(xlv_TEXCOORD5);
  vec3 tmpvar_28;
  tmpvar_28 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_26), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_26 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (normal_16, i_27) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_28));
  color_2.xyz = (color_2.xyz * tmpvar_28);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump float shadow_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_49;
  if ((tmpvar_48.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_49 = _LightShadowData.x;
  } else {
    tmpvar_49 = 1.0;
  };
  shadow_47 = tmpvar_49;
  tmpvar_46 = shadow_47;
  highp float tmpvar_50;
  tmpvar_50 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_12, i_54) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_13.w * tmpvar_55));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_58;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump float shadow_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_49;
  if ((tmpvar_48.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_49 = _LightShadowData.x;
  } else {
    tmpvar_49 = 1.0;
  };
  shadow_47 = tmpvar_49;
  tmpvar_46 = shadow_47;
  highp float tmpvar_50;
  tmpvar_50 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_12, i_54) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_13.w * tmpvar_55));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_58;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 439
#line 460
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 447
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 451
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 455
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 439
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 481
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 485
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 489
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 493
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 497
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 501
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x * (1.0 - _LightShadowData.x))));
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15.w = tmpvar_39.w;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump float shadow_47;
  lowp float tmpvar_48;
  tmpvar_48 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD7);
  shadow_47 = tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = (_LightShadowData.x + (shadow_47 * (1.0 - _LightShadowData.x)));
  shadow_47 = tmpvar_49;
  tmpvar_46 = shadow_47;
  highp float tmpvar_50;
  tmpvar_50 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_12, i_54) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_13.w * tmpvar_55));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_58;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 440
#line 461
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 448
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 452
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 456
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 440
#line 461
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 465
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 469
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 472
lowp vec4 frag( in v2f IN ) {
    #line 474
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 478
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 482
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 486
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 490
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 494
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 498
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 502
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  float tmpvar_4;
  tmpvar_4 = dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_5 = TANGENT.xyz;
  tmpvar_6 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = gl_Normal.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = gl_Normal.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = gl_Normal.z;
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_1 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_8;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_4)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_4)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22.x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c16.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c15, c15
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mov r0, c10
dp4 r3.z, c15, r0
mov r0, c9
dp4 r3.y, c15, r0
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c15, r1
add r0.w, r2, c16.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.w, r0, c16
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
mul_sat r0.z, -r2.w, c16.y
mad o6.x, r0.z, r1.w, c17.y
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c17.x
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
mov o0, r0
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c12
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o2.xyz, r0.x, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
rcp o1.x, r0.x
mov o3.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp float tmpvar_41;
  mediump float lightShadowDataX_42;
  highp float dist_43;
  lowp float tmpvar_44;
  tmpvar_44 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_43 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = _LightShadowData.x;
  lightShadowDataX_42 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = max (float((dist_43 > (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w))), lightShadowDataX_42);
  tmpvar_41 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_41), 0.0, 1.0);
  highp vec3 tmpvar_48;
  tmpvar_48 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_47)), 0.0, 1.0);
  light_3 = tmpvar_48;
  mediump vec3 tmpvar_49;
  tmpvar_49 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_49;
  highp vec3 i_50;
  i_50 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_51;
  tmpvar_51 = (specularReflection_2 * (((tmpvar_41 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_50 - (2.0 * (dot (norm_11, i_50) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 + (main_12.w * tmpvar_51));
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_54;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = dot (worldNormal_3, tmpvar_9.xyz);
  mediump float tmpvar_11;
  tmpvar_11 = mix (1.0, clamp (floor((1.01 + tmpvar_10)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_10)), 0.0, 1.0));
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_2.xyz;
  tmpvar_13 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_1.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_1.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_1.z;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_15;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  mediump float tmpvar_42;
  tmpvar_42 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_41.x), 0.0, 1.0);
  highp vec3 tmpvar_43;
  tmpvar_43 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_42)), 0.0, 1.0);
  light_3 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_44;
  highp vec3 i_45;
  i_45 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_46;
  tmpvar_46 = (specularReflection_2 * (((tmpvar_41.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_45 - (2.0 * (dot (norm_11, i_45) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 + (main_12.w * tmpvar_46));
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_49;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 429
#line 449
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 437
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 441
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 445
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 429
#line 449
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 453
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 457
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    #line 462
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 466
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 470
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 474
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 478
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    #line 482
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 486
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 490
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  float tmpvar_4;
  tmpvar_4 = dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_5 = TANGENT.xyz;
  tmpvar_6 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = gl_Normal.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = gl_Normal.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = gl_Normal.z;
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_1 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_8;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_4)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_4)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  vec3 i_23;
  i_23 = -(xlv_TEXCOORD5);
  vec3 tmpvar_24;
  tmpvar_24 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_22), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_22 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_23 - (2.0 * (dot (normal_16, i_23) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_24));
  color_2.xyz = (color_2.xyz * tmpvar_24);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_ProjectionParams]
Vector 18 [_ScreenParams]
Vector 19 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 61 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c19, c19
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c19
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c19, r1
mov r0, c10
dp4 r3.z, c19, r0
mov r0, c9
dp4 r3.y, c19, r0
add r0.w, r2, c20.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.z, r0.w, c20.w
mul_sat r0.w, -r2, c20.y
mad o7.x, r0.w, r1.z, c21.y
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c21.x
mul r0.y, r0, c17.x
mad o6.xy, r0.z, c18.zwzw, r0
mov o0, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r2.xyz, -r0, c16
dp3 r0.w, r2, r2
rsq r1.x, r0.w
dp4 r0.w, v0, c7
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
dp4 r1.y, v0, v0
rsq r0.x, r1.y
mul r0.xyz, r0.x, v0
mul o2.xyz, r1.x, r2
mov o6.zw, r1
rcp o1.x, r1.x
mov o3.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).xyz * 2.0) - 1.0);
  norm_11 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp float tmpvar_41;
  mediump float lightShadowDataX_42;
  highp float dist_43;
  lowp float tmpvar_44;
  tmpvar_44 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_43 = tmpvar_44;
  highp float tmpvar_45;
  tmpvar_45 = _LightShadowData.x;
  lightShadowDataX_42 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = max (float((dist_43 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_42);
  tmpvar_41 = tmpvar_46;
  lowp float tmpvar_47;
  tmpvar_47 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * tmpvar_41);
  mediump float tmpvar_48;
  tmpvar_48 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_47), 0.0, 1.0);
  highp vec3 tmpvar_49;
  tmpvar_49 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_48)), 0.0, 1.0);
  light_3 = tmpvar_49;
  mediump vec3 tmpvar_50;
  tmpvar_50 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_50;
  highp vec3 i_51;
  i_51 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_52;
  tmpvar_52 = (specularReflection_2 * (((tmpvar_47 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_51 - (2.0 * (dot (norm_11, i_51) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (light_3 + (main_12.w * tmpvar_52));
  light_3 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_55;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = dot (worldNormal_3, tmpvar_9.xyz);
  mediump float tmpvar_11;
  tmpvar_11 = mix (1.0, clamp (floor((1.01 + tmpvar_10)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_10)), 0.0, 1.0));
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_2.xyz;
  tmpvar_13 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_1.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_1.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_1.z;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_15;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump float detailLevel_6;
  mediump vec4 detail_7;
  mediump float nylerp_8;
  mediump vec3 detailCoords_9;
  mediump float zxlerp_10;
  mediump vec3 norm_11;
  mediump vec4 main_12;
  highp vec2 uv_13;
  mediump vec4 color_14;
  highp float r_15;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_16;
    y_over_x_16 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_17;
    highp float x_18;
    x_18 = (y_over_x_16 * inversesqrt(((y_over_x_16 * y_over_x_16) + 1.0)));
    s_17 = (sign(x_18) * (1.5708 - (sqrt((1.0 - abs(x_18))) * (1.5708 + (abs(x_18) * (-0.214602 + (abs(x_18) * (0.0865667 + (abs(x_18) * -0.0310296)))))))));
    r_15 = s_17;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_15 = (s_17 + 3.14159);
      } else {
        r_15 = (r_15 - 3.14159);
      };
    };
  } else {
    r_15 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_13.x = (0.5 + (0.159155 * r_15));
  uv_13.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_23;
  tmpvar_23 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_24;
  tmpvar_24 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_26;
  tmpvar_26.x = (0.159155 * sqrt(dot (tmpvar_24, tmpvar_24)));
  tmpvar_26.y = dFdx(tmpvar_23);
  tmpvar_26.z = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_26.w = dFdy(tmpvar_23);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2DGradEXT (_MainTex, uv_13, tmpvar_26.xy, tmpvar_26.zw);
  main_12 = tmpvar_27;
  lowp vec3 normal_28;
  normal_28.xy = ((texture2DGradEXT (_BumpMap, uv_13, tmpvar_26.xy, tmpvar_26.zw).wy * 2.0) - 1.0);
  normal_28.z = sqrt((1.0 - clamp (dot (normal_28.xy, normal_28.xy), 0.0, 1.0)));
  norm_11 = normal_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = abs(xlv_TEXCOORD2);
  highp float tmpvar_30;
  tmpvar_30 = clamp (floor(((1.0 + tmpvar_29.x) - tmpvar_29.z)), 0.0, 1.0);
  zxlerp_10 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = mix (tmpvar_29.zxy, tmpvar_29, vec3(zxlerp_10));
  detailCoords_9 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (floor(((1.0 + tmpvar_29.y) - mix (tmpvar_29.z, tmpvar_29.x, zxlerp_10))), 0.0, 1.0);
  nylerp_8 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = mix (detailCoords_9, tmpvar_29.yxz, vec3(nylerp_8));
  detailCoords_9 = tmpvar_33;
  mediump float tmpvar_34;
  tmpvar_34 = abs(detailCoords_9.x);
  lowp vec4 tmpvar_35;
  highp vec2 P_36;
  P_36 = ((((0.5 * detailCoords_9.zy) / tmpvar_34) + _DetailOffset.xy) * _DetailScale);
  tmpvar_35 = texture2D (_DetailTex, P_36);
  detail_7 = tmpvar_35;
  highp float tmpvar_37;
  tmpvar_37 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_6 = tmpvar_37;
  mediump vec4 tmpvar_38;
  tmpvar_38 = ((main_12 * mix (detail_7, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_6))) * _Color);
  color_14.w = tmpvar_38.w;
  highp vec3 tmpvar_39;
  tmpvar_39 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = dot (norm_11, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_40;
  lowp float tmpvar_41;
  tmpvar_41 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  mediump float tmpvar_42;
  tmpvar_42 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_41), 0.0, 1.0);
  highp vec3 tmpvar_43;
  tmpvar_43 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_42)), 0.0, 1.0);
  light_3 = tmpvar_43;
  mediump vec3 tmpvar_44;
  tmpvar_44 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_44;
  highp vec3 i_45;
  i_45 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_46;
  tmpvar_46 = (specularReflection_2 * (((tmpvar_41 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_45 - (2.0 * (dot (norm_11, i_45) * norm_11))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (light_3 + (main_12.w * tmpvar_46));
  light_3 = tmpvar_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (tmpvar_38.xyz + (_Albedo * light_3));
  color_14.xyz = tmpvar_49;
  color_14.xyz = (color_14.xyz * light_3);
  color_14.w = 1.0;
  tmpvar_1 = color_14;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 432
#line 453
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 432
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 436
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 440
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 444
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 448
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 413
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 432
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 474
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 478
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 482
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    #line 486
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 490
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 494
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  float tmpvar_23;
  tmpvar_23 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_24;
  tmpvar_24 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_25;
  if ((tmpvar_24 < tmpvar_23)) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  tmpvar_26 = (tmpvar_22.w * tmpvar_25);
  vec3 i_27;
  i_27 = -(xlv_TEXCOORD5);
  vec3 tmpvar_28;
  tmpvar_28 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_26), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_26 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (normal_16, i_27) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_28));
  color_2.xyz = (color_2.xyz * tmpvar_28);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, vec2(tmpvar_42));
  highp float tmpvar_44;
  tmpvar_44 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_45 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = dot (packDist_45, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_48;
  if ((tmpvar_47 < tmpvar_44)) {
    tmpvar_48 = _LightShadowData.x;
  } else {
    tmpvar_48 = 1.0;
  };
  highp float tmpvar_49;
  tmpvar_49 = (tmpvar_43.w * tmpvar_48);
  atten_4 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  light_3 = tmpvar_51;
  mediump vec3 tmpvar_52;
  tmpvar_52 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_52;
  highp vec3 i_53;
  i_53 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_54;
  tmpvar_54 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_53 - (2.0 * (dot (norm_12, i_53) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 + (main_13.w * tmpvar_54));
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_57;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, vec2(tmpvar_42));
  highp float tmpvar_44;
  tmpvar_44 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_45;
  lowp vec4 tmpvar_46;
  tmpvar_46 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_45 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = dot (packDist_45, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_48;
  if ((tmpvar_47 < tmpvar_44)) {
    tmpvar_48 = _LightShadowData.x;
  } else {
    tmpvar_48 = 1.0;
  };
  highp float tmpvar_49;
  tmpvar_49 = (tmpvar_43.w * tmpvar_48);
  atten_4 = tmpvar_49;
  mediump float tmpvar_50;
  tmpvar_50 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_51;
  tmpvar_51 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_50)), 0.0, 1.0);
  light_3 = tmpvar_51;
  mediump vec3 tmpvar_52;
  tmpvar_52 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_52;
  highp vec3 i_53;
  i_53 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_54;
  tmpvar_54 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_53 - (2.0 * (dot (norm_12, i_53) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 + (main_13.w * tmpvar_54));
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_57;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 437
#line 458
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 445
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 449
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 453
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 437
#line 458
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 462
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 466
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 469
lowp vec4 frag( in v2f IN ) {
    #line 471
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 475
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 479
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 483
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 487
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 491
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 495
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 499
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_23;
  tmpvar_23 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  float tmpvar_24;
  tmpvar_24 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_25;
  tmpvar_25 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_26;
  if ((tmpvar_25 < tmpvar_24)) {
    tmpvar_26 = _LightShadowData.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  tmpvar_27 = ((tmpvar_22.w * tmpvar_23.w) * tmpvar_26);
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_16, i_28) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_29));
  color_2.xyz = (color_2.xyz * tmpvar_29);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(tmpvar_42));
  lowp vec4 tmpvar_44;
  tmpvar_44 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_45;
  tmpvar_45 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_46 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = dot (packDist_46, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_49;
  if ((tmpvar_48 < tmpvar_45)) {
    tmpvar_49 = _LightShadowData.x;
  } else {
    tmpvar_49 = 1.0;
  };
  highp float tmpvar_50;
  tmpvar_50 = ((tmpvar_43.w * tmpvar_44.w) * tmpvar_49);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_12, i_54) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_13.w * tmpvar_55));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_58;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(tmpvar_42));
  lowp vec4 tmpvar_44;
  tmpvar_44 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_45;
  tmpvar_45 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_46 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = dot (packDist_46, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_49;
  if ((tmpvar_48 < tmpvar_45)) {
    tmpvar_49 = _LightShadowData.x;
  } else {
    tmpvar_49 = 1.0;
  };
  highp float tmpvar_50;
  tmpvar_50 = ((tmpvar_43.w * tmpvar_44.w) * tmpvar_49);
  atten_4 = tmpvar_50;
  mediump float tmpvar_51;
  tmpvar_51 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_52;
  tmpvar_52 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_51)), 0.0, 1.0);
  light_3 = tmpvar_52;
  mediump vec3 tmpvar_53;
  tmpvar_53 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_53;
  highp vec3 i_54;
  i_54 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_55;
  tmpvar_55 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_54 - (2.0 * (dot (norm_12, i_54) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (light_3 + (main_13.w * tmpvar_55));
  light_3 = tmpvar_57;
  highp vec3 tmpvar_58;
  tmpvar_58 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_58;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 438
#line 459
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 446
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 450
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 454
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 438
#line 459
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 463
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 467
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 470
lowp vec4 frag( in v2f IN ) {
    #line 472
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 476
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 480
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 484
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 488
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 492
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 496
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 500
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 shadowVals_24;
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadowVals_24.x = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_24.y = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_24.z = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_24.w = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_24, tmpvar_25.zzzz);
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_22.w) * tmpvar_23.w) * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_34;
  i_34 = -(xlv_TEXCOORD5);
  vec3 tmpvar_35;
  tmpvar_35 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_33), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_33 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_34 - (2.0 * (dot (normal_16, i_34) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_35));
  color_2.xyz = (color_2.xyz * tmpvar_35);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump vec4 shadows_47;
  highp vec4 shadowVals_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_50;
  P_50 = (tmpvar_49.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_51;
  tmpvar_51 = texture2D (_ShadowMapTexture, P_50).x;
  shadowVals_48.x = tmpvar_51;
  highp vec2 P_52;
  P_52 = (tmpvar_49.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_53;
  tmpvar_53 = texture2D (_ShadowMapTexture, P_52).x;
  shadowVals_48.y = tmpvar_53;
  highp vec2 P_54;
  P_54 = (tmpvar_49.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_ShadowMapTexture, P_54).x;
  shadowVals_48.z = tmpvar_55;
  highp vec2 P_56;
  P_56 = (tmpvar_49.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_ShadowMapTexture, P_56).x;
  shadowVals_48.w = tmpvar_57;
  bvec4 tmpvar_58;
  tmpvar_58 = lessThan (shadowVals_48, tmpvar_49.zzzz);
  highp vec4 tmpvar_59;
  tmpvar_59 = _LightShadowData.xxxx;
  highp float tmpvar_60;
  if (tmpvar_58.x) {
    tmpvar_60 = tmpvar_59.x;
  } else {
    tmpvar_60 = 1.0;
  };
  highp float tmpvar_61;
  if (tmpvar_58.y) {
    tmpvar_61 = tmpvar_59.y;
  } else {
    tmpvar_61 = 1.0;
  };
  highp float tmpvar_62;
  if (tmpvar_58.z) {
    tmpvar_62 = tmpvar_59.z;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  if (tmpvar_58.w) {
    tmpvar_63 = tmpvar_59.w;
  } else {
    tmpvar_63 = 1.0;
  };
  highp vec4 tmpvar_64;
  tmpvar_64.x = tmpvar_60;
  tmpvar_64.y = tmpvar_61;
  tmpvar_64.z = tmpvar_62;
  tmpvar_64.w = tmpvar_63;
  shadows_47 = tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = dot (shadows_47, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_46 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  highp vec3 i_70;
  i_70 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_71;
  tmpvar_71 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_70 - (2.0 * (dot (norm_12, i_70) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_13.w * tmpvar_71));
  light_3 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_74;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump vec4 shadows_47;
  highp vec4 shadowVals_48;
  highp vec3 tmpvar_49;
  tmpvar_49 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_50;
  P_50 = (tmpvar_49.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_51;
  tmpvar_51 = texture2D (_ShadowMapTexture, P_50).x;
  shadowVals_48.x = tmpvar_51;
  highp vec2 P_52;
  P_52 = (tmpvar_49.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_53;
  tmpvar_53 = texture2D (_ShadowMapTexture, P_52).x;
  shadowVals_48.y = tmpvar_53;
  highp vec2 P_54;
  P_54 = (tmpvar_49.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_ShadowMapTexture, P_54).x;
  shadowVals_48.z = tmpvar_55;
  highp vec2 P_56;
  P_56 = (tmpvar_49.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_ShadowMapTexture, P_56).x;
  shadowVals_48.w = tmpvar_57;
  bvec4 tmpvar_58;
  tmpvar_58 = lessThan (shadowVals_48, tmpvar_49.zzzz);
  highp vec4 tmpvar_59;
  tmpvar_59 = _LightShadowData.xxxx;
  highp float tmpvar_60;
  if (tmpvar_58.x) {
    tmpvar_60 = tmpvar_59.x;
  } else {
    tmpvar_60 = 1.0;
  };
  highp float tmpvar_61;
  if (tmpvar_58.y) {
    tmpvar_61 = tmpvar_59.y;
  } else {
    tmpvar_61 = 1.0;
  };
  highp float tmpvar_62;
  if (tmpvar_58.z) {
    tmpvar_62 = tmpvar_59.z;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  if (tmpvar_58.w) {
    tmpvar_63 = tmpvar_59.w;
  } else {
    tmpvar_63 = 1.0;
  };
  highp vec4 tmpvar_64;
  tmpvar_64.x = tmpvar_60;
  tmpvar_64.y = tmpvar_61;
  tmpvar_64.z = tmpvar_62;
  tmpvar_64.w = tmpvar_63;
  shadows_47 = tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = dot (shadows_47, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_46 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  highp vec3 i_70;
  i_70 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_71;
  tmpvar_71 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_70 - (2.0 * (dot (norm_12, i_70) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_13.w * tmpvar_71));
  light_3 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_74;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 447
#line 468
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 455
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 459
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 463
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 447
#line 468
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 472
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 476
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 489
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 493
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 497
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 501
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 505
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 509
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2.w = tmpvar_20.w;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 shadows_22;
  vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadows_22.x = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[0].xyz)).x;
  shadows_22.y = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[1].xyz)).x;
  shadows_22.z = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[2].xyz)).x;
  shadows_22.w = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_24;
  tmpvar_24 = (_LightShadowData.xxxx + (shadows_22 * (1.0 - _LightShadowData.xxxx)));
  shadows_22 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * dot (tmpvar_24, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_26;
  i_26 = -(xlv_TEXCOORD5);
  vec3 tmpvar_27;
  tmpvar_27 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_25), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_26 - (2.0 * (dot (normal_16, i_26) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_27));
  color_2.xyz = (color_2.xyz * tmpvar_27);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15.w = tmpvar_39.w;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  lowp vec4 tmpvar_42;
  highp vec2 P_43;
  P_43 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_42 = texture2D (_LightTexture0, P_43);
  highp float tmpvar_44;
  tmpvar_44 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_LightTextureB0, vec2(tmpvar_44));
  lowp float tmpvar_46;
  mediump vec4 shadows_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec3 coord_49;
  coord_49 = (tmpvar_48 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_50;
  tmpvar_50 = shadow2DEXT (_ShadowMapTexture, coord_49);
  shadows_47.x = tmpvar_50;
  highp vec3 coord_51;
  coord_51 = (tmpvar_48 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_52;
  tmpvar_52 = shadow2DEXT (_ShadowMapTexture, coord_51);
  shadows_47.y = tmpvar_52;
  highp vec3 coord_53;
  coord_53 = (tmpvar_48 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_54;
  tmpvar_54 = shadow2DEXT (_ShadowMapTexture, coord_53);
  shadows_47.z = tmpvar_54;
  highp vec3 coord_55;
  coord_55 = (tmpvar_48 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_56;
  tmpvar_56 = shadow2DEXT (_ShadowMapTexture, coord_55);
  shadows_47.w = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (_LightShadowData.xxxx + (shadows_47 * (1.0 - _LightShadowData.xxxx)));
  shadows_47 = tmpvar_57;
  mediump float tmpvar_58;
  tmpvar_58 = dot (shadows_47, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_46 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_42.w) * tmpvar_45.w) * tmpvar_46);
  atten_4 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_3 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_62;
  highp vec3 i_63;
  i_63 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_64;
  tmpvar_64 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_63 - (2.0 * (dot (norm_12, i_63) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_3 + (main_13.w * tmpvar_64));
  light_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_67;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 447
#line 468
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 455
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 459
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 463
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 447
#line 468
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 472
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 476
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 489
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 493
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 497
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    #line 501
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 505
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 509
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 shadowVals_23;
  shadowVals_23.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_24;
  tmpvar_24 = lessThan (shadowVals_23, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_25;
  tmpvar_25 = _LightShadowData.xxxx;
  float tmpvar_26;
  if (tmpvar_24.x) {
    tmpvar_26 = tmpvar_25.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_24.y) {
    tmpvar_27 = tmpvar_25.y;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_24.z) {
    tmpvar_28 = tmpvar_25.z;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_24.w) {
    tmpvar_29 = tmpvar_25.w;
  } else {
    tmpvar_29 = 1.0;
  };
  vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_26;
  tmpvar_30.y = tmpvar_27;
  tmpvar_30.z = tmpvar_28;
  tmpvar_30.w = tmpvar_29;
  float tmpvar_31;
  tmpvar_31 = (tmpvar_22.w * dot (tmpvar_30, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_32;
  i_32 = -(xlv_TEXCOORD5);
  vec3 tmpvar_33;
  tmpvar_33 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (normal_16, i_32) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_33));
  color_2.xyz = (color_2.xyz * tmpvar_33);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, vec2(tmpvar_42));
  highp float tmpvar_44;
  mediump vec4 shadows_45;
  highp vec4 shadowVals_46;
  highp float tmpvar_47;
  tmpvar_47 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_48;
  vec_48 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_49;
  lowp vec4 tmpvar_50;
  tmpvar_50 = textureCube (_ShadowMapTexture, vec_48);
  packDist_49 = tmpvar_50;
  shadowVals_46.x = dot (packDist_49, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_51;
  vec_51 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = textureCube (_ShadowMapTexture, vec_51);
  packDist_52 = tmpvar_53;
  shadowVals_46.y = dot (packDist_52, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_54;
  vec_54 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_55;
  lowp vec4 tmpvar_56;
  tmpvar_56 = textureCube (_ShadowMapTexture, vec_54);
  packDist_55 = tmpvar_56;
  shadowVals_46.z = dot (packDist_55, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_57;
  vec_57 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_ShadowMapTexture, vec_57);
  packDist_58 = tmpvar_59;
  shadowVals_46.w = dot (packDist_58, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_60;
  tmpvar_60 = lessThan (shadowVals_46, vec4(tmpvar_47));
  highp vec4 tmpvar_61;
  tmpvar_61 = _LightShadowData.xxxx;
  highp float tmpvar_62;
  if (tmpvar_60.x) {
    tmpvar_62 = tmpvar_61.x;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  if (tmpvar_60.y) {
    tmpvar_63 = tmpvar_61.y;
  } else {
    tmpvar_63 = 1.0;
  };
  highp float tmpvar_64;
  if (tmpvar_60.z) {
    tmpvar_64 = tmpvar_61.z;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_60.w) {
    tmpvar_65 = tmpvar_61.w;
  } else {
    tmpvar_65 = 1.0;
  };
  highp vec4 tmpvar_66;
  tmpvar_66.x = tmpvar_62;
  tmpvar_66.y = tmpvar_63;
  tmpvar_66.z = tmpvar_64;
  tmpvar_66.w = tmpvar_65;
  shadows_45 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = dot (shadows_45, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_44 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = (tmpvar_43.w * tmpvar_44);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  highp vec3 i_72;
  i_72 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_73;
  tmpvar_73 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_72 - (2.0 * (dot (norm_12, i_72) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (light_3 + (main_13.w * tmpvar_73));
  light_3 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_76;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTexture0, vec2(tmpvar_42));
  highp float tmpvar_44;
  mediump vec4 shadows_45;
  highp vec4 shadowVals_46;
  highp float tmpvar_47;
  tmpvar_47 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_48;
  vec_48 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_49;
  lowp vec4 tmpvar_50;
  tmpvar_50 = textureCube (_ShadowMapTexture, vec_48);
  packDist_49 = tmpvar_50;
  shadowVals_46.x = dot (packDist_49, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_51;
  vec_51 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_52;
  lowp vec4 tmpvar_53;
  tmpvar_53 = textureCube (_ShadowMapTexture, vec_51);
  packDist_52 = tmpvar_53;
  shadowVals_46.y = dot (packDist_52, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_54;
  vec_54 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_55;
  lowp vec4 tmpvar_56;
  tmpvar_56 = textureCube (_ShadowMapTexture, vec_54);
  packDist_55 = tmpvar_56;
  shadowVals_46.z = dot (packDist_55, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_57;
  vec_57 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_ShadowMapTexture, vec_57);
  packDist_58 = tmpvar_59;
  shadowVals_46.w = dot (packDist_58, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_60;
  tmpvar_60 = lessThan (shadowVals_46, vec4(tmpvar_47));
  highp vec4 tmpvar_61;
  tmpvar_61 = _LightShadowData.xxxx;
  highp float tmpvar_62;
  if (tmpvar_60.x) {
    tmpvar_62 = tmpvar_61.x;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  if (tmpvar_60.y) {
    tmpvar_63 = tmpvar_61.y;
  } else {
    tmpvar_63 = 1.0;
  };
  highp float tmpvar_64;
  if (tmpvar_60.z) {
    tmpvar_64 = tmpvar_61.z;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_60.w) {
    tmpvar_65 = tmpvar_61.w;
  } else {
    tmpvar_65 = 1.0;
  };
  highp vec4 tmpvar_66;
  tmpvar_66.x = tmpvar_62;
  tmpvar_66.y = tmpvar_63;
  tmpvar_66.z = tmpvar_64;
  tmpvar_66.w = tmpvar_65;
  shadows_45 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = dot (shadows_45, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_44 = tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = (tmpvar_43.w * tmpvar_44);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  highp vec3 i_72;
  i_72 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_73;
  tmpvar_73 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_72 - (2.0 * (dot (norm_12, i_72) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_73;
  highp vec3 tmpvar_74;
  tmpvar_74 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (light_3 + (main_13.w * tmpvar_73));
  light_3 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_76;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 443
#line 464
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 451
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 455
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 459
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 443
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 485
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 489
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 493
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    #line 497
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 501
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 505
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  vec3 normal_16;
  normal_16.xy = ((texture2DGradARB (_BumpMap, uv_1, tmpvar_14.xy, tmpvar_14.zw).wy * 2.0) - 1.0);
  normal_16.z = sqrt((1.0 - clamp (dot (normal_16.xy, normal_16.xy), 0.0, 1.0)));
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD2);
  float tmpvar_18;
  tmpvar_18 = clamp (floor(((1.0 + tmpvar_17.x) - tmpvar_17.z)), 0.0, 1.0);
  vec3 tmpvar_19;
  tmpvar_19 = mix (mix (tmpvar_17.zxy, tmpvar_17, vec3(tmpvar_18)), tmpvar_17.yxz, vec3(clamp (floor(((1.0 + tmpvar_17.y) - mix (tmpvar_17.z, tmpvar_17.x, tmpvar_18))), 0.0, 1.0)));
  vec4 tmpvar_20;
  tmpvar_20 = ((tmpvar_15 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_19.zy) / abs(tmpvar_19.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_20;
  float tmpvar_21;
  tmpvar_21 = dot (normal_16, xlv_TEXCOORD5);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_23;
  tmpvar_23 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  vec4 shadowVals_24;
  shadowVals_24.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_25;
  tmpvar_25 = lessThan (shadowVals_24, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_26;
  tmpvar_26 = _LightShadowData.xxxx;
  float tmpvar_27;
  if (tmpvar_25.x) {
    tmpvar_27 = tmpvar_26.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_25.y) {
    tmpvar_28 = tmpvar_26.y;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_25.z) {
    tmpvar_29 = tmpvar_26.z;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_25.w) {
    tmpvar_30 = tmpvar_26.w;
  } else {
    tmpvar_30 = 1.0;
  };
  vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_27;
  tmpvar_31.y = tmpvar_28;
  tmpvar_31.z = tmpvar_29;
  tmpvar_31.w = tmpvar_30;
  float tmpvar_32;
  tmpvar_32 = ((tmpvar_22.w * tmpvar_23.w) * dot (tmpvar_31, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_33;
  i_33 = -(xlv_TEXCOORD5);
  vec3 tmpvar_34;
  tmpvar_34 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 2.0) * tmpvar_32), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_21)), 0.0, 1.0)) * (((tmpvar_32 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_33 - (2.0 * (dot (normal_16, i_33) * normal_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_2.xyz = (tmpvar_20.xyz + (_Albedo * tmpvar_34));
  color_2.xyz = (color_2.xyz * tmpvar_34);
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).xyz * 2.0) - 1.0);
  norm_12 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(tmpvar_42));
  lowp vec4 tmpvar_44;
  tmpvar_44 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_45;
  mediump vec4 shadows_46;
  highp vec4 shadowVals_47;
  highp float tmpvar_48;
  tmpvar_48 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_49;
  vec_49 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_50;
  lowp vec4 tmpvar_51;
  tmpvar_51 = textureCube (_ShadowMapTexture, vec_49);
  packDist_50 = tmpvar_51;
  shadowVals_47.x = dot (packDist_50, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_52;
  vec_52 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_53;
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureCube (_ShadowMapTexture, vec_52);
  packDist_53 = tmpvar_54;
  shadowVals_47.y = dot (packDist_53, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_55;
  vec_55 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_56;
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_ShadowMapTexture, vec_55);
  packDist_56 = tmpvar_57;
  shadowVals_47.z = dot (packDist_56, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_58;
  vec_58 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, vec_58);
  packDist_59 = tmpvar_60;
  shadowVals_47.w = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_61;
  tmpvar_61 = lessThan (shadowVals_47, vec4(tmpvar_48));
  highp vec4 tmpvar_62;
  tmpvar_62 = _LightShadowData.xxxx;
  highp float tmpvar_63;
  if (tmpvar_61.x) {
    tmpvar_63 = tmpvar_62.x;
  } else {
    tmpvar_63 = 1.0;
  };
  highp float tmpvar_64;
  if (tmpvar_61.y) {
    tmpvar_64 = tmpvar_62.y;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_61.z) {
    tmpvar_65 = tmpvar_62.z;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  if (tmpvar_61.w) {
    tmpvar_66 = tmpvar_62.w;
  } else {
    tmpvar_66 = 1.0;
  };
  highp vec4 tmpvar_67;
  tmpvar_67.x = tmpvar_63;
  tmpvar_67.y = tmpvar_64;
  tmpvar_67.z = tmpvar_65;
  tmpvar_67.w = tmpvar_66;
  shadows_46 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = dot (shadows_46, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_45 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = ((tmpvar_43.w * tmpvar_44.w) * tmpvar_45);
  atten_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_3 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_72;
  highp vec3 i_73;
  i_73 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_74;
  tmpvar_74 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_73 - (2.0 * (dot (norm_12, i_73) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (light_3 + (main_13.w * tmpvar_74));
  light_3 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_77;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float nylerp_9;
  mediump vec3 detailCoords_10;
  mediump float zxlerp_11;
  mediump vec3 norm_12;
  mediump vec4 main_13;
  highp vec2 uv_14;
  mediump vec4 color_15;
  highp float r_16;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_17;
    y_over_x_17 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_18;
    highp float x_19;
    x_19 = (y_over_x_17 * inversesqrt(((y_over_x_17 * y_over_x_17) + 1.0)));
    s_18 = (sign(x_19) * (1.5708 - (sqrt((1.0 - abs(x_19))) * (1.5708 + (abs(x_19) * (-0.214602 + (abs(x_19) * (0.0865667 + (abs(x_19) * -0.0310296)))))))));
    r_16 = s_18;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_16 = (s_18 + 3.14159);
      } else {
        r_16 = (r_16 - 3.14159);
      };
    };
  } else {
    r_16 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_14.x = (0.5 + (0.159155 * r_16));
  uv_14.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_24;
  tmpvar_24 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_25;
  tmpvar_25 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_26;
  tmpvar_26 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_27;
  tmpvar_27.x = (0.159155 * sqrt(dot (tmpvar_25, tmpvar_25)));
  tmpvar_27.y = dFdx(tmpvar_24);
  tmpvar_27.z = (0.159155 * sqrt(dot (tmpvar_26, tmpvar_26)));
  tmpvar_27.w = dFdy(tmpvar_24);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2DGradEXT (_MainTex, uv_14, tmpvar_27.xy, tmpvar_27.zw);
  main_13 = tmpvar_28;
  lowp vec3 normal_29;
  normal_29.xy = ((texture2DGradEXT (_BumpMap, uv_14, tmpvar_27.xy, tmpvar_27.zw).wy * 2.0) - 1.0);
  normal_29.z = sqrt((1.0 - clamp (dot (normal_29.xy, normal_29.xy), 0.0, 1.0)));
  norm_12 = normal_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = abs(xlv_TEXCOORD2);
  highp float tmpvar_31;
  tmpvar_31 = clamp (floor(((1.0 + tmpvar_30.x) - tmpvar_30.z)), 0.0, 1.0);
  zxlerp_11 = tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = mix (tmpvar_30.zxy, tmpvar_30, vec3(zxlerp_11));
  detailCoords_10 = tmpvar_32;
  highp float tmpvar_33;
  tmpvar_33 = clamp (floor(((1.0 + tmpvar_30.y) - mix (tmpvar_30.z, tmpvar_30.x, zxlerp_11))), 0.0, 1.0);
  nylerp_9 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = mix (detailCoords_10, tmpvar_30.yxz, vec3(nylerp_9));
  detailCoords_10 = tmpvar_34;
  mediump float tmpvar_35;
  tmpvar_35 = abs(detailCoords_10.x);
  lowp vec4 tmpvar_36;
  highp vec2 P_37;
  P_37 = ((((0.5 * detailCoords_10.zy) / tmpvar_35) + _DetailOffset.xy) * _DetailScale);
  tmpvar_36 = texture2D (_DetailTex, P_37);
  detail_8 = tmpvar_36;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_38;
  mediump vec4 tmpvar_39;
  tmpvar_39 = ((main_13 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color);
  color_15 = tmpvar_39;
  highp vec3 tmpvar_40;
  tmpvar_40 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = dot (norm_12, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_41;
  highp float tmpvar_42;
  tmpvar_42 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_LightTextureB0, vec2(tmpvar_42));
  lowp vec4 tmpvar_44;
  tmpvar_44 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_45;
  mediump vec4 shadows_46;
  highp vec4 shadowVals_47;
  highp float tmpvar_48;
  tmpvar_48 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_49;
  vec_49 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_50;
  lowp vec4 tmpvar_51;
  tmpvar_51 = textureCube (_ShadowMapTexture, vec_49);
  packDist_50 = tmpvar_51;
  shadowVals_47.x = dot (packDist_50, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_52;
  vec_52 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_53;
  lowp vec4 tmpvar_54;
  tmpvar_54 = textureCube (_ShadowMapTexture, vec_52);
  packDist_53 = tmpvar_54;
  shadowVals_47.y = dot (packDist_53, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_55;
  vec_55 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_56;
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_ShadowMapTexture, vec_55);
  packDist_56 = tmpvar_57;
  shadowVals_47.z = dot (packDist_56, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_58;
  vec_58 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, vec_58);
  packDist_59 = tmpvar_60;
  shadowVals_47.w = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_61;
  tmpvar_61 = lessThan (shadowVals_47, vec4(tmpvar_48));
  highp vec4 tmpvar_62;
  tmpvar_62 = _LightShadowData.xxxx;
  highp float tmpvar_63;
  if (tmpvar_61.x) {
    tmpvar_63 = tmpvar_62.x;
  } else {
    tmpvar_63 = 1.0;
  };
  highp float tmpvar_64;
  if (tmpvar_61.y) {
    tmpvar_64 = tmpvar_62.y;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  if (tmpvar_61.z) {
    tmpvar_65 = tmpvar_62.z;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  if (tmpvar_61.w) {
    tmpvar_66 = tmpvar_62.w;
  } else {
    tmpvar_66 = 1.0;
  };
  highp vec4 tmpvar_67;
  tmpvar_67.x = tmpvar_63;
  tmpvar_67.y = tmpvar_64;
  tmpvar_67.z = tmpvar_65;
  tmpvar_67.w = tmpvar_66;
  shadows_46 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = dot (shadows_46, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_45 = tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = ((tmpvar_43.w * tmpvar_44.w) * tmpvar_45);
  atten_4 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_71;
  tmpvar_71 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_70)), 0.0, 1.0);
  light_3 = tmpvar_71;
  mediump vec3 tmpvar_72;
  tmpvar_72 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_72;
  highp vec3 i_73;
  i_73 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_74;
  tmpvar_74 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_73 - (2.0 * (dot (norm_12, i_73) * norm_12))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_74;
  highp vec3 tmpvar_75;
  tmpvar_75 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_75;
  highp vec3 tmpvar_76;
  tmpvar_76 = (light_3 + (main_13.w * tmpvar_74));
  light_3 = tmpvar_76;
  highp vec3 tmpvar_77;
  tmpvar_77 = (tmpvar_39.xyz + (_Albedo * light_3));
  color_15.xyz = tmpvar_77;
  color_15.xyz = (color_15.xyz * light_3);
  color_15.w = 1.0;
  tmpvar_1 = color_15;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 444
#line 465
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 452
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 456
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 460
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
#line 444
#line 465
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 469
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 473
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 476
lowp vec4 frag( in v2f IN ) {
    #line 478
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 482
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 486
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 490
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 494
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    #line 498
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    #line 502
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    #line 506
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w;
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_LightTexture0, vec2(tmpvar_54)).w;
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  highp vec3 i_59;
  i_59 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_59 - (2.0 * (dot (norm_15, i_59) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_63;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_55), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_LightTexture0, vec2(tmpvar_54)).w;
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  highp vec3 i_59;
  i_59 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_59 - (2.0 * (dot (norm_15, i_59) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_63;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_55), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 407
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 447
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 427
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 431
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 435
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 439
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 443
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 407
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 447
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 451
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 455
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    #line 460
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 464
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 468
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 472
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 476
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 480
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 484
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 488
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 492
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 496
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec3 i_27;
  i_27 = -(xlv_TEXCOORD5);
  vec3 tmpvar_28;
  tmpvar_28 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_26) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (normal_18, i_27) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_28));
  color_4.xyz = (color_4.xyz * tmpvar_28);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord8 o5
def c14, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c15, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c13, c13
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c13
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mov r0, c10
dp4 r3.z, c13, r0
mov r0, c9
dp4 r3.y, c13, r0
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c13, r1
add r0.w, r2, c14.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.x, r0.w, c14.w
mul_sat r0.w, -r2, c14.y
mad o5.x, r0.w, r1, c15
dp4 r1.x, v0, v0
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
rsq r1.x, r1.x
mul o2.xyz, r0.w, r0
mul r0.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (((_LightColor0.w * NdotL_4) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_54)), 0.0, 1.0);
  light_3 = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_56;
  highp vec3 i_57;
  i_57 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_58;
  tmpvar_58 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_57 - (2.0 * (dot (norm_15, i_57) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_58));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_61;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (((_LightColor0.w * NdotL_4) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_54)), 0.0, 1.0);
  light_3 = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_56;
  highp vec3 i_57;
  i_57 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_58;
  tmpvar_58 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_57 - (2.0 * (dot (norm_15, i_57) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_58));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_61;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 405
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 424
#line 454
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 432
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 436
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 441
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 405
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 424
#line 454
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 445
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 449
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 458
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 462
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 466
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    #line 470
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 474
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 478
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    #line 482
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 486
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    #line 490
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 494
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = ((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w);
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c15
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7.xyz = tmpvar_50.xyz;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19.w = tmpvar_52.w;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  highp float tmpvar_59;
  tmpvar_59 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w);
  atten_4 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_3 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_62;
  highp vec3 i_63;
  i_63 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_64;
  tmpvar_64 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_63 - (2.0 * (dot (norm_16, i_63) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_3 + (main_17.w * tmpvar_64));
  light_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_67;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7.xyz = tmpvar_50.xyz;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19.w = tmpvar_52.w;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  highp float tmpvar_59;
  tmpvar_59 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w);
  atten_4 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_3 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_62;
  highp vec3 i_63;
  i_63 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_64;
  tmpvar_64 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_63 - (2.0 * (dot (norm_16, i_63) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_3 + (main_17.w * tmpvar_64));
  light_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_67;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 416
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 436
#line 456
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 444
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 448
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 416
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 436
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 477
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 481
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 485
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 489
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 493
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 497
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 501
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 505
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_55;
  tmpvar_55 = (texture2D (_LightTextureB0, vec2(tmpvar_54)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  highp vec3 i_59;
  i_59 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_59 - (2.0 * (dot (norm_15, i_59) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_63;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_55), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_55;
  tmpvar_55 = (texture2D (_LightTextureB0, vec2(tmpvar_54)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  highp vec3 i_59;
  i_59 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_59 - (2.0 * (dot (norm_15, i_59) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_63;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_55), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 408
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 448
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 436
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 440
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 444
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 408
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 448
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 452
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 456
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 459
lowp vec4 frag( in v2f IN ) {
    #line 461
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 465
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 469
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 473
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 477
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 481
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 485
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 489
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 493
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 497
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c18, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c19, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
dp3 r2.y, r3, r2
mov r0.xyz, v1
mov r0.w, c18.x
dp4 r1.z, r0, c6
dp4 r1.y, r0, c5
dp4 r1.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r1.xyz, r0.w, r1
mul r0.xyz, r0.y, c17
dp3 r0.w, r1, r0
add r0.x, r0.w, c18.z
dp3 r2.x, r3, v2
dp3 r2.z, v1, r3
dp3 r0.y, r2, r2
rsq r0.z, r0.y
mul o4.xyz, r0.z, r2
frc r0.y, r0.x
add_sat r1.w, r0.x, -r0.y
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r0.xyz, -r1, c16
add r2.y, r1.w, c18.w
mul_sat r2.x, -r0.w, c18.y
dp3 r1.w, r0, r0
rsq r0.w, r1.w
dp4 r1.w, v0, c7
mul o2.xyz, r0.w, r0
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mad o6.x, r2, r2.y, c19
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp float tmpvar_54;
  tmpvar_54 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_54), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((tmpvar_54 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_54), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp float tmpvar_54;
  tmpvar_54 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_54), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((tmpvar_54 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_54), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 407
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 447
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 427
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 431
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 435
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 439
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 443
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 407
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 447
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 451
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 455
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    #line 460
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 464
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 468
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 472
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 476
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 480
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 484
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 488
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 492
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 496
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  float tmpvar_30;
  if ((tmpvar_29.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  tmpvar_31 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_27.w) * tmpvar_28.w) * tmpvar_30);
  vec3 i_32;
  i_32 = -(xlv_TEXCOORD5);
  vec3 tmpvar_33;
  tmpvar_33 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (normal_18, i_32) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_33));
  color_4.xyz = (color_4.xyz * tmpvar_33);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump float shadow_60;
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_62;
  if ((tmpvar_61.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_62 = _LightShadowData.x;
  } else {
    tmpvar_62 = 1.0;
  };
  shadow_60 = tmpvar_62;
  tmpvar_59 = shadow_60;
  highp float tmpvar_63;
  tmpvar_63 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_16, i_67) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 + (main_17.w * tmpvar_68));
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_71;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump float shadow_60;
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_62;
  if ((tmpvar_61.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_62 = _LightShadowData.x;
  } else {
    tmpvar_62 = 1.0;
  };
  shadow_60 = tmpvar_62;
  tmpvar_59 = shadow_60;
  highp float tmpvar_63;
  tmpvar_63 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_16, i_67) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 + (main_17.w * tmpvar_68));
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_71;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 422
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 464
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 451
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 455
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 459
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 422
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 485
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 489
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 493
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 497
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 501
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 505
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 509
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 513
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x * (1.0 - _LightShadowData.x))));
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7.xyz = tmpvar_50.xyz;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19.w = tmpvar_52.w;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump float shadow_60;
  lowp float tmpvar_61;
  tmpvar_61 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD7);
  shadow_60 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (_LightShadowData.x + (shadow_60 * (1.0 - _LightShadowData.x)));
  shadow_60 = tmpvar_62;
  tmpvar_59 = shadow_60;
  highp float tmpvar_63;
  tmpvar_63 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_16, i_67) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 + (main_17.w * tmpvar_68));
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_71;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 423
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 465
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 452
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 456
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 460
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 423
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 465
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 469
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 473
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 476
lowp vec4 frag( in v2f IN ) {
    #line 478
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 482
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 486
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 490
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 494
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 498
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 502
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 506
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 510
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 514
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  float tmpvar_4;
  tmpvar_4 = dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_5 = TANGENT.xyz;
  tmpvar_6 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = gl_Normal.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = gl_Normal.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = gl_Normal.z;
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_1 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_8;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_4)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_4)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27.x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27.x), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c16.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c15, c15
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mov r0, c10
dp4 r3.z, c15, r0
mov r0, c9
dp4 r3.y, c15, r0
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c15, r1
add r0.w, r2, c16.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.w, r0, c16
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
mul_sat r0.z, -r2.w, c16.y
mad o6.x, r0.z, r1.w, c17.y
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c17.x
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
mov o0, r0
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c12
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o2.xyz, r0.x, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
rcp o1.x, r0.x
mov o3.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp float tmpvar_54;
  mediump float lightShadowDataX_55;
  highp float dist_56;
  lowp float tmpvar_57;
  tmpvar_57 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = _LightShadowData.x;
  lightShadowDataX_55 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = max (float((dist_56 > (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w))), lightShadowDataX_55);
  tmpvar_54 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_54), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_3 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_62;
  highp vec3 i_63;
  i_63 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_64;
  tmpvar_64 = (specularReflection_2 * (((tmpvar_54 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_63 - (2.0 * (dot (norm_15, i_63) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_3 + (main_16.w * tmpvar_64));
  light_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_67;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_54), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = dot (worldNormal_3, tmpvar_9.xyz);
  mediump float tmpvar_11;
  tmpvar_11 = mix (1.0, clamp (floor((1.01 + tmpvar_10)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_10)), 0.0, 1.0));
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_2.xyz;
  tmpvar_13 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_1.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_1.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_1.z;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_15;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_54.x), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((tmpvar_54.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_54.x), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 413
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 453
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 441
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 445
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 449
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 413
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 474
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 478
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 482
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 486
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 490
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 494
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 498
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 502
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  float tmpvar_4;
  tmpvar_4 = dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_5 = TANGENT.xyz;
  tmpvar_6 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = gl_Normal.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = gl_Normal.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = gl_Normal.z;
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_1 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_8;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_4)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_4)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_ProjectionParams]
Vector 18 [_ScreenParams]
Vector 19 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 61 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c19, c19
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c19
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c19, r1
mov r0, c10
dp4 r3.z, c19, r0
mov r0, c9
dp4 r3.y, c19, r0
add r0.w, r2, c20.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.z, r0.w, c20.w
mul_sat r0.w, -r2, c20.y
mad o7.x, r0.w, r1.z, c21.y
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c21.x
mul r0.y, r0, c17.x
mad o6.xy, r0.z, c18.zwzw, r0
mov o0, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r2.xyz, -r0, c16
dp3 r0.w, r2, r2
rsq r1.x, r0.w
dp4 r0.w, v0, c7
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
dp4 r1.y, v0, v0
rsq r0.x, r1.y
mul r0.xyz, r0.x, v0
mul o2.xyz, r1.x, r2
mov o6.zw, r1
rcp o1.x, r1.x
mov o3.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp float tmpvar_54;
  mediump float lightShadowDataX_55;
  highp float dist_56;
  lowp float tmpvar_57;
  tmpvar_57 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = _LightShadowData.x;
  lightShadowDataX_55 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = max (float((dist_56 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_55);
  tmpvar_54 = tmpvar_59;
  lowp float tmpvar_60;
  tmpvar_60 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * tmpvar_54);
  mediump float tmpvar_61;
  tmpvar_61 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_60), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  light_3 = tmpvar_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_63;
  highp vec3 i_64;
  i_64 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_65;
  tmpvar_65 = (specularReflection_2 * (((tmpvar_60 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_64 - (2.0 * (dot (norm_15, i_64) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (light_3 + (main_16.w * tmpvar_65));
  light_3 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_68;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_60), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = dot (worldNormal_3, tmpvar_9.xyz);
  mediump float tmpvar_11;
  tmpvar_11 = mix (1.0, clamp (floor((1.01 + tmpvar_10)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_10)), 0.0, 1.0));
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_2.xyz;
  tmpvar_13 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_1.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_1.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_1.z;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_15;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp float tmpvar_54;
  tmpvar_54 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_54), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((tmpvar_54 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_54), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 436
#line 457
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 444
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 448
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 436
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 478
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 482
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 486
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 490
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 494
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 498
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 502
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 506
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  float tmpvar_28;
  tmpvar_28 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_29;
  tmpvar_29 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_30;
  if ((tmpvar_29 < tmpvar_28)) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  tmpvar_31 = (tmpvar_27.w * tmpvar_30);
  vec3 i_32;
  i_32 = -(xlv_TEXCOORD5);
  vec3 tmpvar_33;
  tmpvar_33 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (normal_18, i_32) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_33));
  color_4.xyz = (color_4.xyz * tmpvar_33);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55));
  highp float tmpvar_57;
  tmpvar_57 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_58 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (packDist_58, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_61;
  if ((tmpvar_60 < tmpvar_57)) {
    tmpvar_61 = _LightShadowData.x;
  } else {
    tmpvar_61 = 1.0;
  };
  highp float tmpvar_62;
  tmpvar_62 = (tmpvar_56.w * tmpvar_61);
  atten_4 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_3 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_65;
  highp vec3 i_66;
  i_66 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_67;
  tmpvar_67 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_66 - (2.0 * (dot (norm_16, i_66) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 + (main_17.w * tmpvar_67));
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_70;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55));
  highp float tmpvar_57;
  tmpvar_57 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_58 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (packDist_58, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_61;
  if ((tmpvar_60 < tmpvar_57)) {
    tmpvar_61 = _LightShadowData.x;
  } else {
    tmpvar_61 = 1.0;
  };
  highp float tmpvar_62;
  tmpvar_62 = (tmpvar_56.w * tmpvar_61);
  atten_4 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_3 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_65;
  highp vec3 i_66;
  i_66 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_67;
  tmpvar_67 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_66 - (2.0 * (dot (norm_16, i_66) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 + (main_17.w * tmpvar_67));
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_70;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 420
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 462
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 449
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 453
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 457
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 420
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 462
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 466
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 470
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 473
lowp vec4 frag( in v2f IN ) {
    #line 475
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 479
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 483
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 487
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 495
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 499
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 503
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 507
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 511
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_28;
  tmpvar_28 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  float tmpvar_29;
  tmpvar_29 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_30;
  tmpvar_30 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_31;
  if ((tmpvar_30 < tmpvar_29)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  tmpvar_32 = ((tmpvar_27.w * tmpvar_28.w) * tmpvar_31);
  vec3 i_33;
  i_33 = -(xlv_TEXCOORD5);
  vec3 tmpvar_34;
  tmpvar_34 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_32), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_32 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_33 - (2.0 * (dot (normal_18, i_33) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_34));
  color_4.xyz = (color_4.xyz * tmpvar_34);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_32), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTextureB0, vec2(tmpvar_55));
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_58;
  tmpvar_58 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_62;
  if ((tmpvar_61 < tmpvar_58)) {
    tmpvar_62 = _LightShadowData.x;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  tmpvar_63 = ((tmpvar_56.w * tmpvar_57.w) * tmpvar_62);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_16, i_67) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 + (main_17.w * tmpvar_68));
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_71;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTextureB0, vec2(tmpvar_55));
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_58;
  tmpvar_58 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_62;
  if ((tmpvar_61 < tmpvar_58)) {
    tmpvar_62 = _LightShadowData.x;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  tmpvar_63 = ((tmpvar_56.w * tmpvar_57.w) * tmpvar_62);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_16, i_67) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 + (main_17.w * tmpvar_68));
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_71;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 421
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 463
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 450
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 454
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 458
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 421
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 463
#line 463
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 467
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 471
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 474
lowp vec4 frag( in v2f IN ) {
    #line 476
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 480
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 484
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 488
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 492
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 496
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 500
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 504
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 508
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 512
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 shadowVals_29;
  vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  float tmpvar_38;
  tmpvar_38 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_27.w) * tmpvar_28.w) * dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_39;
  i_39 = -(xlv_TEXCOORD5);
  vec3 tmpvar_40;
  tmpvar_40 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_38), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_38 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_39 - (2.0 * (dot (normal_18, i_39) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_40));
  color_4.xyz = (color_4.xyz * tmpvar_40);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_38), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump vec4 shadows_60;
  highp vec4 shadowVals_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_63;
  P_63 = (tmpvar_62.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_64;
  tmpvar_64 = texture2D (_ShadowMapTexture, P_63).x;
  shadowVals_61.x = tmpvar_64;
  highp vec2 P_65;
  P_65 = (tmpvar_62.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_66;
  tmpvar_66 = texture2D (_ShadowMapTexture, P_65).x;
  shadowVals_61.y = tmpvar_66;
  highp vec2 P_67;
  P_67 = (tmpvar_62.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_68;
  tmpvar_68 = texture2D (_ShadowMapTexture, P_67).x;
  shadowVals_61.z = tmpvar_68;
  highp vec2 P_69;
  P_69 = (tmpvar_62.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_ShadowMapTexture, P_69).x;
  shadowVals_61.w = tmpvar_70;
  bvec4 tmpvar_71;
  tmpvar_71 = lessThan (shadowVals_61, tmpvar_62.zzzz);
  highp vec4 tmpvar_72;
  tmpvar_72 = _LightShadowData.xxxx;
  highp float tmpvar_73;
  if (tmpvar_71.x) {
    tmpvar_73 = tmpvar_72.x;
  } else {
    tmpvar_73 = 1.0;
  };
  highp float tmpvar_74;
  if (tmpvar_71.y) {
    tmpvar_74 = tmpvar_72.y;
  } else {
    tmpvar_74 = 1.0;
  };
  highp float tmpvar_75;
  if (tmpvar_71.z) {
    tmpvar_75 = tmpvar_72.z;
  } else {
    tmpvar_75 = 1.0;
  };
  highp float tmpvar_76;
  if (tmpvar_71.w) {
    tmpvar_76 = tmpvar_72.w;
  } else {
    tmpvar_76 = 1.0;
  };
  highp vec4 tmpvar_77;
  tmpvar_77.x = tmpvar_73;
  tmpvar_77.y = tmpvar_74;
  tmpvar_77.z = tmpvar_75;
  tmpvar_77.w = tmpvar_76;
  shadows_60 = tmpvar_77;
  mediump float tmpvar_78;
  tmpvar_78 = dot (shadows_60, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_59 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_3 = tmpvar_81;
  mediump vec3 tmpvar_82;
  tmpvar_82 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_82;
  highp vec3 i_83;
  i_83 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_84;
  tmpvar_84 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_83 - (2.0 * (dot (norm_16, i_83) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_3 + (main_17.w * tmpvar_84));
  light_3 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_87;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump vec4 shadows_60;
  highp vec4 shadowVals_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_63;
  P_63 = (tmpvar_62.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_64;
  tmpvar_64 = texture2D (_ShadowMapTexture, P_63).x;
  shadowVals_61.x = tmpvar_64;
  highp vec2 P_65;
  P_65 = (tmpvar_62.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_66;
  tmpvar_66 = texture2D (_ShadowMapTexture, P_65).x;
  shadowVals_61.y = tmpvar_66;
  highp vec2 P_67;
  P_67 = (tmpvar_62.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_68;
  tmpvar_68 = texture2D (_ShadowMapTexture, P_67).x;
  shadowVals_61.z = tmpvar_68;
  highp vec2 P_69;
  P_69 = (tmpvar_62.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_ShadowMapTexture, P_69).x;
  shadowVals_61.w = tmpvar_70;
  bvec4 tmpvar_71;
  tmpvar_71 = lessThan (shadowVals_61, tmpvar_62.zzzz);
  highp vec4 tmpvar_72;
  tmpvar_72 = _LightShadowData.xxxx;
  highp float tmpvar_73;
  if (tmpvar_71.x) {
    tmpvar_73 = tmpvar_72.x;
  } else {
    tmpvar_73 = 1.0;
  };
  highp float tmpvar_74;
  if (tmpvar_71.y) {
    tmpvar_74 = tmpvar_72.y;
  } else {
    tmpvar_74 = 1.0;
  };
  highp float tmpvar_75;
  if (tmpvar_71.z) {
    tmpvar_75 = tmpvar_72.z;
  } else {
    tmpvar_75 = 1.0;
  };
  highp float tmpvar_76;
  if (tmpvar_71.w) {
    tmpvar_76 = tmpvar_72.w;
  } else {
    tmpvar_76 = 1.0;
  };
  highp vec4 tmpvar_77;
  tmpvar_77.x = tmpvar_73;
  tmpvar_77.y = tmpvar_74;
  tmpvar_77.z = tmpvar_75;
  tmpvar_77.w = tmpvar_76;
  shadows_60 = tmpvar_77;
  mediump float tmpvar_78;
  tmpvar_78 = dot (shadows_60, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_59 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_3 = tmpvar_81;
  mediump vec3 tmpvar_82;
  tmpvar_82 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_82;
  highp vec3 i_83;
  i_83 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_84;
  tmpvar_84 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_83 - (2.0 * (dot (norm_16, i_83) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_3 + (main_17.w * tmpvar_84));
  light_3 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_87;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 451
#line 472
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 451
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 455
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 459
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 463
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 467
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 451
#line 472
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 476
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 480
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 483
lowp vec4 frag( in v2f IN ) {
    #line 485
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 489
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 493
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 497
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 501
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 505
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 509
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 513
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 517
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 521
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 shadows_27;
  vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadows_27.x = shadow2D (_ShadowMapTexture, (tmpvar_28 + _ShadowOffsets[0].xyz)).x;
  shadows_27.y = shadow2D (_ShadowMapTexture, (tmpvar_28 + _ShadowOffsets[1].xyz)).x;
  shadows_27.z = shadow2D (_ShadowMapTexture, (tmpvar_28 + _ShadowOffsets[2].xyz)).x;
  shadows_27.w = shadow2D (_ShadowMapTexture, (tmpvar_28 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_29;
  tmpvar_29 = (_LightShadowData.xxxx + (shadows_27 * (1.0 - _LightShadowData.xxxx)));
  shadows_27 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_31;
  i_31 = -(xlv_TEXCOORD5);
  vec3 tmpvar_32;
  tmpvar_32 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_30), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_30 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_31 - (2.0 * (dot (normal_18, i_31) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_32));
  color_4.xyz = (color_4.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_30), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7.xyz = tmpvar_50.xyz;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19.w = tmpvar_52.w;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump vec4 shadows_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec3 coord_62;
  coord_62 = (tmpvar_61 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_63;
  tmpvar_63 = shadow2DEXT (_ShadowMapTexture, coord_62);
  shadows_60.x = tmpvar_63;
  highp vec3 coord_64;
  coord_64 = (tmpvar_61 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_65;
  tmpvar_65 = shadow2DEXT (_ShadowMapTexture, coord_64);
  shadows_60.y = tmpvar_65;
  highp vec3 coord_66;
  coord_66 = (tmpvar_61 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_67;
  tmpvar_67 = shadow2DEXT (_ShadowMapTexture, coord_66);
  shadows_60.z = tmpvar_67;
  highp vec3 coord_68;
  coord_68 = (tmpvar_61 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_69;
  tmpvar_69 = shadow2DEXT (_ShadowMapTexture, coord_68);
  shadows_60.w = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = (_LightShadowData.xxxx + (shadows_60 * (1.0 - _LightShadowData.xxxx)));
  shadows_60 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = dot (shadows_60, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_59 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_74;
  tmpvar_74 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_73)), 0.0, 1.0);
  light_3 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_75;
  highp vec3 i_76;
  i_76 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_77;
  tmpvar_77 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_76 - (2.0 * (dot (norm_16, i_76) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_17.w * tmpvar_77));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_80;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 451
#line 472
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 451
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 455
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 459
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 463
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 467
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 451
#line 472
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 476
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 480
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 483
lowp vec4 frag( in v2f IN ) {
    #line 485
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 489
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 493
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 497
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 501
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 505
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 509
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 513
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 517
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 521
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 shadowVals_28;
  shadowVals_28.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_28, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  float tmpvar_36;
  tmpvar_36 = (tmpvar_27.w * dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_37;
  i_37 = -(xlv_TEXCOORD5);
  vec3 tmpvar_38;
  tmpvar_38 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_36 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_37 - (2.0 * (dot (normal_18, i_37) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_38));
  color_4.xyz = (color_4.xyz * tmpvar_38);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55));
  highp float tmpvar_57;
  mediump vec4 shadows_58;
  highp vec4 shadowVals_59;
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_61;
  vec_61 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, vec_61);
  packDist_62 = tmpvar_63;
  shadowVals_59.x = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_59.y = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_59.z = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_59.w = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_73;
  tmpvar_73 = lessThan (shadowVals_59, vec4(tmpvar_60));
  highp vec4 tmpvar_74;
  tmpvar_74 = _LightShadowData.xxxx;
  highp float tmpvar_75;
  if (tmpvar_73.x) {
    tmpvar_75 = tmpvar_74.x;
  } else {
    tmpvar_75 = 1.0;
  };
  highp float tmpvar_76;
  if (tmpvar_73.y) {
    tmpvar_76 = tmpvar_74.y;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_73.z) {
    tmpvar_77 = tmpvar_74.z;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_73.w) {
    tmpvar_78 = tmpvar_74.w;
  } else {
    tmpvar_78 = 1.0;
  };
  highp vec4 tmpvar_79;
  tmpvar_79.x = tmpvar_75;
  tmpvar_79.y = tmpvar_76;
  tmpvar_79.z = tmpvar_77;
  tmpvar_79.w = tmpvar_78;
  shadows_58 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = dot (shadows_58, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_57 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_56.w * tmpvar_57);
  atten_4 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_82)), 0.0, 1.0);
  light_3 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_84;
  highp vec3 i_85;
  i_85 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_86;
  tmpvar_86 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_85 - (2.0 * (dot (norm_16, i_85) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_17.w * tmpvar_86));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_89;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55));
  highp float tmpvar_57;
  mediump vec4 shadows_58;
  highp vec4 shadowVals_59;
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_61;
  vec_61 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, vec_61);
  packDist_62 = tmpvar_63;
  shadowVals_59.x = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_59.y = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_59.z = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_59.w = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_73;
  tmpvar_73 = lessThan (shadowVals_59, vec4(tmpvar_60));
  highp vec4 tmpvar_74;
  tmpvar_74 = _LightShadowData.xxxx;
  highp float tmpvar_75;
  if (tmpvar_73.x) {
    tmpvar_75 = tmpvar_74.x;
  } else {
    tmpvar_75 = 1.0;
  };
  highp float tmpvar_76;
  if (tmpvar_73.y) {
    tmpvar_76 = tmpvar_74.y;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_73.z) {
    tmpvar_77 = tmpvar_74.z;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_73.w) {
    tmpvar_78 = tmpvar_74.w;
  } else {
    tmpvar_78 = 1.0;
  };
  highp vec4 tmpvar_79;
  tmpvar_79.x = tmpvar_75;
  tmpvar_79.y = tmpvar_76;
  tmpvar_79.z = tmpvar_77;
  tmpvar_79.w = tmpvar_78;
  shadows_58 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = dot (shadows_58, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_57 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_56.w * tmpvar_57);
  atten_4 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_82)), 0.0, 1.0);
  light_3 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_84;
  highp vec3 i_85;
  i_85 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_86;
  tmpvar_86 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_85 - (2.0 * (dot (norm_16, i_85) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_17.w * tmpvar_86));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_89;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 426
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 468
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 455
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 459
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 463
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 426
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 468
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 472
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 476
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 489
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 493
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 501
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 505
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 509
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 513
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 517
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_28;
  tmpvar_28 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  vec4 shadowVals_29;
  shadowVals_29.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_29.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_29.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_29.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_30;
  tmpvar_30 = lessThan (shadowVals_29, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_31;
  tmpvar_31 = _LightShadowData.xxxx;
  float tmpvar_32;
  if (tmpvar_30.x) {
    tmpvar_32 = tmpvar_31.x;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_30.y) {
    tmpvar_33 = tmpvar_31.y;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_30.z) {
    tmpvar_34 = tmpvar_31.z;
  } else {
    tmpvar_34 = 1.0;
  };
  float tmpvar_35;
  if (tmpvar_30.w) {
    tmpvar_35 = tmpvar_31.w;
  } else {
    tmpvar_35 = 1.0;
  };
  vec4 tmpvar_36;
  tmpvar_36.x = tmpvar_32;
  tmpvar_36.y = tmpvar_33;
  tmpvar_36.z = tmpvar_34;
  tmpvar_36.w = tmpvar_35;
  float tmpvar_37;
  tmpvar_37 = ((tmpvar_27.w * tmpvar_28.w) * dot (tmpvar_36, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_38;
  i_38 = -(xlv_TEXCOORD5);
  vec3 tmpvar_39;
  tmpvar_39 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_37), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_37 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_38 - (2.0 * (dot (normal_18, i_38) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_39));
  color_4.xyz = (color_4.xyz * tmpvar_39);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_37), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTextureB0, vec2(tmpvar_55));
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_58;
  mediump vec4 shadows_59;
  highp vec4 shadowVals_60;
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_62;
  vec_62 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, vec_62);
  packDist_63 = tmpvar_64;
  shadowVals_60.x = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_60.y = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_60.z = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_60.w = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_60, vec4(tmpvar_61));
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_59 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_59, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_58 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = ((tmpvar_56.w * tmpvar_57.w) * tmpvar_58);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_16, i_86) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 + (main_17.w * tmpvar_87));
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_90;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTextureB0, vec2(tmpvar_55));
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_58;
  mediump vec4 shadows_59;
  highp vec4 shadowVals_60;
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_62;
  vec_62 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, vec_62);
  packDist_63 = tmpvar_64;
  shadowVals_60.x = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_60.y = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_60.z = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_60.w = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_60, vec4(tmpvar_61));
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_59 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_59, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_58 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = ((tmpvar_56.w * tmpvar_57.w) * tmpvar_58);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_16, i_86) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 + (main_17.w * tmpvar_87));
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_90;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 427
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 469
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 456
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 460
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 464
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 427
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 469
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 473
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 477
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 480
lowp vec4 frag( in v2f IN ) {
    #line 482
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 486
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 490
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 494
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 498
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 502
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 506
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 510
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 514
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 518
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w;
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_LightTexture0, vec2(tmpvar_54)).w;
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  highp vec3 i_59;
  i_59 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_59 - (2.0 * (dot (norm_15, i_59) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_63;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_55), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_LightTexture0, vec2(tmpvar_54)).w;
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  highp vec3 i_59;
  i_59 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_59 - (2.0 * (dot (norm_15, i_59) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_63;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_55), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 407
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 447
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 427
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 431
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 435
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 439
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 443
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 407
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 447
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 451
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 455
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    #line 460
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 464
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 468
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 472
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 476
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 480
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 484
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 488
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 492
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 496
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec3 i_27;
  i_27 = -(xlv_TEXCOORD5);
  vec3 tmpvar_28;
  tmpvar_28 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * tmpvar_26) * 2.0), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (normal_18, i_27) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_28));
  color_4.xyz = (color_4.xyz * tmpvar_28);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp ((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 53 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord8 o5
def c14, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c15, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c14.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c13, c13
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c13
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mov r0, c10
dp4 r3.z, c13, r0
mov r0, c9
dp4 r3.y, c13, r0
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c13, r1
add r0.w, r2, c14.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.x, r0.w, c14.w
mul_sat r0.w, -r2, c14.y
mad o5.x, r0.w, r1, c15
dp4 r1.x, v0, v0
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
rsq r1.x, r1.x
mul o2.xyz, r0.w, r0
mul r0.xyz, r1.x, v0
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (((_LightColor0.w * NdotL_4) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_54)), 0.0, 1.0);
  light_3 = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_56;
  highp vec3 i_57;
  i_57 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_58;
  tmpvar_58 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_57 - (2.0 * (dot (norm_15, i_57) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_58));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_61;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (((_LightColor0.w * NdotL_4) * 2.0), 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_54)), 0.0, 1.0);
  light_3 = tmpvar_55;
  mediump vec3 tmpvar_56;
  tmpvar_56 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_56;
  highp vec3 i_57;
  i_57 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_58;
  tmpvar_58 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_57 - (2.0 * (dot (norm_15, i_57) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 + (main_16.w * tmpvar_58));
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_61;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp ((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 405
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 424
#line 454
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 432
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 436
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 441
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp float terminator;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 397
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 401
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 405
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 424
#line 454
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 445
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 449
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 458
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 462
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    #line 466
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    #line 470
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 474
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    #line 478
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    #line 482
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 486
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    #line 490
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 494
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = ((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w);
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c15
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7.xyz = tmpvar_50.xyz;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19.w = tmpvar_52.w;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  highp float tmpvar_59;
  tmpvar_59 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w);
  atten_4 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_3 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_62;
  highp vec3 i_63;
  i_63 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_64;
  tmpvar_64 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_63 - (2.0 * (dot (norm_16, i_63) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_3 + (main_17.w * tmpvar_64));
  light_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_67;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7.xyz = tmpvar_50.xyz;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19.w = tmpvar_52.w;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  highp float tmpvar_59;
  tmpvar_59 = ((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w);
  atten_4 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_3 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_62;
  highp vec3 i_63;
  i_63 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_64;
  tmpvar_64 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_63 - (2.0 * (dot (norm_16, i_63) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_3 + (main_17.w * tmpvar_64));
  light_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_67;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 416
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 436
#line 456
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 444
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 448
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp float terminator;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 408
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 412
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 416
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 436
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 477
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 481
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 485
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 489
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 493
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 497
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 501
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 505
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6))).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 18 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c19, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c20, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c19.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c18.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c19.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c19.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c19.y
mul o2.xyz, r0.w, r0
mad o6.x, r1.w, r2, c20
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_55;
  tmpvar_55 = (texture2D (_LightTextureB0, vec2(tmpvar_54)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  highp vec3 i_59;
  i_59 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_59 - (2.0 * (dot (norm_15, i_59) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_63;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_55), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp float tmpvar_55;
  tmpvar_55 = (texture2D (_LightTextureB0, vec2(tmpvar_54)).w * textureCube (_LightTexture0, xlv_TEXCOORD6).w);
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  highp vec3 i_59;
  i_59 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_59 - (2.0 * (dot (norm_15, i_59) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_63;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_55), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 408
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 448
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 436
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 440
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 444
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp float terminator;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 400
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 404
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 408
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 428
#line 448
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 452
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 456
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 459
lowp vec4 frag( in v2f IN ) {
    #line 461
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 465
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 469
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 473
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 477
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 481
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 485
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 489
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 493
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 497
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 56 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c18, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c19, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
dp4 r3.x, c17, r1
dp3 r2.y, r3, r2
mov r0.xyz, v1
mov r0.w, c18.x
dp4 r1.z, r0, c6
dp4 r1.y, r0, c5
dp4 r1.x, r0, c4
dp3 r0.x, r1, r1
rsq r0.w, r0.x
dp4 r0.y, c17, c17
rsq r0.y, r0.y
mul r1.xyz, r0.w, r1
mul r0.xyz, r0.y, c17
dp3 r0.w, r1, r0
add r0.x, r0.w, c18.z
dp3 r2.x, r3, v2
dp3 r2.z, v1, r3
dp3 r0.y, r2, r2
rsq r0.z, r0.y
mul o4.xyz, r0.z, r2
frc r0.y, r0.x
add_sat r1.w, r0.x, -r0.y
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r0.xyz, -r1, c16
add r2.y, r1.w, c18.w
mul_sat r2.x, -r0.w, c18.y
dp3 r1.w, r0, r0
rsq r0.w, r1.w
dp4 r1.w, v0, c7
mul o2.xyz, r0.w, r0
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
mad o6.x, r2, r2.y, c19
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp float tmpvar_54;
  tmpvar_54 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_54), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((tmpvar_54 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_54), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp float tmpvar_54;
  tmpvar_54 = texture2D (_LightTexture0, xlv_TEXCOORD6).w;
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_54), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((tmpvar_54 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_54), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 407
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 447
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 427
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 431
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 435
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 439
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 443
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp float terminator;
};
#line 409
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 399
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 403
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 407
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 427
#line 447
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 451
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 455
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    #line 460
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 464
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 468
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 472
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 476
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 480
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 484
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 488
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 492
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 496
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 tmpvar_29;
  tmpvar_29 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  float tmpvar_30;
  if ((tmpvar_29.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  tmpvar_31 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_27.w) * tmpvar_28.w) * tmpvar_30);
  vec3 i_32;
  i_32 = -(xlv_TEXCOORD5);
  vec3 tmpvar_33;
  tmpvar_33 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (normal_18, i_32) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_33));
  color_4.xyz = (color_4.xyz * tmpvar_33);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump float shadow_60;
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_62;
  if ((tmpvar_61.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_62 = _LightShadowData.x;
  } else {
    tmpvar_62 = 1.0;
  };
  shadow_60 = tmpvar_62;
  tmpvar_59 = shadow_60;
  highp float tmpvar_63;
  tmpvar_63 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_16, i_67) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 + (main_17.w * tmpvar_68));
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_71;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump float shadow_60;
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7);
  highp float tmpvar_62;
  if ((tmpvar_61.x < (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))) {
    tmpvar_62 = _LightShadowData.x;
  } else {
    tmpvar_62 = 1.0;
  };
  shadow_60 = tmpvar_62;
  tmpvar_59 = shadow_60;
  highp float tmpvar_63;
  tmpvar_63 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_16, i_67) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 + (main_17.w * tmpvar_68));
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_71;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 422
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 464
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 451
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 455
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 459
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 424
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 414
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 418
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 422
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 485
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 489
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 493
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 497
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 501
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 505
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 509
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 513
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x * (1.0 - _LightShadowData.x))));
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7.xyz = tmpvar_50.xyz;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19.w = tmpvar_52.w;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump float shadow_60;
  lowp float tmpvar_61;
  tmpvar_61 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD7);
  shadow_60 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = (_LightShadowData.x + (shadow_60 * (1.0 - _LightShadowData.x)));
  shadow_60 = tmpvar_62;
  tmpvar_59 = shadow_60;
  highp float tmpvar_63;
  tmpvar_63 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_16, i_67) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 + (main_17.w * tmpvar_68));
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_71;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 423
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 465
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 452
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 456
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 460
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 415
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 419
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 423
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 465
#line 465
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 469
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 473
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 476
lowp vec4 frag( in v2f IN ) {
    #line 478
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 482
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 486
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 490
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 494
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 498
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 502
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 506
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 510
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 514
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  float tmpvar_4;
  tmpvar_4 = dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_5 = TANGENT.xyz;
  tmpvar_6 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = gl_Normal.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = gl_Normal.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = gl_Normal.z;
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_1 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_8;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_4)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_4)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27.x), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27.x), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Vector 15 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
"vs_3_0
; 58 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord8 o6
def c16, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c17, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c16.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c15, c15
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c15
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mov r0, c10
dp4 r3.z, c15, r0
mov r0, c9
dp4 r3.y, c15, r0
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c15, r1
add r0.w, r2, c16.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.w, r0, c16
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
mul_sat r0.z, -r2.w, c16.y
mad o6.x, r0.z, r1.w, c17.y
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c17.x
mul r1.y, r1, c13.x
mad o5.xy, r1.z, c14.zwzw, r1
mov o0, r0
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c12
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o2.xyz, r0.x, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
rcp o1.x, r0.x
mov o3.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp float tmpvar_54;
  mediump float lightShadowDataX_55;
  highp float dist_56;
  lowp float tmpvar_57;
  tmpvar_57 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x;
  dist_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = _LightShadowData.x;
  lightShadowDataX_55 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = max (float((dist_56 > (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w))), lightShadowDataX_55);
  tmpvar_54 = tmpvar_59;
  mediump float tmpvar_60;
  tmpvar_60 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_54), 0.0, 1.0);
  highp vec3 tmpvar_61;
  tmpvar_61 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_60)), 0.0, 1.0);
  light_3 = tmpvar_61;
  mediump vec3 tmpvar_62;
  tmpvar_62 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_62;
  highp vec3 i_63;
  i_63 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_64;
  tmpvar_64 = (specularReflection_2 * (((tmpvar_54 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_63 - (2.0 * (dot (norm_15, i_63) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_3 + (main_16.w * tmpvar_64));
  light_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_67;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_54), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = dot (worldNormal_3, tmpvar_9.xyz);
  mediump float tmpvar_11;
  tmpvar_11 = mix (1.0, clamp (floor((1.01 + tmpvar_10)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_10)), 0.0, 1.0));
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_2.xyz;
  tmpvar_13 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_1.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_1.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_1.z;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = o_15;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6);
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_54.x), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((tmpvar_54.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_54.x), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 413
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 453
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 441
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 445
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 449
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 405
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 409
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 413
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 433
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 474
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 478
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 482
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 486
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 490
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 494
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 498
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 502
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD6);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _WorldSpaceLightPos0;
uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = gl_Normal;
  float tmpvar_4;
  tmpvar_4 = dot (normalize((_Object2World * tmpvar_3).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_5;
  vec3 tmpvar_6;
  tmpvar_5 = TANGENT.xyz;
  tmpvar_6 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_7;
  tmpvar_7[0].x = tmpvar_5.x;
  tmpvar_7[0].y = tmpvar_6.x;
  tmpvar_7[0].z = gl_Normal.x;
  tmpvar_7[1].x = tmpvar_5.y;
  tmpvar_7[1].y = tmpvar_6.y;
  tmpvar_7[1].z = gl_Normal.y;
  tmpvar_7[2].x = tmpvar_5.z;
  tmpvar_7[2].y = tmpvar_6.z;
  tmpvar_7[2].z = gl_Normal.z;
  vec4 o_8;
  vec4 tmpvar_9;
  tmpvar_9 = (tmpvar_1 * 0.5);
  vec2 tmpvar_10;
  tmpvar_10.x = tmpvar_9.x;
  tmpvar_10.y = (tmpvar_9.y * _ProjectionParams.x);
  o_8.xy = (tmpvar_10 + tmpvar_9.w);
  o_8.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_7 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD7 = o_8;
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_4)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_4)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec2 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  float tmpvar_27;
  tmpvar_27 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  vec3 i_28;
  i_28 = -(xlv_TEXCOORD5);
  vec3 tmpvar_29;
  tmpvar_29 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (normal_18, i_28) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_29));
  color_4.xyz = (color_4.xyz * tmpvar_29);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_27), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_ProjectionParams]
Vector 18 [_ScreenParams]
Vector 19 [_WorldSpaceLightPos0]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 61 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 0.50000000, 1.00000000, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
rsq r0.w, r0.w
dp4 r1.x, c19, c19
rsq r1.x, r1.x
mul r0.xyz, r0.w, r0
mul r1.xyz, r1.x, c19
dp3 r2.w, r0, r1
mov r2.xyz, v2
mul r1.xyz, v1.zxyw, r2.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c19, r1
mov r0, c10
dp4 r3.z, c19, r0
mov r0, c9
dp4 r3.y, c19, r0
add r0.w, r2, c20.z
frc r1.x, r0.w
add_sat r0.w, r0, -r1.x
add r1.z, r0.w, c20.w
mul_sat r0.w, -r2, c20.y
mad o7.x, r0.w, r1.z, c21.y
dp3 r0.y, r3, r2
dp3 r0.x, r3, v2
dp3 r0.z, v1, r3
dp3 r1.y, r0, r0
rsq r1.y, r1.y
mul o4.xyz, r1.y, r0
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c21.x
mul r0.y, r0, c17.x
mad o6.xy, r0.z, c18.zwzw, r0
mov o0, r1
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
add r2.xyz, -r0, c16
dp3 r0.w, r2, r2
rsq r1.x, r0.w
dp4 r0.w, v0, c7
dp4 o5.y, r0, c13
dp4 o5.x, r0, c12
dp4 r1.y, v0, v0
rsq r0.x, r1.y
mul r0.xyz, r0.x, v0
mul o2.xyz, r1.x, r2
mov o6.zw, r1
rcp o1.x, r1.x
mov o3.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec3 p_5;
  p_5 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = tmpvar_1;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_Object2World * tmpvar_6).xyz);
  worldNormal_3 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_9;
  tmpvar_9 = dot (worldNormal_3, tmpvar_8.xyz);
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + tmpvar_9)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_9)), 0.0, 1.0));
  tmpvar_4 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).xyz * 2.0) - 1.0);
  norm_15 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp float tmpvar_54;
  mediump float lightShadowDataX_55;
  highp float dist_56;
  lowp float tmpvar_57;
  tmpvar_57 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x;
  dist_56 = tmpvar_57;
  highp float tmpvar_58;
  tmpvar_58 = _LightShadowData.x;
  lightShadowDataX_55 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = max (float((dist_56 > (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w))), lightShadowDataX_55);
  tmpvar_54 = tmpvar_59;
  lowp float tmpvar_60;
  tmpvar_60 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * tmpvar_54);
  mediump float tmpvar_61;
  tmpvar_61 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_60), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  light_3 = tmpvar_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_63;
  highp vec3 i_64;
  i_64 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_65;
  tmpvar_65 = (specularReflection_2 * (((tmpvar_60 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_64 - (2.0 * (dot (norm_15, i_64) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_65;
  highp vec3 tmpvar_66;
  tmpvar_66 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (light_3 + (main_16.w * tmpvar_65));
  light_3 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_68;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_60), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform lowp vec4 _WorldSpaceLightPos0;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump vec3 worldNormal_3;
  highp float tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_3 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = normalize(_WorldSpaceLightPos0);
  mediump float tmpvar_10;
  tmpvar_10 = dot (worldNormal_3, tmpvar_9.xyz);
  mediump float tmpvar_11;
  tmpvar_11 = mix (1.0, clamp (floor((1.01 + tmpvar_10)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_10)), 0.0, 1.0));
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_2.xyz;
  tmpvar_13 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_12.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_1.x;
  tmpvar_14[1].x = tmpvar_12.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_1.y;
  tmpvar_14[2].x = tmpvar_12.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_1.z;
  highp vec4 o_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (tmpvar_5 * 0.5);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_16.x;
  tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
  o_15.xy = (tmpvar_17 + tmpvar_16.w);
  o_15.zw = tmpvar_5.zw;
  gl_Position = tmpvar_5;
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_14 * (_World2Object * _WorldSpaceLightPos0).xyz));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD7 = o_15;
  xlv_TEXCOORD8 = tmpvar_4;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec2 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump float NdotL_4;
  mediump vec3 ambientLighting_5;
  mediump vec4 citydarkoverlay_6;
  mediump float detailLevel_7;
  mediump vec4 citylightoverlaydetail_8;
  mediump vec4 citydarkoverlaydetail_9;
  mediump vec4 cityoverlay_10;
  mediump vec4 detail_11;
  mediump float nylerp_12;
  mediump vec3 detailCoords_13;
  mediump float zxlerp_14;
  mediump vec3 norm_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  lowp vec3 normal_32;
  normal_32.xy = ((texture2DGradEXT (_BumpMap, uv_17, tmpvar_30.xy, tmpvar_30.zw).wy * 2.0) - 1.0);
  normal_32.z = sqrt((1.0 - clamp (dot (normal_32.xy, normal_32.xy), 0.0, 1.0)));
  norm_15 = normal_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = abs(xlv_TEXCOORD2);
  highp float tmpvar_34;
  tmpvar_34 = clamp (floor(((1.0 + tmpvar_33.x) - tmpvar_33.z)), 0.0, 1.0);
  zxlerp_14 = tmpvar_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = mix (tmpvar_33.zxy, tmpvar_33, vec3(zxlerp_14));
  detailCoords_13 = tmpvar_35;
  highp float tmpvar_36;
  tmpvar_36 = clamp (floor(((1.0 + tmpvar_33.y) - mix (tmpvar_33.z, tmpvar_33.x, zxlerp_14))), 0.0, 1.0);
  nylerp_12 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (detailCoords_13, tmpvar_33.yxz, vec3(nylerp_12));
  detailCoords_13 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_39;
  highp vec2 P_40;
  P_40 = ((((0.5 * detailCoords_13.zy) / tmpvar_38) + _DetailOffset.xy) * _DetailScale);
  tmpvar_39 = texture2D (_DetailTex, P_40);
  detail_11 = tmpvar_39;
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2DGradEXT (_CityOverlayTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  cityoverlay_10 = tmpvar_41;
  mediump float tmpvar_42;
  tmpvar_42 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_43;
  highp vec2 P_44;
  P_44 = ((((0.5 * detailCoords_13.zy) / tmpvar_42) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_43 = texture2D (_CityDarkOverlayDetailTex, P_44);
  citydarkoverlaydetail_9 = tmpvar_43;
  mediump float tmpvar_45;
  tmpvar_45 = abs(detailCoords_13.x);
  lowp vec4 tmpvar_46;
  highp vec2 P_47;
  P_47 = ((((0.5 * detailCoords_13.zy) / tmpvar_45) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_46 = texture2D (_CityLightOverlayDetailTex, P_47);
  citylightoverlaydetail_8 = tmpvar_46;
  highp float tmpvar_48;
  tmpvar_48 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_48;
  cityoverlay_10.w = (cityoverlay_10.w * clamp ((1.0 - main_16.w), 0.0, 1.0));
  mediump vec4 tmpvar_49;
  tmpvar_49 = (cityoverlay_10 * citydarkoverlaydetail_9);
  citydarkoverlay_6.xyz = tmpvar_49.xyz;
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_10 * citylightoverlaydetail_8);
  mediump vec4 tmpvar_51;
  tmpvar_51 = (mix ((main_16 * mix (detail_11, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))), tmpvar_50, tmpvar_50.wwww) * _Color);
  color_18.w = tmpvar_51.w;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_5 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = dot (norm_15, xlv_TEXCOORD5);
  NdotL_4 = tmpvar_53;
  lowp float tmpvar_54;
  tmpvar_54 = (texture2D (_LightTexture0, xlv_TEXCOORD6).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x);
  mediump float tmpvar_55;
  tmpvar_55 = clamp ((((_LightColor0.w * NdotL_4) * 2.0) * tmpvar_54), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_5 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + NdotL_4)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  highp vec3 i_58;
  i_58 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_59;
  tmpvar_59 = (specularReflection_2 * (((tmpvar_54 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_58 - (2.0 * (dot (norm_15, i_58) * norm_15))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_59));
  light_3 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_51.xyz + (_Albedo * light_3));
  color_18.xyz = tmpvar_62;
  color_18.xyz = (color_18.xyz * light_3);
  citydarkoverlay_6.w = (tmpvar_49.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_4 - 0.01)) / 0.99) * 4.0) * tmpvar_54), 0.0, 1.0), 0.0, 1.0)));
  color_18.xyz = mix (color_18, citydarkoverlay_6, citydarkoverlay_6.wwww).xyz;
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 436
#line 457
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return objSpaceLightPos.xyz;
}
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 444
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 448
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec2 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 407
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 411
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 415
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 436
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 478
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 482
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 486
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 490
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 494
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 498
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 502
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 506
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec2 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  float tmpvar_28;
  tmpvar_28 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_29;
  tmpvar_29 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_30;
  if ((tmpvar_29 < tmpvar_28)) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  tmpvar_31 = (tmpvar_27.w * tmpvar_30);
  vec3 i_32;
  i_32 = -(xlv_TEXCOORD5);
  vec3 tmpvar_33;
  tmpvar_33 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (normal_18, i_32) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_33));
  color_4.xyz = (color_4.xyz * tmpvar_33);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_31), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55));
  highp float tmpvar_57;
  tmpvar_57 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_58 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (packDist_58, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_61;
  if ((tmpvar_60 < tmpvar_57)) {
    tmpvar_61 = _LightShadowData.x;
  } else {
    tmpvar_61 = 1.0;
  };
  highp float tmpvar_62;
  tmpvar_62 = (tmpvar_56.w * tmpvar_61);
  atten_4 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_3 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_65;
  highp vec3 i_66;
  i_66 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_67;
  tmpvar_67 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_66 - (2.0 * (dot (norm_16, i_66) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 + (main_17.w * tmpvar_67));
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_70;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55));
  highp float tmpvar_57;
  tmpvar_57 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_58 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = dot (packDist_58, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_61;
  if ((tmpvar_60 < tmpvar_57)) {
    tmpvar_61 = _LightShadowData.x;
  } else {
    tmpvar_61 = 1.0;
  };
  highp float tmpvar_62;
  tmpvar_62 = (tmpvar_56.w * tmpvar_61);
  atten_4 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_3 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_65;
  highp vec3 i_66;
  i_66 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_67;
  tmpvar_67 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_66 - (2.0 * (dot (norm_16, i_66) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 + (main_17.w * tmpvar_67));
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_70;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 420
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 462
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 449
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 453
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 457
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 412
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 416
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 420
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 462
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 466
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 470
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 473
lowp vec4 frag( in v2f IN ) {
    #line 475
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 479
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 483
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 487
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 495
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 499
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 503
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 507
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 511
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_28;
  tmpvar_28 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  float tmpvar_29;
  tmpvar_29 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  float tmpvar_30;
  tmpvar_30 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD7), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_31;
  if ((tmpvar_30 < tmpvar_29)) {
    tmpvar_31 = _LightShadowData.x;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  tmpvar_32 = ((tmpvar_27.w * tmpvar_28.w) * tmpvar_31);
  vec3 i_33;
  i_33 = -(xlv_TEXCOORD5);
  vec3 tmpvar_34;
  tmpvar_34 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_32), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_32 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_33 - (2.0 * (dot (normal_18, i_33) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_34));
  color_4.xyz = (color_4.xyz * tmpvar_34);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_32), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTextureB0, vec2(tmpvar_55));
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_58;
  tmpvar_58 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_62;
  if ((tmpvar_61 < tmpvar_58)) {
    tmpvar_62 = _LightShadowData.x;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  tmpvar_63 = ((tmpvar_56.w * tmpvar_57.w) * tmpvar_62);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_16, i_67) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 + (main_17.w * tmpvar_68));
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_71;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTextureB0, vec2(tmpvar_55));
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_58;
  tmpvar_58 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_59;
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_ShadowMapTexture, xlv_TEXCOORD7);
  packDist_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = dot (packDist_59, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_62;
  if ((tmpvar_61 < tmpvar_58)) {
    tmpvar_62 = _LightShadowData.x;
  } else {
    tmpvar_62 = 1.0;
  };
  highp float tmpvar_63;
  tmpvar_63 = ((tmpvar_56.w * tmpvar_57.w) * tmpvar_62);
  atten_4 = tmpvar_63;
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  highp vec3 i_67;
  i_67 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_68;
  tmpvar_68 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_67 - (2.0 * (dot (norm_16, i_67) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = (light_3 + (main_17.w * tmpvar_68));
  light_3 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_71;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 421
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 463
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 450
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 454
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 458
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 430
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 423
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 413
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 417
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 421
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 463
#line 463
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 467
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 471
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 474
lowp vec4 frag( in v2f IN ) {
    #line 476
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 480
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 484
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 488
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 492
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 496
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 500
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 504
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 508
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 512
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5));
  vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz)));
  vec4 shadowVals_29;
  vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadowVals_29.x = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_29.y = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_29.z = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_29.w = texture2D (_ShadowMapTexture, (tmpvar_30.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_31;
  tmpvar_31 = lessThan (shadowVals_29, tmpvar_30.zzzz);
  vec4 tmpvar_32;
  tmpvar_32 = _LightShadowData.xxxx;
  float tmpvar_33;
  if (tmpvar_31.x) {
    tmpvar_33 = tmpvar_32.x;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_31.y) {
    tmpvar_34 = tmpvar_32.y;
  } else {
    tmpvar_34 = 1.0;
  };
  float tmpvar_35;
  if (tmpvar_31.z) {
    tmpvar_35 = tmpvar_32.z;
  } else {
    tmpvar_35 = 1.0;
  };
  float tmpvar_36;
  if (tmpvar_31.w) {
    tmpvar_36 = tmpvar_32.w;
  } else {
    tmpvar_36 = 1.0;
  };
  vec4 tmpvar_37;
  tmpvar_37.x = tmpvar_33;
  tmpvar_37.y = tmpvar_34;
  tmpvar_37.z = tmpvar_35;
  tmpvar_37.w = tmpvar_36;
  float tmpvar_38;
  tmpvar_38 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_27.w) * tmpvar_28.w) * dot (tmpvar_37, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_39;
  i_39 = -(xlv_TEXCOORD5);
  vec3 tmpvar_40;
  tmpvar_40 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_38), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_38 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_39 - (2.0 * (dot (normal_18, i_39) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_40));
  color_4.xyz = (color_4.xyz * tmpvar_40);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_38), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump vec4 shadows_60;
  highp vec4 shadowVals_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_63;
  P_63 = (tmpvar_62.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_64;
  tmpvar_64 = texture2D (_ShadowMapTexture, P_63).x;
  shadowVals_61.x = tmpvar_64;
  highp vec2 P_65;
  P_65 = (tmpvar_62.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_66;
  tmpvar_66 = texture2D (_ShadowMapTexture, P_65).x;
  shadowVals_61.y = tmpvar_66;
  highp vec2 P_67;
  P_67 = (tmpvar_62.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_68;
  tmpvar_68 = texture2D (_ShadowMapTexture, P_67).x;
  shadowVals_61.z = tmpvar_68;
  highp vec2 P_69;
  P_69 = (tmpvar_62.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_ShadowMapTexture, P_69).x;
  shadowVals_61.w = tmpvar_70;
  bvec4 tmpvar_71;
  tmpvar_71 = lessThan (shadowVals_61, tmpvar_62.zzzz);
  highp vec4 tmpvar_72;
  tmpvar_72 = _LightShadowData.xxxx;
  highp float tmpvar_73;
  if (tmpvar_71.x) {
    tmpvar_73 = tmpvar_72.x;
  } else {
    tmpvar_73 = 1.0;
  };
  highp float tmpvar_74;
  if (tmpvar_71.y) {
    tmpvar_74 = tmpvar_72.y;
  } else {
    tmpvar_74 = 1.0;
  };
  highp float tmpvar_75;
  if (tmpvar_71.z) {
    tmpvar_75 = tmpvar_72.z;
  } else {
    tmpvar_75 = 1.0;
  };
  highp float tmpvar_76;
  if (tmpvar_71.w) {
    tmpvar_76 = tmpvar_72.w;
  } else {
    tmpvar_76 = 1.0;
  };
  highp vec4 tmpvar_77;
  tmpvar_77.x = tmpvar_73;
  tmpvar_77.y = tmpvar_74;
  tmpvar_77.z = tmpvar_75;
  tmpvar_77.w = tmpvar_76;
  shadows_60 = tmpvar_77;
  mediump float tmpvar_78;
  tmpvar_78 = dot (shadows_60, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_59 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_3 = tmpvar_81;
  mediump vec3 tmpvar_82;
  tmpvar_82 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_82;
  highp vec3 i_83;
  i_83 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_84;
  tmpvar_84 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_83 - (2.0 * (dot (norm_16, i_83) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_3 + (main_17.w * tmpvar_84));
  light_3 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_87;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump vec4 shadows_60;
  highp vec4 shadowVals_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec2 P_63;
  P_63 = (tmpvar_62.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_64;
  tmpvar_64 = texture2D (_ShadowMapTexture, P_63).x;
  shadowVals_61.x = tmpvar_64;
  highp vec2 P_65;
  P_65 = (tmpvar_62.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_66;
  tmpvar_66 = texture2D (_ShadowMapTexture, P_65).x;
  shadowVals_61.y = tmpvar_66;
  highp vec2 P_67;
  P_67 = (tmpvar_62.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_68;
  tmpvar_68 = texture2D (_ShadowMapTexture, P_67).x;
  shadowVals_61.z = tmpvar_68;
  highp vec2 P_69;
  P_69 = (tmpvar_62.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_70;
  tmpvar_70 = texture2D (_ShadowMapTexture, P_69).x;
  shadowVals_61.w = tmpvar_70;
  bvec4 tmpvar_71;
  tmpvar_71 = lessThan (shadowVals_61, tmpvar_62.zzzz);
  highp vec4 tmpvar_72;
  tmpvar_72 = _LightShadowData.xxxx;
  highp float tmpvar_73;
  if (tmpvar_71.x) {
    tmpvar_73 = tmpvar_72.x;
  } else {
    tmpvar_73 = 1.0;
  };
  highp float tmpvar_74;
  if (tmpvar_71.y) {
    tmpvar_74 = tmpvar_72.y;
  } else {
    tmpvar_74 = 1.0;
  };
  highp float tmpvar_75;
  if (tmpvar_71.z) {
    tmpvar_75 = tmpvar_72.z;
  } else {
    tmpvar_75 = 1.0;
  };
  highp float tmpvar_76;
  if (tmpvar_71.w) {
    tmpvar_76 = tmpvar_72.w;
  } else {
    tmpvar_76 = 1.0;
  };
  highp vec4 tmpvar_77;
  tmpvar_77.x = tmpvar_73;
  tmpvar_77.y = tmpvar_74;
  tmpvar_77.z = tmpvar_75;
  tmpvar_77.w = tmpvar_76;
  shadows_60 = tmpvar_77;
  mediump float tmpvar_78;
  tmpvar_78 = dot (shadows_60, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_59 = tmpvar_78;
  highp float tmpvar_79;
  tmpvar_79 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_81;
  tmpvar_81 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_80)), 0.0, 1.0);
  light_3 = tmpvar_81;
  mediump vec3 tmpvar_82;
  tmpvar_82 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_82;
  highp vec3 i_83;
  i_83 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_84;
  tmpvar_84 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_83 - (2.0 * (dot (norm_16, i_83) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_84;
  highp vec3 tmpvar_85;
  tmpvar_85 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = (light_3 + (main_17.w * tmpvar_84));
  light_3 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_87;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 451
#line 472
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 451
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 455
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 459
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 463
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 467
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 451
#line 472
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 476
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 480
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 483
lowp vec4 frag( in v2f IN ) {
    #line 485
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 489
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 493
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 497
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 501
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 505
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 509
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 513
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 517
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 521
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec4 xlv_TEXCOORD7;
varying vec4 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1.xyz = tmpvar_23.xyz;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4.w = tmpvar_25.w;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 shadows_27;
  vec3 tmpvar_28;
  tmpvar_28 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  shadows_27.x = shadow2D (_ShadowMapTexture, (tmpvar_28 + _ShadowOffsets[0].xyz)).x;
  shadows_27.y = shadow2D (_ShadowMapTexture, (tmpvar_28 + _ShadowOffsets[1].xyz)).x;
  shadows_27.z = shadow2D (_ShadowMapTexture, (tmpvar_28 + _ShadowOffsets[2].xyz)).x;
  shadows_27.w = shadow2D (_ShadowMapTexture, (tmpvar_28 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_29;
  tmpvar_29 = (_LightShadowData.xxxx + (shadows_27 * (1.0 - _LightShadowData.xxxx)));
  shadows_27 = tmpvar_29;
  float tmpvar_30;
  tmpvar_30 = (((float((xlv_TEXCOORD6.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz))).w) * dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_31;
  i_31 = -(xlv_TEXCOORD5);
  vec3 tmpvar_32;
  tmpvar_32 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_30), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_30 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_31 - (2.0 * (dot (normal_18, i_31) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_32));
  color_4.xyz = (color_4.xyz * tmpvar_32);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_30), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 20 [_WorldSpaceCameraPos]
Vector 21 [_WorldSpaceLightPos0]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_World2Object]
Vector 22 [unity_Scale]
Matrix 16 [_LightMatrix0]
"vs_3_0
; 63 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c23, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c24, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c23.x
dp4 r0.z, r1, c10
dp4 r0.x, r1, c8
dp4 r0.y, r1, c9
dp3 r0.w, r0, r0
dp4 r1.x, c21, c21
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c21
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c12
dp4 r3.x, c21, r1
mov r0, c14
dp4 r3.z, c21, r0
mov r0, c13
dp4 r3.y, c21, r0
mad r0.xyz, r3, c22.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c23.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c10
dp4 r1.x, v0, c8
dp4 r1.y, v0, c9
add r2.x, r0.y, c23.w
add r0.xyz, -r1, c20
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c23.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c24
dp4 r1.w, v0, c11
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.w, r1, c19
dp4 o5.z, r1, c18
dp4 o5.y, r1, c17
dp4 o5.x, r1, c16
dp4 o6.w, r1, c7
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
rcp o1.x, r0.w
mov o3.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD7 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp float xlv_TEXCOORD8;
varying highp vec4 xlv_TEXCOORD7;
varying highp vec4 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7.xyz = tmpvar_50.xyz;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19.w = tmpvar_52.w;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  lowp vec4 tmpvar_55;
  highp vec2 P_56;
  P_56 = ((xlv_TEXCOORD6.xy / xlv_TEXCOORD6.w) + 0.5);
  tmpvar_55 = texture2D (_LightTexture0, P_56);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD6.xyz, xlv_TEXCOORD6.xyz);
  lowp vec4 tmpvar_58;
  tmpvar_58 = texture2D (_LightTextureB0, vec2(tmpvar_57));
  lowp float tmpvar_59;
  mediump vec4 shadows_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (xlv_TEXCOORD7.xyz / xlv_TEXCOORD7.w);
  highp vec3 coord_62;
  coord_62 = (tmpvar_61 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_63;
  tmpvar_63 = shadow2DEXT (_ShadowMapTexture, coord_62);
  shadows_60.x = tmpvar_63;
  highp vec3 coord_64;
  coord_64 = (tmpvar_61 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_65;
  tmpvar_65 = shadow2DEXT (_ShadowMapTexture, coord_64);
  shadows_60.y = tmpvar_65;
  highp vec3 coord_66;
  coord_66 = (tmpvar_61 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_67;
  tmpvar_67 = shadow2DEXT (_ShadowMapTexture, coord_66);
  shadows_60.z = tmpvar_67;
  highp vec3 coord_68;
  coord_68 = (tmpvar_61 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_69;
  tmpvar_69 = shadow2DEXT (_ShadowMapTexture, coord_68);
  shadows_60.w = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70 = (_LightShadowData.xxxx + (shadows_60 * (1.0 - _LightShadowData.xxxx)));
  shadows_60 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = dot (shadows_60, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_59 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = (((float((xlv_TEXCOORD6.z > 0.0)) * tmpvar_55.w) * tmpvar_58.w) * tmpvar_59);
  atten_4 = tmpvar_72;
  mediump float tmpvar_73;
  tmpvar_73 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_74;
  tmpvar_74 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_73)), 0.0, 1.0);
  light_3 = tmpvar_74;
  mediump vec3 tmpvar_75;
  tmpvar_75 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_75;
  highp vec3 i_76;
  i_76 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_77;
  tmpvar_77 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_76 - (2.0 * (dot (norm_16, i_76) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_77;
  highp vec3 tmpvar_78;
  tmpvar_78 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_78;
  highp vec3 tmpvar_79;
  tmpvar_79 = (light_3 + (main_17.w * tmpvar_77));
  light_3 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_80;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 451
#line 472
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 451
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 455
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 459
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 463
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 467
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
out highp vec4 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 439
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp float terminator;
};
#line 432
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 422
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 426
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 430
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 451
#line 472
#line 472
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 476
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 480
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 483
lowp vec4 frag( in v2f IN ) {
    #line 485
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 489
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 493
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 497
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 501
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 505
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 509
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 513
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 517
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 521
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
in highp vec4 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 shadowVals_28;
  shadowVals_28.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_28, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  float tmpvar_36;
  tmpvar_36 = (tmpvar_27.w * dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_37;
  i_37 = -(xlv_TEXCOORD5);
  vec3 tmpvar_38;
  tmpvar_38 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_36), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_36 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_37 - (2.0 * (dot (normal_18, i_37) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_38));
  color_4.xyz = (color_4.xyz * tmpvar_38);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_36), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55));
  highp float tmpvar_57;
  mediump vec4 shadows_58;
  highp vec4 shadowVals_59;
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_61;
  vec_61 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, vec_61);
  packDist_62 = tmpvar_63;
  shadowVals_59.x = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_59.y = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_59.z = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_59.w = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_73;
  tmpvar_73 = lessThan (shadowVals_59, vec4(tmpvar_60));
  highp vec4 tmpvar_74;
  tmpvar_74 = _LightShadowData.xxxx;
  highp float tmpvar_75;
  if (tmpvar_73.x) {
    tmpvar_75 = tmpvar_74.x;
  } else {
    tmpvar_75 = 1.0;
  };
  highp float tmpvar_76;
  if (tmpvar_73.y) {
    tmpvar_76 = tmpvar_74.y;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_73.z) {
    tmpvar_77 = tmpvar_74.z;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_73.w) {
    tmpvar_78 = tmpvar_74.w;
  } else {
    tmpvar_78 = 1.0;
  };
  highp vec4 tmpvar_79;
  tmpvar_79.x = tmpvar_75;
  tmpvar_79.y = tmpvar_76;
  tmpvar_79.z = tmpvar_77;
  tmpvar_79.w = tmpvar_78;
  shadows_58 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = dot (shadows_58, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_57 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_56.w * tmpvar_57);
  atten_4 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_82)), 0.0, 1.0);
  light_3 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_84;
  highp vec3 i_85;
  i_85 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_86;
  tmpvar_86 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_85 - (2.0 * (dot (norm_16, i_85) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_17.w * tmpvar_86));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_89;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55));
  highp float tmpvar_57;
  mediump vec4 shadows_58;
  highp vec4 shadowVals_59;
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_61;
  vec_61 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, vec_61);
  packDist_62 = tmpvar_63;
  shadowVals_59.x = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_59.y = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_59.z = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_59.w = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_73;
  tmpvar_73 = lessThan (shadowVals_59, vec4(tmpvar_60));
  highp vec4 tmpvar_74;
  tmpvar_74 = _LightShadowData.xxxx;
  highp float tmpvar_75;
  if (tmpvar_73.x) {
    tmpvar_75 = tmpvar_74.x;
  } else {
    tmpvar_75 = 1.0;
  };
  highp float tmpvar_76;
  if (tmpvar_73.y) {
    tmpvar_76 = tmpvar_74.y;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_73.z) {
    tmpvar_77 = tmpvar_74.z;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_73.w) {
    tmpvar_78 = tmpvar_74.w;
  } else {
    tmpvar_78 = 1.0;
  };
  highp vec4 tmpvar_79;
  tmpvar_79.x = tmpvar_75;
  tmpvar_79.y = tmpvar_76;
  tmpvar_79.z = tmpvar_77;
  tmpvar_79.w = tmpvar_78;
  shadows_58 = tmpvar_79;
  mediump float tmpvar_80;
  tmpvar_80 = dot (shadows_58, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_57 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (tmpvar_56.w * tmpvar_57);
  atten_4 = tmpvar_81;
  mediump float tmpvar_82;
  tmpvar_82 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_82)), 0.0, 1.0);
  light_3 = tmpvar_83;
  mediump vec3 tmpvar_84;
  tmpvar_84 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_84;
  highp vec3 i_85;
  i_85 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_86;
  tmpvar_86 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_85 - (2.0 * (dot (norm_16, i_85) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 + (main_17.w * tmpvar_86));
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_89;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 426
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 468
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 455
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 459
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 463
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 428
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 418
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 422
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 426
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 468
#line 468
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 472
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 476
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 479
lowp vec4 frag( in v2f IN ) {
    #line 481
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 485
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 489
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 493
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 501
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 505
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 509
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 513
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 517
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
attribute vec4 TANGENT;
uniform mat4 _LightMatrix0;
uniform vec4 unity_Scale;
uniform mat4 _World2Object;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = gl_Normal;
  float tmpvar_3;
  tmpvar_3 = dot (normalize((_Object2World * tmpvar_2).xyz), normalize(_WorldSpaceLightPos0).xyz);
  vec3 tmpvar_4;
  vec3 tmpvar_5;
  tmpvar_4 = TANGENT.xyz;
  tmpvar_5 = (((gl_Normal.yzx * TANGENT.zxy) - (gl_Normal.zxy * TANGENT.yzx)) * TANGENT.w);
  mat3 tmpvar_6;
  tmpvar_6[0].x = tmpvar_4.x;
  tmpvar_6[0].y = tmpvar_5.x;
  tmpvar_6[0].z = gl_Normal.x;
  tmpvar_6[1].x = tmpvar_4.y;
  tmpvar_6[1].y = tmpvar_5.y;
  tmpvar_6[1].z = gl_Normal.y;
  tmpvar_6[2].x = tmpvar_4.z;
  tmpvar_6[2].y = tmpvar_5.z;
  tmpvar_6[2].z = gl_Normal.z;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_6 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - gl_Vertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = mix (1.0, clamp (floor((1.01 + tmpvar_3)), 0.0, 1.0), clamp ((10.0 * -(tmpvar_3)), 0.0, 1.0));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying float xlv_TEXCOORD8;
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _Albedo;
uniform float _MinLight;
uniform float _DetailDist;
uniform vec4 _DetailOffset;
uniform float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
void main ()
{
  vec4 citydarkoverlay_1;
  vec4 cityoverlay_2;
  vec2 uv_3;
  vec4 color_4;
  float r_5;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    float y_over_x_6;
    y_over_x_6 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_7;
    float x_8;
    x_8 = (y_over_x_6 * inversesqrt(((y_over_x_6 * y_over_x_6) + 1.0)));
    s_7 = (sign(x_8) * (1.5708 - (sqrt((1.0 - abs(x_8))) * (1.5708 + (abs(x_8) * (-0.214602 + (abs(x_8) * (0.0865667 + (abs(x_8) * -0.0310296)))))))));
    r_5 = s_7;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_5 = (s_7 + 3.14159);
      } else {
        r_5 = (r_5 - 3.14159);
      };
    };
  } else {
    r_5 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_3.x = (0.5 + (0.159155 * r_5));
  uv_3.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  float r_9;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    float y_over_x_10;
    y_over_x_10 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    float s_11;
    float x_12;
    x_12 = (y_over_x_10 * inversesqrt(((y_over_x_10 * y_over_x_10) + 1.0)));
    s_11 = (sign(x_12) * (1.5708 - (sqrt((1.0 - abs(x_12))) * (1.5708 + (abs(x_12) * (-0.214602 + (abs(x_12) * (0.0865667 + (abs(x_12) * -0.0310296)))))))));
    r_9 = s_11;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_9 = (s_11 + 3.14159);
      } else {
        r_9 = (r_9 - 3.14159);
      };
    };
  } else {
    r_9 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  float tmpvar_13;
  tmpvar_13 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  vec2 tmpvar_14;
  tmpvar_14 = dFdx(xlv_TEXCOORD2.xy);
  vec2 tmpvar_15;
  tmpvar_15 = dFdy(xlv_TEXCOORD2.xy);
  vec4 tmpvar_16;
  tmpvar_16.x = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_16.y = dFdx(tmpvar_13);
  tmpvar_16.z = (0.159155 * sqrt(dot (tmpvar_15, tmpvar_15)));
  tmpvar_16.w = dFdy(tmpvar_13);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_MainTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  vec3 normal_18;
  normal_18.xy = ((texture2DGradARB (_BumpMap, uv_3, tmpvar_16.xy, tmpvar_16.zw).wy * 2.0) - 1.0);
  normal_18.z = sqrt((1.0 - clamp (dot (normal_18.xy, normal_18.xy), 0.0, 1.0)));
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD2);
  float tmpvar_20;
  tmpvar_20 = clamp (floor(((1.0 + tmpvar_19.x) - tmpvar_19.z)), 0.0, 1.0);
  vec3 tmpvar_21;
  tmpvar_21 = mix (mix (tmpvar_19.zxy, tmpvar_19, vec3(tmpvar_20)), tmpvar_19.yxz, vec3(clamp (floor(((1.0 + tmpvar_19.y) - mix (tmpvar_19.z, tmpvar_19.x, tmpvar_20))), 0.0, 1.0)));
  vec4 tmpvar_22;
  tmpvar_22 = texture2DGradARB (_CityOverlayTex, uv_3, tmpvar_16.xy, tmpvar_16.zw);
  cityoverlay_2.xyz = tmpvar_22.xyz;
  cityoverlay_2.w = (tmpvar_22.w * clamp ((1.0 - tmpvar_17.w), 0.0, 1.0));
  vec4 tmpvar_23;
  tmpvar_23 = (cityoverlay_2 * texture2D (_CityDarkOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  citydarkoverlay_1 = tmpvar_23;
  vec4 tmpvar_24;
  tmpvar_24 = (cityoverlay_2 * texture2D (_CityLightOverlayDetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _CityOverlayDetailScale)));
  vec4 tmpvar_25;
  tmpvar_25 = (mix ((tmpvar_17 * mix (texture2D (_DetailTex, ((((0.5 * tmpvar_21.zy) / abs(tmpvar_21.x)) + _DetailOffset.xy) * _DetailScale)), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_24, tmpvar_24.wwww) * _Color);
  color_4 = tmpvar_25;
  float tmpvar_26;
  tmpvar_26 = dot (normal_18, xlv_TEXCOORD5);
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD6, xlv_TEXCOORD6)));
  vec4 tmpvar_28;
  tmpvar_28 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  vec4 shadowVals_29;
  shadowVals_29.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_29.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_29.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_29.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_30;
  tmpvar_30 = lessThan (shadowVals_29, vec4(((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_31;
  tmpvar_31 = _LightShadowData.xxxx;
  float tmpvar_32;
  if (tmpvar_30.x) {
    tmpvar_32 = tmpvar_31.x;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_30.y) {
    tmpvar_33 = tmpvar_31.y;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_30.z) {
    tmpvar_34 = tmpvar_31.z;
  } else {
    tmpvar_34 = 1.0;
  };
  float tmpvar_35;
  if (tmpvar_30.w) {
    tmpvar_35 = tmpvar_31.w;
  } else {
    tmpvar_35 = 1.0;
  };
  vec4 tmpvar_36;
  tmpvar_36.x = tmpvar_32;
  tmpvar_36.y = tmpvar_33;
  tmpvar_36.z = tmpvar_34;
  tmpvar_36.w = tmpvar_35;
  float tmpvar_37;
  tmpvar_37 = ((tmpvar_27.w * tmpvar_28.w) * dot (tmpvar_36, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_38;
  i_38 = -(xlv_TEXCOORD5);
  vec3 tmpvar_39;
  tmpvar_39 = ((clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_26) * 2.0) * tmpvar_37), 0.0, 1.0))), 0.0, 1.0) * xlv_TEXCOORD8) + (tmpvar_17.w * (vec3(clamp (floor((1.0 + tmpvar_26)), 0.0, 1.0)) * (((tmpvar_37 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_38 - (2.0 * (dot (normal_18, i_38) * normal_18))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)))));
  color_4.xyz = (tmpvar_25.xyz + (_Albedo * tmpvar_39));
  color_4.xyz = (color_4.xyz * tmpvar_39);
  citydarkoverlay_1.w = (tmpvar_23.w * (1.0 - clamp (clamp (((((_LightColor0.w * (tmpvar_26 - 0.01)) / 0.99) * 4.0) * tmpvar_37), 0.0, 1.0), 0.0, 1.0)));
  color_4.xyz = mix (color_4, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_4.w = 1.0;
  gl_FragData[0] = color_4;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Bind "tangent" TexCoord2
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Vector 17 [_WorldSpaceLightPos0]
Vector 18 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_World2Object]
Vector 19 [unity_Scale]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 59 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
dcl_texcoord8 o7
def c20, 0.00000000, 10.00000000, 1.00976563, -1.00000000
def c21, 1.00000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dcl_tangent0 v2
mov r1.xyz, v1
mov r1.w, c20.x
dp4 r0.z, r1, c6
dp4 r0.x, r1, c4
dp4 r0.y, r1, c5
dp3 r0.w, r0, r0
dp4 r1.x, c17, c17
rsq r1.w, r1.x
rsq r0.w, r0.w
mul r1.xyz, r0.w, r0
mul r2.xyz, r1.w, c17
dp3 r2.w, r1, r2
mov r0.xyz, v2
mul r1.xyz, v1.zxyw, r0.yzxw
mov r0.xyz, v2
mad r1.xyz, v1.yzxw, r0.zxyw, -r1
mul r2.xyz, r1, v2.w
mov r1, c8
dp4 r3.x, c17, r1
mov r0, c10
dp4 r3.z, c17, r0
mov r0, c9
dp4 r3.y, c17, r0
mad r0.xyz, r3, c19.w, -v0
dp3 r1.y, r0, r2
dp3 r1.x, r0, v2
dp3 r1.z, v1, r0
dp3 r0.x, r1, r1
add r0.w, r2, c20.z
frc r0.y, r0.w
add_sat r0.y, r0.w, -r0
rsq r0.x, r0.x
mul o4.xyz, r0.x, r1
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r2.x, r0.y, c20.w
add r0.xyz, -r1, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul_sat r1.w, -r2, c20.y
mul o2.xyz, r0.w, r0
mad o7.x, r1.w, r2, c21
dp4 r1.w, v0, c7
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o5.z, r1, c14
dp4 o5.y, r1, c13
dp4 o5.x, r1, c12
rcp o1.x, r0.w
mov o3.xyz, -r0
add o6.xyz, r1, -c18
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).xyz * 2.0) - 1.0);
  norm_16 = tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTextureB0, vec2(tmpvar_55));
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_58;
  mediump vec4 shadows_59;
  highp vec4 shadowVals_60;
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_62;
  vec_62 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, vec_62);
  packDist_63 = tmpvar_64;
  shadowVals_60.x = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_60.y = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_60.z = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_60.w = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_60, vec4(tmpvar_61));
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_59 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_59, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_58 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = ((tmpvar_56.w * tmpvar_57.w) * tmpvar_58);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_16, i_86) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 + (main_17.w * tmpvar_87));
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_90;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp vec4 unity_Scale;
uniform highp mat4 _World2Object;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec4 _glesTANGENT;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  vec4 tmpvar_2;
  tmpvar_2.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_2.w = _glesTANGENT.w;
  mediump float NdotL_3;
  mediump vec3 worldNormal_4;
  highp float tmpvar_5;
  highp vec3 p_6;
  p_6 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_1;
  highp vec3 tmpvar_8;
  tmpvar_8 = normalize((_Object2World * tmpvar_7).xyz);
  worldNormal_4 = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (worldNormal_4, normalize(_WorldSpaceLightPos0).xyz);
  NdotL_3 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = mix (1.0, clamp (floor((1.01 + NdotL_3)), 0.0, 1.0), clamp ((10.0 * -(NdotL_3)), 0.0, 1.0));
  tmpvar_5 = tmpvar_10;
  highp vec3 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_2.xyz;
  tmpvar_12 = (((tmpvar_1.yzx * tmpvar_2.zxy) - (tmpvar_1.zxy * tmpvar_2.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_11.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_1.x;
  tmpvar_13[1].x = tmpvar_11.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_1.y;
  tmpvar_13[2].x = tmpvar_11.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_1.z;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_6, p_6));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_13 * (((_World2Object * _WorldSpaceLightPos0).xyz * unity_Scale.w) - _glesVertex.xyz)));
  xlv_TEXCOORD6 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD7 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD8 = tmpvar_5;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp float xlv_TEXCOORD8;
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _Albedo;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailScale;
uniform sampler2D _DetailTex;
uniform sampler2D _BumpMap;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump float NdotL_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 citylightoverlaydetail_9;
  mediump vec4 citydarkoverlaydetail_10;
  mediump vec4 cityoverlay_11;
  mediump vec4 detail_12;
  mediump float nylerp_13;
  mediump vec3 detailCoords_14;
  mediump float zxlerp_15;
  mediump vec3 norm_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD2.z) > (1e-08 * abs(xlv_TEXCOORD2.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD2.x / xlv_TEXCOORD2.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD2.z < 0.0)) {
      if ((xlv_TEXCOORD2.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD2.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.y))) * (1.5708 + (abs(xlv_TEXCOORD2.y) * (-0.214602 + (abs(xlv_TEXCOORD2.y) * (0.0865667 + (abs(xlv_TEXCOORD2.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD2.x) > (1e-08 * abs(xlv_TEXCOORD2.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD2.y / xlv_TEXCOORD2.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD2.x < 0.0)) {
      if ((xlv_TEXCOORD2.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD2.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD2.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD2.z))) * (1.5708 + (abs(xlv_TEXCOORD2.z) * (-0.214602 + (abs(xlv_TEXCOORD2.z) * (0.0865667 + (abs(xlv_TEXCOORD2.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD2.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD2.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  lowp vec3 normal_33;
  normal_33.xy = ((texture2DGradEXT (_BumpMap, uv_18, tmpvar_31.xy, tmpvar_31.zw).wy * 2.0) - 1.0);
  normal_33.z = sqrt((1.0 - clamp (dot (normal_33.xy, normal_33.xy), 0.0, 1.0)));
  norm_16 = normal_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = abs(xlv_TEXCOORD2);
  highp float tmpvar_35;
  tmpvar_35 = clamp (floor(((1.0 + tmpvar_34.x) - tmpvar_34.z)), 0.0, 1.0);
  zxlerp_15 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (tmpvar_34.zxy, tmpvar_34, vec3(zxlerp_15));
  detailCoords_14 = tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = clamp (floor(((1.0 + tmpvar_34.y) - mix (tmpvar_34.z, tmpvar_34.x, zxlerp_15))), 0.0, 1.0);
  nylerp_13 = tmpvar_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = mix (detailCoords_14, tmpvar_34.yxz, vec3(nylerp_13));
  detailCoords_14 = tmpvar_38;
  mediump float tmpvar_39;
  tmpvar_39 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_40;
  highp vec2 P_41;
  P_41 = ((((0.5 * detailCoords_14.zy) / tmpvar_39) + _DetailOffset.xy) * _DetailScale);
  tmpvar_40 = texture2D (_DetailTex, P_41);
  detail_12 = tmpvar_40;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2DGradEXT (_CityOverlayTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  cityoverlay_11 = tmpvar_42;
  mediump float tmpvar_43;
  tmpvar_43 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_44;
  highp vec2 P_45;
  P_45 = ((((0.5 * detailCoords_14.zy) / tmpvar_43) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_44 = texture2D (_CityDarkOverlayDetailTex, P_45);
  citydarkoverlaydetail_10 = tmpvar_44;
  mediump float tmpvar_46;
  tmpvar_46 = abs(detailCoords_14.x);
  lowp vec4 tmpvar_47;
  highp vec2 P_48;
  P_48 = ((((0.5 * detailCoords_14.zy) / tmpvar_46) + _DetailOffset.xy) * _CityOverlayDetailScale);
  tmpvar_47 = texture2D (_CityLightOverlayDetailTex, P_48);
  citylightoverlaydetail_9 = tmpvar_47;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_49;
  cityoverlay_11.w = (cityoverlay_11.w * clamp ((1.0 - main_17.w), 0.0, 1.0));
  mediump vec4 tmpvar_50;
  tmpvar_50 = (cityoverlay_11 * citydarkoverlaydetail_10);
  citydarkoverlay_7 = tmpvar_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (cityoverlay_11 * citylightoverlaydetail_9);
  mediump vec4 tmpvar_52;
  tmpvar_52 = (mix ((main_17 * mix (detail_12, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))), tmpvar_51, tmpvar_51.wwww) * _Color);
  color_19 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = dot (norm_16, xlv_TEXCOORD5);
  NdotL_5 = tmpvar_54;
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD6, xlv_TEXCOORD6);
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2D (_LightTextureB0, vec2(tmpvar_55));
  lowp vec4 tmpvar_57;
  tmpvar_57 = textureCube (_LightTexture0, xlv_TEXCOORD6);
  highp float tmpvar_58;
  mediump vec4 shadows_59;
  highp vec4 shadowVals_60;
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD7, xlv_TEXCOORD7)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_62;
  vec_62 = (xlv_TEXCOORD7 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, vec_62);
  packDist_63 = tmpvar_64;
  shadowVals_60.x = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD7 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_60.y = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD7 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_60.z = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD7 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_60.w = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_60, vec4(tmpvar_61));
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_59 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_59, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_58 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = ((tmpvar_56.w * tmpvar_57.w) * tmpvar_58);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * NdotL_5) * 2.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + NdotL_5)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  highp vec3 i_86;
  i_86 = -(xlv_TEXCOORD5);
  highp vec3 tmpvar_87;
  tmpvar_87 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_86 - (2.0 * (dot (norm_16, i_86) * norm_16))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_87;
  highp vec3 tmpvar_88;
  tmpvar_88 = (light_3 * xlv_TEXCOORD8);
  light_3 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 + (main_17.w * tmpvar_87));
  light_3 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (tmpvar_52.xyz + (_Albedo * light_3));
  color_19.xyz = tmpvar_90;
  color_19.xyz = (color_19.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_50.w * (1.0 - clamp (clamp (((((_LightColor0.w * (NdotL_5 - 0.01)) / 0.99) * 4.0) * atten_4), 0.0, 1.0), 0.0, 1.0)));
  color_19.xyz = mix (color_19, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;
#define TANGENT vec4(normalize(_glesTANGENT.xyz), _glesTANGENT.w)
in vec4 _glesTANGENT;
mat2 xll_transpose_mf2x2(mat2 m) {
  return mat2( m[0][0], m[1][0], m[0][1], m[1][1]);
}
mat3 xll_transpose_mf3x3(mat3 m) {
  return mat3( m[0][0], m[1][0], m[2][0],
               m[0][1], m[1][1], m[2][1],
               m[0][2], m[1][2], m[2][2]);
}
mat4 xll_transpose_mf4x4(mat4 m) {
  return mat4( m[0][0], m[1][0], m[2][0], m[3][0],
               m[0][1], m[1][1], m[2][1], m[3][1],
               m[0][2], m[1][2], m[2][2], m[3][2],
               m[0][3], m[1][3], m[2][3], m[3][3]);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 427
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 469
#line 82
highp vec3 ObjSpaceLightDir( in highp vec4 v ) {
    highp vec3 objSpaceLightPos = (_World2Object * _WorldSpaceLightPos0).xyz;
    return ((objSpaceLightPos.xyz * unity_Scale.w) - v.xyz);
}
#line 448
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 452
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    #line 456
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    mediump vec3 worldNormal = normalize((_Object2World * vec4( v.normal, 0.0)).xyz);
    mediump float NdotL = dot( worldNormal, vec3( normalize(_WorldSpaceLightPos0)));
    mediump float termlerp = xll_saturate_f((10.0 * (-NdotL)));
    #line 460
    o.terminator = mix( 1.0, xll_saturate_f(floor((1.01 + NdotL))), termlerp);
    highp vec3 binormal = (cross( v.normal, v.tangent.xyz) * v.tangent.w);
    highp mat3 rotation = xll_transpose_mf3x3(mat3( v.tangent.xyz, binormal, v.normal));
    o.lightDirection = normalize((rotation * ObjSpaceLightDir( v.vertex)));
    #line 464
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}

out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
out highp float xlv_TEXCOORD8;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xlt_v.tangent = vec4(TANGENT);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD5 = vec3(xl_retval.lightDirection);
    xlv_TEXCOORD6 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD7 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD8 = float(xl_retval.terminator);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 sphereNormal;
    highp vec3 lightDirection;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp float terminator;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
    highp vec4 tangent;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
#line 419
uniform highp float _DetailScale;
uniform lowp vec4 _DetailOffset;
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
#line 423
uniform highp float _MinLight;
uniform highp float _Albedo;
uniform sampler2D _CityOverlayTex;
uniform highp float _CityOverlayDetailScale;
#line 427
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 448
#line 469
#line 469
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 473
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 477
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 272
lowp vec3 UnpackNormal( in lowp vec4 packednormal ) {
    #line 274
    return ((packednormal.xyz * 2.0) - 1.0);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 480
lowp vec4 frag( in v2f IN ) {
    #line 482
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 486
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec3 norm = UnpackNormal( xll_tex2Dgrad( _BumpMap, uv, uvdd.xy, uvdd.zw));
    #line 490
    sphereNrm = abs(sphereNrm);
    mediump float zxlerp = xll_saturate_f(floor(((1.0 + sphereNrm.x) - sphereNrm.z)));
    mediump vec3 detailCoords = mix( sphereNrm.zxy, sphereNrm.xyz, vec3( zxlerp));
    mediump float nylerp = xll_saturate_f(floor(((1.0 + sphereNrm.y) - mix( sphereNrm.z, sphereNrm.x, zxlerp))));
    #line 494
    detailCoords = mix( detailCoords, sphereNrm.yxz, vec3( nylerp));
    mediump vec4 detail = texture( _DetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _DetailScale));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetail = texture( _CityDarkOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    #line 498
    mediump vec4 citylightoverlaydetail = texture( _CityLightOverlayDetailTex, ((((0.5 * detailCoords.zy) / abs(detailCoords.x)) + _DetailOffset.xy) * _CityOverlayDetailScale));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    cityoverlay.w *= xll_saturate_f((1.0 - main.w));
    #line 502
    mediump vec4 citydarkoverlay = (cityoverlay * citydarkoverlaydetail);
    mediump vec4 citylightoverlay = (cityoverlay * citylightoverlaydetail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    #line 506
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump float NdotL = dot( norm, IN.lightDirection);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * NdotL) * 2.0) * atten));
    #line 510
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-IN.lightDirection), norm), IN.viewDir)), _Shininess));
    light *= IN.terminator;
    #line 514
    light += (main.w * specularReflection);
    color.xyz += (_Albedo * light);
    color.xyz *= light;
    lightIntensity = xll_saturate_f(((((_LightColor0.w * (NdotL - 0.01)) / 0.99) * 4.0) * atten));
    #line 518
    citydarkoverlay.w *= (1.0 - xll_saturate_f(lightIntensity));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
in highp float xlv_TEXCOORD8;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD2);
    xlt_IN.lightDirection = vec3(xlv_TEXCOORD5);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD6);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD7);
    xlt_IN.terminator = float(xlv_TEXCOORD8);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 60
//   d3d9 - ALU: 118 to 153, TEX: 7 to 18
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 120 ALU, 8 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
rcp r1.x, r0.w
min r0.w, r0.x, r1
mul r0.w, r0, r1.x
mul r1.x, r0.w, r0.w
mad r1.y, r1.x, c12, c12.z
mad r1.y, r1, r1.x, c12.w
mad r1.y, r1, r1.x, c13.x
mad r1.y, r1, r1.x, c13
mad r1.x, r1.y, r1, c13.z
mul r2.x, r1, r0.w
add r1.xyz, r0, -r0.zxyw
add r2.z, r1.x, c10.y
add r2.y, -r2.x, c13.w
add r0.w, r0.x, -r1
cmp r0.w, -r0, r2.x, r2.y
add r2.x, -r0.w, c11.w
cmp r0.w, v2.z, r0, r2.x
cmp r2.x, v2, r0.w, -r0.w
mad r5.x, r2, c14, c14.y
frc r2.y, r2.z
add_sat r2.y, r2.z, -r2
mad r1.xyz, r2.y, r1, r0.zxyw
abs r2.z, v2.y
add r0.w, r0.y, -r1.x
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r1.w, r2, c11
add r3.x, -r2.z, c10.y
mad r2.w, r2.z, c10.z, c10
mad r2.w, r2, r2.z, c11.x
rsq r2.y, r2.y
rsq r3.x, r3.x
mad r1.w, r1, r2.x, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v2.z, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r2.y, -r2, c11.z, r2.x
add_pp r0.xyz, r0.yxzw, -r1
mad r2.z, r2.w, r2, c11.y
rcp r3.x, r3.x
mul r2.w, r2.z, r3.x
cmp r2.z, v2.y, c10.x, c10.y
mul r3.x, r2.z, r2.w
mad r2.x, -r3, c11.z, r2.w
mad r2.y, r1.w, c11.w, r2
mad r1.w, r2.z, c11, r2.x
mul r2.x, r2.y, c12
dsy r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r5.y, r1.w, c12.x
dsx r4.w, r2.x
dsy r4.y, r2.x
dsx r2.xy, v2
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
add r2.x, r2.z, r2.w
rsq r1.w, r1.w
rcp r1.w, r1.w
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r4.z, r1.w, c14.x
mul r4.x, r2, c14
texldd r2.yw, r5, s1, r4.zwzw, r4
mad_pp r3.xy, r2.wyzw, c14.z, c14.w
add r0.w, r0, c10.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r0, r1
mul_pp r2.xy, r3, r3
add_pp_sat r1.w, r2.x, r2.y
add_pp r1.w, -r1, c10.y
rsq_pp r0.w, r1.w
rcp_pp r3.z, r0.w
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
dp3 r0.w, r3, -v3
mul_pp r1.xy, r0.zyzw, r0.x
mul r0.xyz, r3, r0.w
mov_pp r1.zw, c6.xyxy
mad_pp r1.xy, r1, c14.y, r1.zwzw
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r1.z, r0, v1
pow r0, r1.z, c4.x
mov r0.z, r0.x
dp3_pp r0.y, r3, v3
add_pp r0.w, r0.y, c10.y
mul r1.xy, r1, c5.x
texld r1.xyz, r1, s2
dp3 r0.x, v4, v4
texld r0.x, r0.x, s3
mul r3.xyz, r0.x, c1
mul r3.xyz, r3, c2
mul_pp r0.y, r0, c1.w
mul_pp r0.y, r0, r0.x
add_pp r2.xyz, -r1, c10.y
mul r3.xyz, r3, r0.z
frc_pp r1.w, r0
add_pp_sat r0.z, r0.w, -r1.w
mul_pp_sat r0.w, r0.y, c11.z
mul r3.xyz, r0.z, r3
texldd r4, r5, s0, r4.zwzw, r4
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r3.xyz, r4.w, r3
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v5.x, r3
mul r2.xyz, r0, c9.x
mul_pp r1.xyz, r4, r1
mad_pp r1.xyz, r1, c3, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 118 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord8 v4.x
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
rcp r1.x, r0.w
min r0.w, r0.x, r1
mul r0.w, r0, r1.x
mul r1.x, r0.w, r0.w
mad r1.y, r1.x, c12, c12.z
mad r1.y, r1, r1.x, c12.w
mad r1.y, r1, r1.x, c13.x
mad r1.y, r1, r1.x, c13
mad r2.x, r1.y, r1, c13.z
mul r2.x, r2, r0.w
add r1.xyz, r0, -r0.zxyw
add r2.z, r1.x, c10.y
add r2.y, -r2.x, c13.w
add r0.w, r0.x, -r1
cmp r0.w, -r0, r2.x, r2.y
frc r2.w, r2.z
add_sat r2.y, r2.z, -r2.w
abs r2.z, v2.y
mad r1.xyz, r2.y, r1, r0.zxyw
add r2.y, r0, -r1.x
add r2.x, -r0.w, c11.w
cmp r0.w, v2.z, r0, r2.x
cmp r2.x, v2, r0.w, -r0.w
add r0.w, r2.y, c10.y
mad r5.x, r2, c14, c14.y
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r1.w, r2, c11
add r3.x, -r2.z, c10.y
mad r2.w, r2.z, c10.z, c10
mad r2.w, r2, r2.z, c11.x
rsq r2.y, r2.y
rsq r3.x, r3.x
mad r1.w, r1, r2.x, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v2.z, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r2.y, -r2, c11.z, r2.x
add_pp r0.xyz, r0.yxzw, -r1
mad r2.z, r2.w, r2, c11.y
rcp r3.x, r3.x
mul r2.w, r2.z, r3.x
cmp r2.z, v2.y, c10.x, c10.y
mul r3.x, r2.z, r2.w
mad r2.x, -r3, c11.z, r2.w
mad r2.y, r1.w, c11.w, r2
mad r1.w, r2.z, c11, r2.x
mul r2.x, r2.y, c12
dsy r2.zw, v2.xyxy
mul r2.zw, r2, r2
dsy r4.y, r2.x
dsx r4.w, r2.x
dsx r2.xy, v2
mul r2.xy, r2, r2
mul r5.y, r1.w, c12.x
add r1.w, r2.x, r2.y
add r2.x, r2.z, r2.w
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1.w, c14.x
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r0, r1
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r4.x, r2, c14
texldd r2.yw, r5, s1, r4.zwzw, r4
mad_pp r2.xy, r2.wyzw, c14.z, c14.w
mul_pp r2.zw, r2.xyxy, r2.xyxy
add_pp_sat r1.w, r2.z, r2
add_pp r0.w, -r1, c10.y
rsq_pp r0.w, r0.w
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
rcp_pp r2.z, r0.w
mul_pp r1.xy, r0.zyzw, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mov_pp r1.zw, c6.xyxy
mad_pp r1.xy, r1, c14.y, r1.zwzw
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c4.x
dp3_pp r0.w, r2, v3
mov r2.y, r0.x
add_pp r1.w, r0, c10.y
frc_pp r2.x, r1.w
mul r1.xy, r1, c5.x
texld r1.xyz, r1, s2
mov r0.xyz, c1
mul r0.xyz, c2, r0
add_pp r3.xyz, -r1, c10.y
mul r0.xyz, r0, r2.y
add_pp_sat r1.w, r1, -r2.x
mul r0.xyz, r1.w, r0
texldd r2, r5, s0, r4.zwzw, r4
mul r4.xyz, r2.w, r0
mul_pp r0.y, r0.w, c1.w
mul_pp_sat r0.w, r0.y, c11.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r3, r1
mad_pp r0.xyz, r0, v4.x, r4
mul r3.xyz, r0, c9.x
mul_pp r1.xyz, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 125 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r1.w, r2.x, c10.y
add r0.w, -r0.z, c13
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
add r3.x, -r0.w, c10.y
mad r2.w, r0, c10.z, c10
mad r2.w, r2, r0, c11.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c11, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c11.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c10.x, c10.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c11.z, r2.w
mad r0.z, r0.x, c11.w, r0
mad r0.x, r0.w, c11.w, r0.y
mul r0.y, r0.z, c12.x
add r1.w, r1, c10.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.yw, r5, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c10.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r1.w, r0, v3
dp3 r1.x, r0, -v3
mul_pp r2.xy, r1.zyzw, r0.w
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c11.z, -v3
dp3_sat r0.w, r1, v1
pow r4, r0.w, c4.x
mov_pp r2.zw, c6.xyxy
mad_pp r2.xy, r2, c14.y, r2.zwzw
mul r1.xy, r2, c5.x
texld r1.xyz, r1, s2
dp3 r0.x, v4, v4
add_pp r2.xyz, -r1, c10.y
mov r2.w, r4.x
rcp r0.w, v4.w
mad r4.xy, v4, r0.w, c14.y
texld r0.w, r4, s3
add_pp r4.x, r1.w, c10.y
cmp r0.y, -v4.z, c10.x, c10
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.w, r0.y, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r2.w
frc_pp r4.y, r4.x
add_pp_sat r2.w, r4.x, -r4.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r3.zwzw, r3
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c1
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c11.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v5.x, r4
mul r2.xyz, r0, c9.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c3, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 121 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r1.w, r2.x, c10.y
add r0.w, -r0.z, c13
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
add r3.x, -r0.w, c10.y
mad r2.w, r0, c10.z, c10
mad r2.w, r2, r0, c11.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c11, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c11.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c10.x, c10.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c11.z, r2.w
mad r0.z, r0.x, c11.w, r0
mad r0.x, r0.w, c11.w, r0.y
mul r0.y, r0.z, c12.x
add r1.w, r1, c10.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.yw, r5, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c10.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r1.w, r0, v3
dp3 r1.x, r0, -v3
mul_pp r2.xy, r1.zyzw, r0.w
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c11.z, -v3
dp3_sat r0.w, r1, v1
pow r4, r0.w, c4.x
mov_pp r2.zw, c6.xyxy
mad_pp r2.xy, r2, c14.y, r2.zwzw
mov r2.w, r4.x
add_pp r4.x, r1.w, c10.y
mul r1.xy, r2, c5.x
texld r1.xyz, r1, s2
dp3 r0.x, v4, v4
add_pp r2.xyz, -r1, c10.y
texld r0.x, r0.x, s3
texld r0.w, v4, s4
mul r0.w, r0.x, r0
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r2.w
frc_pp r4.y, r4.x
add_pp_sat r2.w, r4.x, -r4.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r3.zwzw, r3
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c1
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c11.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v5.x, r4
mul r2.xyz, r0, c9.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c3, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 119 ALU, 8 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r1.x, v2.z
max r0.w, r0.x, r1.x
rcp r1.y, r0.w
min r0.w, r0.x, r1.x
mul r0.w, r0, r1.y
mul r1.y, r0.w, r0.w
add r2.xyz, r0, -r0.zxyw
mad r1.z, r1.y, c12.y, c12
mad r1.z, r1, r1.y, c12.w
mad r1.z, r1, r1.y, c13.x
mad r1.z, r1, r1.y, c13.y
mad r1.y, r1.z, r1, c13.z
mul r1.y, r1, r0.w
add r1.w, r2.x, c10.y
add r1.z, -r1.y, c13.w
add r0.w, r0.x, -r1.x
cmp r0.w, -r0, r1.y, r1.z
add r1.y, -r0.w, c11.w
cmp r0.w, v2.z, r0, r1.y
cmp r1.y, v2.x, r0.w, -r0.w
mad r5.x, r1.y, c14, c14.y
frc r1.z, r1.w
add_sat r1.z, r1.w, -r1
mad r2.xyz, r1.z, r2, r0.zxyw
abs r1.w, v2.y
add r0.w, r0.y, -r2.x
add r1.z, -r1.x, c10.y
mad r1.y, r1.x, c10.z, c10.w
mad r1.y, r1.x, r1, c11.x
add r3.x, -r1.w, c10.y
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r1.z, r1.z
rsq r3.x, r3.x
mad r1.x, r1, r1.y, c11.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v2.z, c10, c10.y
mul r1.z, r1.x, r1.y
mad r1.z, -r1, c11, r1.y
add_pp r0.xyz, r0.yxzw, -r2
mad r1.w, r2, r1, c11.y
rcp r3.x, r3.x
mul r2.w, r1, r3.x
cmp r1.w, v2.y, c10.x, c10.y
mul r3.x, r1.w, r2.w
mad r1.y, -r3.x, c11.z, r2.w
mad r1.z, r1.x, c11.w, r1
mad r1.x, r1.w, c11.w, r1.y
mul r1.y, r1.z, c12.x
add r0.w, r0, c10.y
frc r2.w, r0
add_sat r0.w, r0, -r2
mad_pp r0.xyz, r0.w, r0, r2
dsy r1.zw, v2.xyxy
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul r1.zw, r1, r1
dsy r4.y, r1
mul r5.y, r1.x, c12.x
dsx r4.w, r1.y
dsx r1.xy, v2
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.z, r1.x, c14.x
mul r4.x, r1.y, c14
texldd r1.yw, r5, s1, r4.zwzw, r4
mad_pp r1.xy, r1.wyzw, c14.z, c14.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r1, r1.w
add_pp r1.z, -r1, c10.y
rsq_pp r0.w, r1.z
rcp_pp r1.z, r0.w
dp3 r0.w, r1, -v3
mul_pp r2.xy, r0.zyzw, r0.x
mul r0.xyz, r1, r0.w
dp3_pp r1.x, r1, v3
mov_pp r2.zw, c6.xyxy
mad_pp r2.xy, r2, c14.y, r2.zwzw
add_pp r1.y, r1.x, c10
frc_pp r1.z, r1.y
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c4.x
mul r2.xy, r2, c5.x
texld r2.xyz, r2, s2
add_pp r3.xyz, -r2, c10.y
mov r1.w, r0.x
texld r0.w, v4, s3
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r1.w
add_pp_sat r1.y, r1, -r1.z
mul r0.xyz, r1.y, r0
mul_pp r2.w, r1.x, c1
texldd r1, r5, s0, r4.zwzw, r4
mul r4.xyz, r1.w, r0
mul_pp r0.y, r2.w, r0.w
mul_pp_sat r0.w, r0.y, c11.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r0.xyz, r0, v5.x, r4
mul r3.xyz, r0, c9.x
mul_pp r1.xyz, r1, r2
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 130 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r1.w, r2.x, c11.y
add r0.w, -r0.z, c14
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
add r3.x, -r0.w, c11.y
mad r2.w, r0, c11.z, c11
mad r2.w, r2, r0, c12.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c12, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c12.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c11.x, c11.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c12.z, r2.w
mad r0.z, r0.x, c12.w, r0
mad r0.x, r0.w, c12.w, r0.y
mul r0.y, r0.z, c13.x
add r1.w, r1, c11.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c13.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r5, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c11.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r1.w, r0, v3
dp3 r1.x, r0, -v3
mul_pp r2.xy, r1.zyzw, r0.w
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c12.z, -v3
dp3_sat r0.w, r1, v1
pow r4, r0.w, c5.x
mov_pp r2.zw, c7.xyxy
mad_pp r2.xy, r2, c15.y, r2.zwzw
mul r1.xy, r2, c6.x
texld r1.xyz, r1, s2
add_pp r2.xyz, -r1, c11.y
mov r2.w, r4.x
texldp r0.x, v5, s5
rcp r0.y, v5.w
mad r0.y, -v5.z, r0, r0.x
mov r0.z, c1.x
cmp r0.y, r0, c11, r0.z
rcp r0.x, v4.w
mad r4.xy, v4, r0.x, c15.y
texld r0.w, r4, s3
add_pp r4.x, r1.w, c11.y
dp3 r0.x, v4, v4
cmp r0.z, -v4, c11.x, c11.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul r0.xyz, r0, r2.w
frc_pp r4.y, r4.x
add_pp_sat r2.w, r4.x, -r4.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r3.zwzw, r3
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c2
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c12.z
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c8.x
mul_sat r0.w, r0, c12.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c10.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c4, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 129 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r1.w, r2.x, c11.y
add r0.w, -r0.z, c14
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
add r3.x, -r0.w, c11.y
mad r2.w, r0, c11.z, c11
mad r2.w, r2, r0, c12.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c12, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c12.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c11.x, c11.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c12.z, r2.w
mad r0.z, r0.x, c12.w, r0
mad r0.x, r0.w, c12.w, r0.y
mul r0.y, r0.z, c13.x
add r1.w, r1, c11.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c13.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r5, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c11.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r1.w, r0, v3
dp3 r1.x, r0, -v3
mul_pp r2.xy, r1.zyzw, r0.w
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c12.z, -v3
dp3_sat r0.w, r1, v1
pow r4, r0.w, c5.x
mov_pp r2.zw, c7.xyxy
mad_pp r2.xy, r2, c15.y, r2.zwzw
mul r1.xy, r2, c6.x
texld r1.xyz, r1, s2
mov r0.x, c1
add r0.y, c11, -r0.x
texldp r0.x, v5, s5
mad r0.y, r0.x, r0, c1.x
dp3 r0.x, v4, v4
add_pp r2.xyz, -r1, c11.y
mov r2.w, r4.x
rcp r0.z, v4.w
mad r4.xy, v4, r0.z, c15.y
texld r0.w, r4, s3
add_pp r4.x, r1.w, c11.y
cmp r0.z, -v4, c11.x, c11.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul r0.xyz, r0, r2.w
frc_pp r4.y, r4.x
add_pp_sat r2.w, r4.x, -r4.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r3.zwzw, r3
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c2
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c12.z
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c8.x
mul_sat r0.w, r0, c12.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c10.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c4, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 119 ALU, 8 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r3.y, v2
add r2.w, -r3.y, c10.y
mad r3.x, r3.y, c10.z, c10.w
mad r3.x, r3, r3.y, c11
mad r3.x, r3, r3.y, c11.y
rsq r2.w, r2.w
rcp r2.w, r2.w
dsx r3.zw, v2.xyxy
dsy r4.xy, v2
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
mul r4.xy, r4, r4
mul r3.x, r3, r2.w
cmp r3.y, v2, c10.x, c10
min r1.x, r0, r1.w
rcp r0.w, r0.w
mul r1.y, r1.x, r0.w
mul r1.x, r1.y, r1.y
mad r0.w, r1.x, c12.y, c12.z
mad r0.w, r0, r1.x, c12
mad r0.w, r0, r1.x, c13.x
mad r0.w, r0, r1.x, c13.y
mad r0.w, r0, r1.x, c13.z
mul r2.y, r0.w, r1
add r1.xyz, r0, -r0.zxyw
add r2.x, r1, c10.y
mul r2.w, r3.y, r3.x
add r0.w, -r2.y, c13
add r2.z, r0.x, -r1.w
cmp r2.z, -r2, r2.y, r0.w
frc r0.w, r2.x
add_sat r0.w, r2.x, -r0
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r2.y, -r2.z, c11.w
cmp r2.x, v2.z, r2.z, r2.y
cmp r2.x, v2, r2, -r2
mad r2.z, r2.x, c14.x, c14.y
add r2.x, -r1.w, c10.y
mad r2.y, r1.w, c10.z, c10.w
mad r2.y, r1.w, r2, c11.x
rsq r2.x, r2.x
mad r1.w, r1, r2.y, c11.y
rcp r2.x, r2.x
mul r2.x, r1.w, r2
cmp r1.w, v2.z, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r2.x, -r2.y, c11.z, r2
mad r1.w, r1, c11, r2.x
mad r2.y, -r2.w, c11.z, r3.x
mad r2.x, r3.y, c11.w, r2.y
mul r1.w, r1, c12.x
dsy r3.y, r1.w
dsx r2.y, r1.w
add r1.w, r4.x, r4.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r3.x, r1.w, c14
add r1.w, r0, c10.y
frc r0.w, r1
add_pp r0.xyz, r0.yxzw, -r1
add_sat r0.w, r1, -r0
mad_pp r0.xyz, r0.w, r0, r1
mul r2.w, r2.x, c12.x
mul r3.zw, r3, r3
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r2.x, r2, c14
texldd r4.yw, r2.zwzw, s1, r2, r3
mad_pp r4.xy, r4.wyzw, c14.z, c14.w
mul_pp r3.zw, r4.xyxy, r4.xyxy
add_pp_sat r1.w, r3.z, r3
add_pp r1.w, -r1, c10.y
rsq_pp r0.w, r1.w
rcp_pp r4.z, r0.w
abs_pp r0.x, r0
rcp_pp r0.w, r0.x
mul_pp r1.xy, r0.zyzw, r0.w
mov_pp r1.zw, c6.xyxy
dp3_pp r0.w, r4, v3
add_pp r3.w, r0, c10.y
dp3 r0.x, r4, -v3
mul r0.xyz, r4, r0.x
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r0.z, r0, v1
mad_pp r1.xy, r1, c14.y, r1.zwzw
pow r5, r0.z, c4.x
mul r0.xy, r1, c5.x
texld r0.xyz, r0, s2
mov r1.w, r5.x
texldp r5.x, v4, s3
mul r4.xyz, r5.x, c1
mul r4.xyz, r4, c2
mul_pp r0.w, r0, c1
mul_pp r0.w, r0, r5.x
mul r4.xyz, r4, r1.w
frc_pp r3.z, r3.w
add_pp_sat r1.w, r3, -r3.z
mul r4.xyz, r1.w, r4
texldd r2, r2.zwzw, s0, r2, r3
add_pp r1.xyz, -r0, c10.y
mul r3.xyz, r2.w, r4
mov r1.w, c8.x
mul_pp_sat r0.w, r0, c11.z
add r4.xyz, c1, r1.w
mad_sat r4.xyz, r4, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r1, r0
mad_pp r3.xyz, r4, v5.x, r3
mul r0.xyz, r3, c9.x
mul_pp r1.xyz, r2, r1
mad_pp r0.xyz, r1, c3, r0
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 120 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r1.w, r2.x, c10.y
add r0.w, -r0.z, c13
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
add r3.x, -r0.w, c10.y
mad r2.w, r0, c10.z, c10
mad r2.w, r2, r0, c11.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c11, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c11.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c10.x, c10.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c11.z, r2.w
mad r0.z, r0.x, c11.w, r0
mad r0.x, r0.w, c11.w, r0.y
mul r0.y, r0.z, c12.x
add r1.w, r1, c10.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r4.y, r0
mul r5.y, r0.x, c12.x
dsx r4.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.x, c14.x
mul r4.x, r0.y, c14
texldd r0.yw, r5, s1, r4.zwzw, r4
mad_pp r0.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c10.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r1.w, r0, v3
dp3 r1.x, r0, -v3
mul_pp r2.xy, r1.zyzw, r0.w
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c11.z, -v3
dp3_sat r0.w, r1, v1
pow r3, r0.w, c4.x
mov_pp r2.zw, c6.xyxy
mad_pp r2.xy, r2, c14.y, r2.zwzw
mov r2.w, r3.x
add_pp r3.x, r1.w, c10.y
mul r1.xy, r2, c5.x
texld r1.xyz, r1, s2
add_pp r2.xyz, -r1, c10.y
texldp r0.x, v5, s3
texld r0.w, v4, s4
mul r0.w, r0, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r2.w
frc_pp r3.y, r3.x
add_pp_sat r2.w, r3.x, -r3.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r4.zwzw, r4
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c1
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c11.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c9.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c3, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 129 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c14.y, c14.z
mad r0.w, r0, r0.z, c14
mad r0.w, r0, r0.z, c15.x
mad r0.w, r0, r0.z, c15.y
mad r0.z, r0.w, r0, c15
mul r0.z, r0, r0.y
add r1.w, r2.x, c12.y
add r0.w, -r0.z, c15
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c13.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c16, c16.y
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0.x, r0, c13.x
add r3.x, -r0.w, c12.y
mad r2.w, r0, c12.z, c12
mad r2.w, r2, r0, c13.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c13, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c13.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c12.x, c12.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c13.z, r2.w
mad r0.z, r0.x, c13.w, r0
mad r0.x, r0.w, c13.w, r0.y
mul r0.y, r0.z, c14.x
add r1.w, r1, c12.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c14.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c16.x
mul r3.x, r0.y, c16
texldd r0.yw, r5, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c12.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
mul_pp r2.xy, r1.zyzw, r0.w
mov_pp r2.zw, c8.xyxy
dp3 r1.x, r0, -v3
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c13.z, -v3
dp3_sat r0.w, r1, v1
pow r4, r0.w, c6.x
mad_pp r2.xy, r2, c16.y, r2.zwzw
mul r1.xy, r2, c7.x
texld r1.xyz, r1, s2
add_pp r2.xyz, -r1, c12.y
mov r2.w, r4.x
dp3 r0.w, v5, v5
rsq r4.x, r0.w
dp3_pp r1.w, r0, v3
texld r0, v5, s3
dp4 r0.y, r0, c17
rcp r4.x, r4.x
mul r0.x, r4, c1.w
add_pp r4.x, r1.w, c12.y
mad r0.y, -r0.x, c18.x, r0
mov r0.z, c2.x
dp3 r0.x, v4, v4
cmp r0.y, r0, c12, r0.z
texld r0.x, r0.x, s4
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r2.w
frc_pp r4.y, r4.x
add_pp_sat r2.w, r4.x, -r4.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r3.zwzw, r3
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c3
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c13.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mul_sat r0.w, r0, c13.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c11.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c5, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 130 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c14.y, c14.z
mad r0.w, r0, r0.z, c14
mad r0.w, r0, r0.z, c15.x
mad r0.w, r0, r0.z, c15.y
mad r0.z, r0.w, r0, c15
mul r0.z, r0, r0.y
dp3 r4.z, v5, v5
add r1.w, r2.x, c12.y
add r0.w, -r0.z, c15
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c13.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r4.x, r0.y, c16, c16.y
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0.x, r0, c13.x
add r3.x, -r0.w, c12.y
mad r2.w, r0, c12.z, c12
mad r2.w, r2, r0, c13.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c13, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c13.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c12.x, c12.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c13.z, r2.w
mad r0.z, r0.x, c13.w, r0
mad r0.x, r0.w, c13.w, r0.y
mul r0.y, r0.z, c14.x
add r1.w, r1, c12.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c14.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c16.x
mul r3.x, r0.y, c16
texldd r0.yw, r4, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c12.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
mul_pp r2.xy, r1.zyzw, r0.w
mov_pp r2.zw, c8.xyxy
dp3 r1.x, r0, -v3
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c13.z, -v3
dp3_sat r0.w, r1, v1
mad_pp r2.xy, r2, c16.y, r2.zwzw
mul r1.xy, r2, c7.x
pow r5, r0.w, c6.x
dp3_pp r1.w, r0, v3
texld r0, v5, s3
dp4 r0.y, r0, c17
texld r1.xyz, r1, s2
rsq r4.z, r4.z
rcp r0.x, r4.z
add_pp r4.z, r1.w, c12.y
mul r0.x, r0, c1.w
mad r0.x, -r0, c18, r0.y
mov r0.z, c2.x
cmp r0.y, r0.x, c12, r0.z
dp3 r0.x, v4, v4
add_pp r2.xyz, -r1, c12.y
texldd r3, r4, s0, r3.zwzw, r3
mov r2.w, r5.x
texld r0.w, v4, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r2.w
frc_pp r4.w, r4.z
add_pp_sat r2.w, r4.z, -r4
mul r0.xyz, r2.w, r0
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c3
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c13.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mul_sat r0.w, r0, c13.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c11.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c5, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Vector 11 [_DetailOffset]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 138 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c20, 0.25000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
rcp r1.x, r0.w
min r0.w, r0.x, r1
mul r0.w, r0, r1.x
mul r1.x, r0.w, r0.w
mad r1.y, r1.x, c17, c17.z
mad r1.y, r1, r1.x, c17.w
mad r1.y, r1, r1.x, c18.x
mad r1.y, r1, r1.x, c18
mad r2.x, r1.y, r1, c18.z
mul r2.x, r2, r0.w
add r1.xyz, r0, -r0.zxyw
add r2.z, r1.x, c15.y
rcp r4.z, v5.w
add r2.y, -r2.x, c18.w
add r0.w, r0.x, -r1
cmp r0.w, -r0, r2.x, r2.y
frc r2.w, r2.z
add_sat r2.y, r2.z, -r2.w
abs r2.z, v2.y
mad r1.xyz, r2.y, r1, r0.zxyw
add r2.y, r0, -r1.x
add r2.x, -r0.w, c16.w
cmp r0.w, v2.z, r0, r2.x
cmp r2.x, v2, r0.w, -r0.w
mad r4.x, r2, c19, c19.y
add r0.w, r2.y, c15.y
add r2.y, -r1.w, c15
mad r2.x, r1.w, c15.z, c15.w
mad r2.x, r1.w, r2, c16
add r3.x, -r2.z, c15.y
mad r2.w, r2.z, c15.z, c15
mad r2.w, r2, r2.z, c16.x
rsq r2.y, r2.y
rsq r3.x, r3.x
mad r1.w, r1, r2.x, c16.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v2.z, c15.x, c15.y
mul r2.y, r1.w, r2.x
mad r2.y, -r2, c16.z, r2.x
add_pp r0.xyz, r0.yxzw, -r1
mad r2.z, r2.w, r2, c16.y
rcp r3.x, r3.x
mul r2.w, r2.z, r3.x
cmp r2.z, v2.y, c15.x, c15.y
mul r3.x, r2.z, r2.w
mad r2.x, -r3, c16.z, r2.w
mad r2.y, r1.w, c16.w, r2
mad r1.w, r2.z, c16, r2.x
mul r2.x, r2.y, c17
dsy r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r4.y, r1.w, c17.x
dsx r3.w, r2.x
dsy r3.y, r2.x
dsx r2.xy, v2
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
add r2.x, r2.z, r2.w
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r3.z, r1.w, c19.x
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r0, r1
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r3.x, r2, c19
texldd r2.yw, r4, s1, r3.zwzw, r3
mad_pp r5.xy, r2.wyzw, c19.z, c19.w
mul_pp r2.xy, r5, r5
add_pp_sat r1.w, r2.x, r2.y
add_pp r0.w, -r1, c15.y
rsq_pp r0.w, r0.w
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
rcp_pp r5.z, r0.w
mul_pp r1.xy, r0.zyzw, r0.x
mov_pp r1.zw, c11.xyxy
mad_pp r1.xy, r1, c19.y, r1.zwzw
dp3 r0.x, r5, -v3
mul r0.xyz, r5, r0.x
mad r0.xyz, -r0, c16.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c9.x
mov r2.w, r0.x
mad r0.xy, v5, r4.z, c5
dp3_pp r1.w, r5, v3
texld r0.x, r0, s5
mul r1.xy, r1, c10.x
texld r1.xyz, r1, s2
add_pp r2.xyz, -r1, c15.y
mad r5.xy, v5, r4.z, c4
mov r0.w, r0.x
texld r0.x, r5, s5
mad r5.xy, v5, r4.z, c3
mov r0.z, r0.x
texld r0.x, r5, s5
mad r5.xy, v5, r4.z, c2
mov r0.y, r0.x
texld r0.x, r5, s5
mad r0, -v5.z, r4.z, r0
mov r4.w, c1.x
cmp r0, r0, c15.y, r4.w
dp4_pp r0.y, r0, c20.x
rcp r4.z, v4.w
mad r5.xy, v4, r4.z, c19.y
add_pp r4.z, r1.w, c15.y
dp3 r0.x, v4, v4
texldd r3, r4, s0, r3.zwzw, r3
texld r0.w, r5, s3
cmp r0.z, -v4, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c6
mul r0.xyz, r0, c7
mul r0.xyz, r0, r2.w
frc_pp r4.w, r4.z
add_pp_sat r2.w, r4.z, -r4
mul r0.xyz, r2.w, r0
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c6
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c16.z
mov r0.x, c13
add r0.xyz, c6, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c12.x
mul_sat r0.w, r0, c16.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c14.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c8, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Vector 11 [_DetailOffset]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 138 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c20, 0.25000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
rcp r1.x, r0.w
min r0.w, r0.x, r1
mul r0.w, r0, r1.x
mul r2.x, r0.w, r0.w
mad r1.x, r2, c17.y, c17.z
mad r1.x, r1, r2, c17.w
mad r1.x, r1, r2, c18
mad r2.y, r1.x, r2.x, c18
add r1.xyz, r0, -r0.zxyw
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r0.w
add r2.z, r1.x, c15.y
frc r0.w, r2.z
add_sat r2.z, r2, -r0.w
add r0.w, r0.x, -r1
add r2.y, -r2.x, c18.w
cmp r0.w, -r0, r2.x, r2.y
mad r2.xyz, r2.z, r1, r0.zxyw
add r1.y, r0, -r2.x
add r1.x, -r0.w, c16.w
cmp r1.x, v2.z, r0.w, r1
add r0.w, r1.y, c15.y
frc r2.w, r0
cmp r1.x, v2, r1, -r1
mad r4.z, r1.x, c19.x, c19.y
add r1.y, -r1.w, c15
mad r1.x, r1.w, c15.z, c15.w
mad r1.x, r1.w, r1, c16
mad r1.x, r1.w, r1, c16.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r3.x, r1, r1.y
abs r1.x, v2.y
cmp r1.w, v2.z, c15.x, c15.y
mul r3.y, r1.w, r3.x
add r1.z, -r1.x, c15.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
add_sat r0.w, r0, -r2
add_pp r0.xyz, r0.yxzw, -r2
mad_pp r0.xyz, r0.w, r0, r2
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r1.x, r1.y, r1, c16.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v2.y, c15, c15.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c16.z, r1
mad r1.x, r1, c16.w, r1.y
mad r3.x, -r3.y, c16.z, r3
mad r1.z, r1.w, c16.w, r3.x
mul r1.y, r1.z, c17.x
dsy r3.xy, v2
mul r3.xy, r3, r3
dsx r4.y, r1
mul r4.w, r1.x, c17.x
dsy r1.w, r1.y
dsx r1.xy, v2
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r3.x, r3
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1, c19
mul r1.z, r1.y, c19.x
texldd r3.yw, r4.zwzw, s1, r4, r1.zwzw
mad_pp r5.xy, r3.wyzw, c19.z, c19.w
rcp r3.w, v5.w
mul_pp r1.xy, r5, r5
add_pp_sat r0.w, r1.x, r1.y
add_pp r0.w, -r0, c15.y
rsq_pp r0.w, r0.w
rcp_pp r5.z, r0.w
mov_pp r0.zw, c11.xyxy
mad_pp r1.xy, r0, c19.y, r0.zwzw
dp3 r2.x, r5, -v3
mul r0.xyz, r5, r2.x
mul r1.xy, r1, c10.x
texld r2.xyz, r1, s2
dp3_pp r2.w, r5, v3
mad r0.xyz, -r0, c16.z, -v3
dp3_sat r1.x, r0, v1
pow r0, r1.x, c9.x
mad r5.xyz, v5, r3.w, c3
texld r1.x, r5, s5
add_pp r3.xyz, -r2, c15.y
mov r1.y, r0.x
mad r6.xyz, v5, r3.w, c5
texld r0.x, r6, s5
mov_pp r0.w, r0.x
mad r0.xyz, v5, r3.w, c4
texld r0.x, r0, s5
mov_pp r0.z, r0.x
mad r5.xyz, v5, r3.w, c2
mov_pp r0.y, r1.x
mov r0.x, c1
add r1.x, c15.y, -r0
texld r0.x, r5, s5
mad r0, r0, r1.x, c1.x
dp4_pp r0.z, r0, c20.x
rcp r1.x, v4.w
mad r5.xy, v4, r1.x, c19.y
add_pp r1.x, r2.w, c15.y
dp3 r0.x, v4, v4
frc_pp r3.w, r1.x
texld r0.w, r5, s3
cmp r0.y, -v4.z, c15.x, c15
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul r0.xyz, r0.w, c6
mul r0.xyz, r0, c7
mul r0.xyz, r0, r1.y
add_pp_sat r1.x, r1, -r3.w
mul r0.xyz, r1.x, r0
texldd r1, r4.zwzw, s0, r4, r1.zwzw
mul r4.xyz, r1.w, r0
mul_pp r2.w, r2, c6
mul_pp r0.y, r2.w, r0.w
mul_pp_sat r0.w, r0.y, c16.z
mov r0.x, c13
add r0.xyz, c6, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c12.x
mul_sat r0.w, r0, c16.z
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c14.x
mul_pp r1.xyz, r1, r2
mad_pp r1.xyz, r1, c8, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 137 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
rcp r1.x, r0.w
min r0.w, r0.x, r1
mul r0.w, r0, r1.x
mul r1.x, r0.w, r0.w
mad r1.y, r1.x, c14, c14.z
mad r1.y, r1, r1.x, c14.w
mad r1.y, r1, r1.x, c15.x
mad r1.y, r1, r1.x, c15
mad r2.x, r1.y, r1, c15.z
mul r2.x, r2, r0.w
add r1.xyz, r0, -r0.zxyw
add r2.z, r1.x, c12.y
add r4.xyz, v5, c17.xyyw
add r2.y, -r2.x, c15.w
add r0.w, r0.x, -r1
cmp r0.w, -r0, r2.x, r2.y
frc r2.w, r2.z
add_sat r2.y, r2.z, -r2.w
mad r1.xyz, r2.y, r1, r0.zxyw
add r2.y, r0, -r1.x
add r2.x, -r0.w, c13.w
cmp r0.w, v2.z, r0, r2.x
cmp r2.x, v2, r0.w, -r0.w
add r0.w, r2.y, c12.y
mad r6.x, r2, c16, c16.y
add r2.y, -r1.w, c12
mad r2.x, r1.w, c12.z, c12.w
mad r2.x, r1.w, r2, c13
rsq r2.y, r2.y
mad r1.w, r1, r2.x, c13.y
rcp r2.y, r2.y
mul r2.w, r1, r2.y
abs r1.w, v2.y
cmp r2.z, v2, c12.x, c12.y
mul r3.x, r2.z, r2.w
add r2.y, -r1.w, c12
mad r2.x, r1.w, c12.z, c12.w
mad r2.x, r2, r1.w, c13
rsq r2.y, r2.y
add_pp r0.xyz, r0.yxzw, -r1
mad r1.w, r2.x, r1, c13.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v2.y, c12.x, c12.y
mul r2.y, r1.w, r2.x
mad r2.x, -r2.y, c13.z, r2
mad r1.w, r1, c13, r2.x
mad r2.w, -r3.x, c13.z, r2
mad r2.y, r2.z, c13.w, r2.w
mul r2.x, r2.y, c14
dsy r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r6.y, r1.w, c14.x
dsx r5.w, r2.x
dsy r5.y, r2.x
dsx r2.xy, v2
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
add r2.x, r2.z, r2.w
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r5.z, r1.w, c16.x
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r0, r1
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r5.x, r2, c16
texldd r2.yw, r6, s1, r5.zwzw, r5
mad_pp r2.xy, r2.wyzw, c16.z, c16.w
mul_pp r2.zw, r2.xyxy, r2.xyxy
add_pp_sat r1.w, r2.z, r2
add_pp r0.w, -r1, c12.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r1.xy, r0.zyzw, r0.x
mov_pp r1.zw, c8.xyxy
mad_pp r1.xy, r1, c16.y, r1.zwzw
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c13.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c6.x
mov r1.w, r0.x
texld r0, r4, s3
dp4 r4.w, r0, c18
mul r1.xy, r1, c7.x
texld r1.xyz, r1, s2
add r0.xyz, v5, c17.yxyw
texld r0, r0, s3
dp4 r4.z, r0, c18
add r2.xyz, v5, c17.yyxw
texld r2, r2, s3
dp4 r4.y, r2, c18
add r0.xyz, v5, c17.x
texld r0, r0, s3
dp3 r2.x, v5, v5
dp4 r4.x, r0, c18
rsq r2.x, r2.x
rcp r0.x, r2.x
mul r0.x, r0, c1.w
mad r0, -r0.x, c17.z, r4
mov r2.x, c2
cmp r2, r0, c12.y, r2.x
dp4_pp r0.y, r2, c17.w
add_pp r2.x, r3.w, c12.y
dp3 r0.x, v4, v4
texld r0.x, r0.x, s4
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
add_pp r3.xyz, -r1, c12.y
mul r0.xyz, r0, r1.w
frc_pp r2.y, r2.x
add_pp_sat r1.w, r2.x, -r2.y
mul r0.xyz, r1.w, r0
texldd r2, r6, s0, r5.zwzw, r5
mul r4.xyz, r2.w, r0
mul_pp r1.w, r3, c3
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c13.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mul_sat r0.w, r0, c13.z
mad_pp r1.xyz, r0.w, r3, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c11.x
mul_pp r1.xyz, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 138 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r2.x, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r2.x
rcp r1.x, r0.w
min r0.w, r0.x, r2.x
mul r0.w, r0, r1.x
mul r1.w, r0, r0
mad r1.x, r1.w, c14.y, c14.z
mad r1.x, r1, r1.w, c14.w
mad r1.x, r1, r1.w, c15
mad r2.y, r1.x, r1.w, c15
add r1.xyz, r0, -r0.zxyw
mad r1.w, r2.y, r1, c15.z
mul r1.w, r1, r0
add r2.z, r1.x, c12.y
frc r0.w, r2.z
add_sat r2.z, r2, -r0.w
mad r1.xyz, r2.z, r1, r0.zxyw
add r2.z, -r2.x, c12.y
rsq r2.z, r2.z
add r2.y, -r1.w, c15.w
add r0.w, r0.x, -r2.x
cmp r0.w, -r0, r1, r2.y
add r2.y, r0, -r1.x
add r1.w, -r0, c13
cmp r1.w, v2.z, r0, r1
add r0.w, r2.y, c12.y
cmp r2.y, v2.x, r1.w, -r1.w
frc r1.w, r0
mad r7.x, r2.y, c16, c16.y
mad r2.y, r2.x, c12.z, c12.w
mad r2.y, r2.x, r2, c13.x
mad r2.x, r2, r2.y, c13.y
rcp r2.z, r2.z
mul r3.x, r2, r2.z
abs r2.x, v2.y
cmp r2.w, v2.z, c12.x, c12.y
mul r3.y, r2.w, r3.x
add r2.z, -r2.x, c12.y
mad r2.y, r2.x, c12.z, c12.w
mad r2.y, r2, r2.x, c13.x
rsq r2.z, r2.z
add_sat r0.w, r0, -r1
add_pp r0.xyz, r0.yxzw, -r1
mad_pp r0.xyz, r0.w, r0, r1
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r2.x, r2.y, r2, c13.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v2.y, c12, c12.y
mul r2.z, r2.x, r2.y
mad r2.y, -r2.z, c13.z, r2
mad r2.x, r2, c13.w, r2.y
mad r3.x, -r3.y, c13.z, r3
mad r2.z, r2.w, c13.w, r3.x
mul r2.y, r2.z, c14.x
dsy r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r7.y, r2.x, c14.x
dsx r6.w, r2.y
dsy r6.y, r2
dsx r2.xy, v2
mul r2.xy, r2, r2
add r2.x, r2, r2.y
add r2.y, r2.z, r2.w
rsq r2.x, r2.x
rcp r2.x, r2.x
rsq r2.y, r2.y
rcp r2.y, r2.y
mul r6.z, r2.x, c16.x
mul r6.x, r2.y, c16
texldd r2.yw, r7, s1, r6.zwzw, r6
mad_pp r3.xy, r2.wyzw, c16.z, c16.w
mul_pp r2.xy, r3, r3
add_pp_sat r0.w, r2.x, r2.y
add_pp r0.w, -r0, c12.y
rsq_pp r0.w, r0.w
rcp_pp r3.z, r0.w
mov_pp r0.zw, c8.xyxy
mad_pp r1.xy, r0, c16.y, r0.zwzw
mul r1.xy, r1, c7.x
texld r2.xyz, r1, s2
dp3 r1.z, r3, -v3
mul r0.xyz, r3, r1.z
mad r0.xyz, -r0, c13.z, -v3
dp3_sat r1.x, r0, v1
pow r0, r1.x, c6.x
mov r2.w, r0.x
add r1.xyz, v5, c17.xyyw
texld r1, r1, s3
dp4 r5.w, r1, c18
add r0.xyz, v5, c17.yxyw
texld r0, r0, s3
dp4 r5.z, r0, c18
add r1.xyz, v5, c17.yyxw
texld r1, r1, s3
dp4 r5.y, r1, c18
add r0.xyz, v5, c17.x
texld r0, r0, s3
dp3 r1.x, v5, v5
add_pp r4.xyz, -r2, c12.y
rsq r1.x, r1.x
dp4 r5.x, r0, c18
rcp r0.x, r1.x
mul r0.x, r0, c1.w
mov r1.x, c2
mad r0, -r0.x, c17.z, r5
cmp r0, r0, c12.y, r1.x
dp4_pp r0.y, r0, c17.w
dp3_pp r1.x, r3, v3
add_pp r1.y, r1.x, c12
frc_pp r1.z, r1.y
dp3 r0.x, v4, v4
texld r0.w, v4, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r2.w
add_pp_sat r1.y, r1, -r1.z
mul r0.xyz, r1.y, r0
mul_pp r2.w, r1.x, c3
texldd r1, r7, s0, r6.zwzw, r6
mul r3.xyz, r1.w, r0
mul_pp r0.y, r2.w, r0.w
mul_pp_sat r0.w, r0.y, c13.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mad_pp r0.xyz, r0, v6.x, r3
mul_sat r0.w, r0, c13.z
mad_pp r3.xyz, r0.w, r4, r2
mul r2.xyz, r0, c11.x
mul_pp r1.xyz, r1, r3
mad_pp r1.xyz, r1, c5, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 120 ALU, 8 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
rcp r1.x, r0.w
min r0.w, r0.x, r1
mul r0.w, r0, r1.x
mul r1.x, r0.w, r0.w
mad r1.y, r1.x, c12, c12.z
mad r1.y, r1, r1.x, c12.w
mad r1.y, r1, r1.x, c13.x
mad r1.y, r1, r1.x, c13
mad r1.x, r1.y, r1, c13.z
mul r2.x, r1, r0.w
add r1.xyz, r0, -r0.zxyw
add r2.z, r1.x, c10.y
add r2.y, -r2.x, c13.w
add r0.w, r0.x, -r1
cmp r0.w, -r0, r2.x, r2.y
add r2.x, -r0.w, c11.w
cmp r0.w, v2.z, r0, r2.x
cmp r2.x, v2, r0.w, -r0.w
mad r5.x, r2, c14, c14.y
frc r2.y, r2.z
add_sat r2.y, r2.z, -r2
mad r1.xyz, r2.y, r1, r0.zxyw
abs r2.z, v2.y
add r0.w, r0.y, -r1.x
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r1.w, r2, c11
add r3.x, -r2.z, c10.y
mad r2.w, r2.z, c10.z, c10
mad r2.w, r2, r2.z, c11.x
rsq r2.y, r2.y
rsq r3.x, r3.x
mad r1.w, r1, r2.x, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v2.z, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r2.y, -r2, c11.z, r2.x
add_pp r0.xyz, r0.yxzw, -r1
mad r2.z, r2.w, r2, c11.y
rcp r3.x, r3.x
mul r2.w, r2.z, r3.x
cmp r2.z, v2.y, c10.x, c10.y
mul r3.x, r2.z, r2.w
mad r2.x, -r3, c11.z, r2.w
mad r2.y, r1.w, c11.w, r2
mad r1.w, r2.z, c11, r2.x
mul r2.x, r2.y, c12
dsy r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r5.y, r1.w, c12.x
dsx r4.w, r2.x
dsy r4.y, r2.x
dsx r2.xy, v2
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
add r2.x, r2.z, r2.w
rsq r1.w, r1.w
rcp r1.w, r1.w
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r4.z, r1.w, c14.x
mul r4.x, r2, c14
texldd r2.yw, r5, s1, r4.zwzw, r4
mad_pp r3.xy, r2.wyzw, c14.z, c14.w
add r0.w, r0, c10.y
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r0, r1
mul_pp r2.xy, r3, r3
add_pp_sat r1.w, r2.x, r2.y
add_pp r1.w, -r1, c10.y
rsq_pp r0.w, r1.w
rcp_pp r3.z, r0.w
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
dp3 r0.w, r3, -v3
mul_pp r1.xy, r0.zyzw, r0.x
mul r0.xyz, r3, r0.w
mov_pp r1.zw, c6.xyxy
mad_pp r1.xy, r1, c14.y, r1.zwzw
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r1.z, r0, v1
pow r0, r1.z, c4.x
mov r0.z, r0.x
dp3_pp r0.y, r3, v3
add_pp r0.w, r0.y, c10.y
mul r1.xy, r1, c5.x
texld r1.xyz, r1, s2
dp3 r0.x, v4, v4
texld r0.x, r0.x, s3
mul r3.xyz, r0.x, c1
mul r3.xyz, r3, c2
mul_pp r0.y, r0, c1.w
mul_pp r0.y, r0, r0.x
add_pp r2.xyz, -r1, c10.y
mul r3.xyz, r3, r0.z
frc_pp r1.w, r0
add_pp_sat r0.z, r0.w, -r1.w
mul_pp_sat r0.w, r0.y, c11.z
mul r3.xyz, r0.z, r3
texldd r4, r5, s0, r4.zwzw, r4
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r3.xyz, r4.w, r3
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v5.x, r3
mul r2.xyz, r0, c9.x
mul_pp r1.xyz, r4, r1
mad_pp r1.xyz, r1, c3, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 118 ALU, 7 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord8 v4.x
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
rcp r1.x, r0.w
min r0.w, r0.x, r1
mul r0.w, r0, r1.x
mul r1.x, r0.w, r0.w
mad r1.y, r1.x, c12, c12.z
mad r1.y, r1, r1.x, c12.w
mad r1.y, r1, r1.x, c13.x
mad r1.y, r1, r1.x, c13
mad r2.x, r1.y, r1, c13.z
mul r2.x, r2, r0.w
add r1.xyz, r0, -r0.zxyw
add r2.z, r1.x, c10.y
add r2.y, -r2.x, c13.w
add r0.w, r0.x, -r1
cmp r0.w, -r0, r2.x, r2.y
frc r2.w, r2.z
add_sat r2.y, r2.z, -r2.w
abs r2.z, v2.y
mad r1.xyz, r2.y, r1, r0.zxyw
add r2.y, r0, -r1.x
add r2.x, -r0.w, c11.w
cmp r0.w, v2.z, r0, r2.x
cmp r2.x, v2, r0.w, -r0.w
add r0.w, r2.y, c10.y
mad r5.x, r2, c14, c14.y
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r1.w, r2, c11
add r3.x, -r2.z, c10.y
mad r2.w, r2.z, c10.z, c10
mad r2.w, r2, r2.z, c11.x
rsq r2.y, r2.y
rsq r3.x, r3.x
mad r1.w, r1, r2.x, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v2.z, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r2.y, -r2, c11.z, r2.x
add_pp r0.xyz, r0.yxzw, -r1
mad r2.z, r2.w, r2, c11.y
rcp r3.x, r3.x
mul r2.w, r2.z, r3.x
cmp r2.z, v2.y, c10.x, c10.y
mul r3.x, r2.z, r2.w
mad r2.x, -r3, c11.z, r2.w
mad r2.y, r1.w, c11.w, r2
mad r1.w, r2.z, c11, r2.x
mul r2.x, r2.y, c12
dsy r2.zw, v2.xyxy
mul r2.zw, r2, r2
dsy r4.y, r2.x
dsx r4.w, r2.x
dsx r2.xy, v2
mul r2.xy, r2, r2
mul r5.y, r1.w, c12.x
add r1.w, r2.x, r2.y
add r2.x, r2.z, r2.w
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r4.z, r1.w, c14.x
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r0, r1
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r4.x, r2, c14
texldd r2.yw, r5, s1, r4.zwzw, r4
mad_pp r2.xy, r2.wyzw, c14.z, c14.w
mul_pp r2.zw, r2.xyxy, r2.xyxy
add_pp_sat r1.w, r2.z, r2
add_pp r0.w, -r1, c10.y
rsq_pp r0.w, r0.w
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
rcp_pp r2.z, r0.w
mul_pp r1.xy, r0.zyzw, r0.x
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
mov_pp r1.zw, c6.xyxy
mad_pp r1.xy, r1, c14.y, r1.zwzw
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c4.x
dp3_pp r0.w, r2, v3
mov r2.y, r0.x
add_pp r1.w, r0, c10.y
frc_pp r2.x, r1.w
mul r1.xy, r1, c5.x
texld r1.xyz, r1, s2
mov r0.xyz, c1
mul r0.xyz, c2, r0
add_pp r3.xyz, -r1, c10.y
mul r0.xyz, r0, r2.y
add_pp_sat r1.w, r1, -r2.x
mul r0.xyz, r1.w, r0
texldd r2, r5, s0, r4.zwzw, r4
mul r4.xyz, r2.w, r0
mul_pp r0.y, r0.w, c1.w
mul_pp_sat r0.w, r0.y, c11.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r3, r1
mad_pp r0.xyz, r0, v4.x, r4
mul r3.xyz, r0, c9.x
mul_pp r1.xyz, r2, r1
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 125 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r1.w, r2.x, c10.y
add r0.w, -r0.z, c13
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
add r3.x, -r0.w, c10.y
mad r2.w, r0, c10.z, c10
mad r2.w, r2, r0, c11.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c11, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c11.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c10.x, c10.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c11.z, r2.w
mad r0.z, r0.x, c11.w, r0
mad r0.x, r0.w, c11.w, r0.y
mul r0.y, r0.z, c12.x
add r1.w, r1, c10.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.yw, r5, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c10.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r1.w, r0, v3
dp3 r1.x, r0, -v3
mul_pp r2.xy, r1.zyzw, r0.w
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c11.z, -v3
dp3_sat r0.w, r1, v1
pow r4, r0.w, c4.x
mov_pp r2.zw, c6.xyxy
mad_pp r2.xy, r2, c14.y, r2.zwzw
mul r1.xy, r2, c5.x
texld r1.xyz, r1, s2
dp3 r0.x, v4, v4
add_pp r2.xyz, -r1, c10.y
mov r2.w, r4.x
rcp r0.w, v4.w
mad r4.xy, v4, r0.w, c14.y
texld r0.w, r4, s3
add_pp r4.x, r1.w, c10.y
cmp r0.y, -v4.z, c10.x, c10
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.w, r0.y, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r2.w
frc_pp r4.y, r4.x
add_pp_sat r2.w, r4.x, -r4.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r3.zwzw, r3
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c1
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c11.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v5.x, r4
mul r2.xyz, r0, c9.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c3, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 121 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r1.w, r2.x, c10.y
add r0.w, -r0.z, c13
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
add r3.x, -r0.w, c10.y
mad r2.w, r0, c10.z, c10
mad r2.w, r2, r0, c11.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c11, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c11.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c10.x, c10.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c11.z, r2.w
mad r0.z, r0.x, c11.w, r0
mad r0.x, r0.w, c11.w, r0.y
mul r0.y, r0.z, c12.x
add r1.w, r1, c10.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c12.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c14.x
mul r3.x, r0.y, c14
texldd r0.yw, r5, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c10.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r1.w, r0, v3
dp3 r1.x, r0, -v3
mul_pp r2.xy, r1.zyzw, r0.w
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c11.z, -v3
dp3_sat r0.w, r1, v1
pow r4, r0.w, c4.x
mov_pp r2.zw, c6.xyxy
mad_pp r2.xy, r2, c14.y, r2.zwzw
mov r2.w, r4.x
add_pp r4.x, r1.w, c10.y
mul r1.xy, r2, c5.x
texld r1.xyz, r1, s2
dp3 r0.x, v4, v4
add_pp r2.xyz, -r1, c10.y
texld r0.x, r0.x, s3
texld r0.w, v4, s4
mul r0.w, r0.x, r0
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r2.w
frc_pp r4.y, r4.x
add_pp_sat r2.w, r4.x, -r4.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r3.zwzw, r3
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c1
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c11.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v5.x, r4
mul r2.xyz, r0, c9.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c3, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 119 ALU, 8 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r1.x, v2.z
max r0.w, r0.x, r1.x
rcp r1.y, r0.w
min r0.w, r0.x, r1.x
mul r0.w, r0, r1.y
mul r1.y, r0.w, r0.w
add r2.xyz, r0, -r0.zxyw
mad r1.z, r1.y, c12.y, c12
mad r1.z, r1, r1.y, c12.w
mad r1.z, r1, r1.y, c13.x
mad r1.z, r1, r1.y, c13.y
mad r1.y, r1.z, r1, c13.z
mul r1.y, r1, r0.w
add r1.w, r2.x, c10.y
add r1.z, -r1.y, c13.w
add r0.w, r0.x, -r1.x
cmp r0.w, -r0, r1.y, r1.z
add r1.y, -r0.w, c11.w
cmp r0.w, v2.z, r0, r1.y
cmp r1.y, v2.x, r0.w, -r0.w
mad r5.x, r1.y, c14, c14.y
frc r1.z, r1.w
add_sat r1.z, r1.w, -r1
mad r2.xyz, r1.z, r2, r0.zxyw
abs r1.w, v2.y
add r0.w, r0.y, -r2.x
add r1.z, -r1.x, c10.y
mad r1.y, r1.x, c10.z, c10.w
mad r1.y, r1.x, r1, c11.x
add r3.x, -r1.w, c10.y
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r1.z, r1.z
rsq r3.x, r3.x
mad r1.x, r1, r1.y, c11.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v2.z, c10, c10.y
mul r1.z, r1.x, r1.y
mad r1.z, -r1, c11, r1.y
add_pp r0.xyz, r0.yxzw, -r2
mad r1.w, r2, r1, c11.y
rcp r3.x, r3.x
mul r2.w, r1, r3.x
cmp r1.w, v2.y, c10.x, c10.y
mul r3.x, r1.w, r2.w
mad r1.y, -r3.x, c11.z, r2.w
mad r1.z, r1.x, c11.w, r1
mad r1.x, r1.w, c11.w, r1.y
mul r1.y, r1.z, c12.x
add r0.w, r0, c10.y
frc r2.w, r0
add_sat r0.w, r0, -r2
mad_pp r0.xyz, r0.w, r0, r2
dsy r1.zw, v2.xyxy
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul r1.zw, r1, r1
dsy r4.y, r1
mul r5.y, r1.x, c12.x
dsx r4.w, r1.y
dsx r1.xy, v2
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r1.z, r1.w
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.z, r1.x, c14.x
mul r4.x, r1.y, c14
texldd r1.yw, r5, s1, r4.zwzw, r4
mad_pp r1.xy, r1.wyzw, c14.z, c14.w
mul_pp r1.zw, r1.xyxy, r1.xyxy
add_pp_sat r1.z, r1, r1.w
add_pp r1.z, -r1, c10.y
rsq_pp r0.w, r1.z
rcp_pp r1.z, r0.w
dp3 r0.w, r1, -v3
mul_pp r2.xy, r0.zyzw, r0.x
mul r0.xyz, r1, r0.w
dp3_pp r1.x, r1, v3
mov_pp r2.zw, c6.xyxy
mad_pp r2.xy, r2, c14.y, r2.zwzw
add_pp r1.y, r1.x, c10
frc_pp r1.z, r1.y
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c4.x
mul r2.xy, r2, c5.x
texld r2.xyz, r2, s2
add_pp r3.xyz, -r2, c10.y
mov r1.w, r0.x
texld r0.w, v4, s3
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r1.w
add_pp_sat r1.y, r1, -r1.z
mul r0.xyz, r1.y, r0
mul_pp r2.w, r1.x, c1
texldd r1, r5, s0, r4.zwzw, r4
mul r4.xyz, r1.w, r0
mul_pp r0.y, r2.w, r0.w
mul_pp_sat r0.w, r0.y, c11.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r0.xyz, r0, v5.x, r4
mul r3.xyz, r0, c9.x
mul_pp r1.xyz, r1, r2
mad_pp r1.xyz, r1, c3, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 130 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r1.w, r2.x, c11.y
add r0.w, -r0.z, c14
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
add r3.x, -r0.w, c11.y
mad r2.w, r0, c11.z, c11
mad r2.w, r2, r0, c12.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c12, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c12.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c11.x, c11.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c12.z, r2.w
mad r0.z, r0.x, c12.w, r0
mad r0.x, r0.w, c12.w, r0.y
mul r0.y, r0.z, c13.x
add r1.w, r1, c11.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c13.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r5, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c11.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r1.w, r0, v3
dp3 r1.x, r0, -v3
mul_pp r2.xy, r1.zyzw, r0.w
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c12.z, -v3
dp3_sat r0.w, r1, v1
pow r4, r0.w, c5.x
mov_pp r2.zw, c7.xyxy
mad_pp r2.xy, r2, c15.y, r2.zwzw
mul r1.xy, r2, c6.x
texld r1.xyz, r1, s2
add_pp r2.xyz, -r1, c11.y
mov r2.w, r4.x
texldp r0.x, v5, s5
rcp r0.y, v5.w
mad r0.y, -v5.z, r0, r0.x
mov r0.z, c1.x
cmp r0.y, r0, c11, r0.z
rcp r0.x, v4.w
mad r4.xy, v4, r0.x, c15.y
texld r0.w, r4, s3
add_pp r4.x, r1.w, c11.y
dp3 r0.x, v4, v4
cmp r0.z, -v4, c11.x, c11.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul r0.xyz, r0, r2.w
frc_pp r4.y, r4.x
add_pp_sat r2.w, r4.x, -r4.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r3.zwzw, r3
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c2
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c12.z
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c8.x
mul_sat r0.w, r0, c12.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c10.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c4, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 129 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c13.y, c13.z
mad r0.w, r0, r0.z, c13
mad r0.w, r0, r0.z, c14.x
mad r0.w, r0, r0.z, c14.y
mad r0.z, r0.w, r0, c14
mul r0.z, r0, r0.y
add r1.w, r2.x, c11.y
add r0.w, -r0.z, c14
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c12.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c15, c15.y
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0.x, r0, c12.x
add r3.x, -r0.w, c11.y
mad r2.w, r0, c11.z, c11
mad r2.w, r2, r0, c12.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c12, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c12.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c11.x, c11.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c12.z, r2.w
mad r0.z, r0.x, c12.w, r0
mad r0.x, r0.w, c12.w, r0.y
mul r0.y, r0.z, c13.x
add r1.w, r1, c11.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c13.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r5, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c11.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r1.w, r0, v3
dp3 r1.x, r0, -v3
mul_pp r2.xy, r1.zyzw, r0.w
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c12.z, -v3
dp3_sat r0.w, r1, v1
pow r4, r0.w, c5.x
mov_pp r2.zw, c7.xyxy
mad_pp r2.xy, r2, c15.y, r2.zwzw
mul r1.xy, r2, c6.x
texld r1.xyz, r1, s2
mov r0.x, c1
add r0.y, c11, -r0.x
texldp r0.x, v5, s5
mad r0.y, r0.x, r0, c1.x
dp3 r0.x, v4, v4
add_pp r2.xyz, -r1, c11.y
mov r2.w, r4.x
rcp r0.z, v4.w
mad r4.xy, v4, r0.z, c15.y
texld r0.w, r4, s3
add_pp r4.x, r1.w, c11.y
cmp r0.z, -v4, c11.x, c11.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul r0.xyz, r0, r2.w
frc_pp r4.y, r4.x
add_pp_sat r2.w, r4.x, -r4.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r3.zwzw, r3
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c2
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c12.z
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c8.x
mul_sat r0.w, r0, c12.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c10.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c4, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 119 ALU, 8 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r3.y, v2
add r2.w, -r3.y, c10.y
mad r3.x, r3.y, c10.z, c10.w
mad r3.x, r3, r3.y, c11
mad r3.x, r3, r3.y, c11.y
rsq r2.w, r2.w
rcp r2.w, r2.w
dsx r3.zw, v2.xyxy
dsy r4.xy, v2
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
mul r4.xy, r4, r4
mul r3.x, r3, r2.w
cmp r3.y, v2, c10.x, c10
min r1.x, r0, r1.w
rcp r0.w, r0.w
mul r1.y, r1.x, r0.w
mul r1.x, r1.y, r1.y
mad r0.w, r1.x, c12.y, c12.z
mad r0.w, r0, r1.x, c12
mad r0.w, r0, r1.x, c13.x
mad r0.w, r0, r1.x, c13.y
mad r0.w, r0, r1.x, c13.z
mul r2.y, r0.w, r1
add r1.xyz, r0, -r0.zxyw
add r2.x, r1, c10.y
mul r2.w, r3.y, r3.x
add r0.w, -r2.y, c13
add r2.z, r0.x, -r1.w
cmp r2.z, -r2, r2.y, r0.w
frc r0.w, r2.x
add_sat r0.w, r2.x, -r0
mad r1.xyz, r0.w, r1, r0.zxyw
add r0.w, r0.y, -r1.x
add r2.y, -r2.z, c11.w
cmp r2.x, v2.z, r2.z, r2.y
cmp r2.x, v2, r2, -r2
mad r2.z, r2.x, c14.x, c14.y
add r2.x, -r1.w, c10.y
mad r2.y, r1.w, c10.z, c10.w
mad r2.y, r1.w, r2, c11.x
rsq r2.x, r2.x
mad r1.w, r1, r2.y, c11.y
rcp r2.x, r2.x
mul r2.x, r1.w, r2
cmp r1.w, v2.z, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r2.x, -r2.y, c11.z, r2
mad r1.w, r1, c11, r2.x
mad r2.y, -r2.w, c11.z, r3.x
mad r2.x, r3.y, c11.w, r2.y
mul r1.w, r1, c12.x
dsy r3.y, r1.w
dsx r2.y, r1.w
add r1.w, r4.x, r4.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r3.x, r1.w, c14
add r1.w, r0, c10.y
frc r0.w, r1
add_pp r0.xyz, r0.yxzw, -r1
add_sat r0.w, r1, -r0
mad_pp r0.xyz, r0.w, r0, r1
mul r2.w, r2.x, c12.x
mul r3.zw, r3, r3
add r2.x, r3.z, r3.w
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r2.x, r2, c14
texldd r4.yw, r2.zwzw, s1, r2, r3
mad_pp r4.xy, r4.wyzw, c14.z, c14.w
mul_pp r3.zw, r4.xyxy, r4.xyxy
add_pp_sat r1.w, r3.z, r3
add_pp r1.w, -r1, c10.y
rsq_pp r0.w, r1.w
rcp_pp r4.z, r0.w
abs_pp r0.x, r0
rcp_pp r0.w, r0.x
mul_pp r1.xy, r0.zyzw, r0.w
mov_pp r1.zw, c6.xyxy
dp3_pp r0.w, r4, v3
add_pp r3.w, r0, c10.y
dp3 r0.x, r4, -v3
mul r0.xyz, r4, r0.x
mad r0.xyz, -r0, c11.z, -v3
dp3_sat r0.z, r0, v1
mad_pp r1.xy, r1, c14.y, r1.zwzw
pow r5, r0.z, c4.x
mul r0.xy, r1, c5.x
texld r0.xyz, r0, s2
mov r1.w, r5.x
texldp r5.x, v4, s3
mul r4.xyz, r5.x, c1
mul r4.xyz, r4, c2
mul_pp r0.w, r0, c1
mul_pp r0.w, r0, r5.x
mul r4.xyz, r4, r1.w
frc_pp r3.z, r3.w
add_pp_sat r1.w, r3, -r3.z
mul r4.xyz, r1.w, r4
texldd r2, r2.zwzw, s0, r2, r3
add_pp r1.xyz, -r0, c10.y
mul r3.xyz, r2.w, r4
mov r1.w, c8.x
mul_pp_sat r0.w, r0, c11.z
add r4.xyz, c1, r1.w
mad_sat r4.xyz, r4, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r1, r0
mad_pp r3.xyz, r4, v5.x, r3
mul r0.xyz, r3, c9.x
mul_pp r1.xyz, r2, r1
mad_pp r0.xyz, r1, c3, r0
mul_pp oC0.xyz, r0, r3
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 120 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, 2.00000000, -1.00000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c12.y, c12.z
mad r0.w, r0, r0.z, c12
mad r0.w, r0, r0.z, c13.x
mad r0.w, r0, r0.z, c13.y
mad r0.z, r0.w, r0, c13
mul r0.z, r0, r0.y
add r1.w, r2.x, c10.y
add r0.w, -r0.z, c13
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c11.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c14, c14.y
add r0.z, -r0.x, c10.y
mad r0.y, r0.x, c10.z, c10.w
mad r0.y, r0.x, r0, c11.x
add r3.x, -r0.w, c10.y
mad r2.w, r0, c10.z, c10
mad r2.w, r2, r0, c11.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c11.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c11, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c11.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c10.x, c10.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c11.z, r2.w
mad r0.z, r0.x, c11.w, r0
mad r0.x, r0.w, c11.w, r0.y
mul r0.y, r0.z, c12.x
add r1.w, r1, c10.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsy r4.y, r0
mul r5.y, r0.x, c12.x
dsx r4.w, r0.y
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.x, c14.x
mul r4.x, r0.y, c14
texldd r0.yw, r5, s1, r4.zwzw, r4
mad_pp r0.xy, r0.wyzw, c14.z, c14.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c10.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
dp3_pp r1.w, r0, v3
dp3 r1.x, r0, -v3
mul_pp r2.xy, r1.zyzw, r0.w
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c11.z, -v3
dp3_sat r0.w, r1, v1
pow r3, r0.w, c4.x
mov_pp r2.zw, c6.xyxy
mad_pp r2.xy, r2, c14.y, r2.zwzw
mov r2.w, r3.x
add_pp r3.x, r1.w, c10.y
mul r1.xy, r2, c5.x
texld r1.xyz, r1, s2
add_pp r2.xyz, -r1, c10.y
texldp r0.x, v5, s3
texld r0.w, v4, s4
mul r0.w, r0, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r2.w
frc_pp r3.y, r3.x
add_pp_sat r2.w, r3.x, -r3.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r4.zwzw, r4
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c1
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c11.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c7.x
mul_sat r0.w, r0, c11.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c9.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c3, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 129 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c14.y, c14.z
mad r0.w, r0, r0.z, c14
mad r0.w, r0, r0.z, c15.x
mad r0.w, r0, r0.z, c15.y
mad r0.z, r0.w, r0, c15
mul r0.z, r0, r0.y
add r1.w, r2.x, c12.y
add r0.w, -r0.z, c15
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c13.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r5.x, r0.y, c16, c16.y
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0.x, r0, c13.x
add r3.x, -r0.w, c12.y
mad r2.w, r0, c12.z, c12
mad r2.w, r2, r0, c13.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c13, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c13.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c12.x, c12.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c13.z, r2.w
mad r0.z, r0.x, c13.w, r0
mad r0.x, r0.w, c13.w, r0.y
mul r0.y, r0.z, c14.x
add r1.w, r1, c12.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r5.y, r0.x, c14.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c16.x
mul r3.x, r0.y, c16
texldd r0.yw, r5, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c12.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
mul_pp r2.xy, r1.zyzw, r0.w
mov_pp r2.zw, c8.xyxy
dp3 r1.x, r0, -v3
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c13.z, -v3
dp3_sat r0.w, r1, v1
pow r4, r0.w, c6.x
mad_pp r2.xy, r2, c16.y, r2.zwzw
mul r1.xy, r2, c7.x
texld r1.xyz, r1, s2
add_pp r2.xyz, -r1, c12.y
mov r2.w, r4.x
dp3 r0.w, v5, v5
rsq r4.x, r0.w
dp3_pp r1.w, r0, v3
texld r0, v5, s3
dp4 r0.y, r0, c17
rcp r4.x, r4.x
mul r0.x, r4, c1.w
add_pp r4.x, r1.w, c12.y
mad r0.y, -r0.x, c18.x, r0
mov r0.z, c2.x
dp3 r0.x, v4, v4
cmp r0.y, r0, c12, r0.z
texld r0.x, r0.x, s4
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r2.w
frc_pp r4.y, r4.x
add_pp_sat r2.w, r4.x, -r4.y
mul r0.xyz, r2.w, r0
texldd r3, r5, s0, r3.zwzw, r3
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c3
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c13.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mul_sat r0.w, r0, c13.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c11.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c5, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 130 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 0.97000003, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r1.xyz, v2
abs r0.x, v2.z
max r0.y, r1.x, r0.x
rcp r0.z, r0.y
min r0.y, r1.x, r0.x
mul r0.y, r0, r0.z
mul r0.z, r0.y, r0.y
add r2.xyz, r1, -r1.zxyw
mad r0.w, r0.z, c14.y, c14.z
mad r0.w, r0, r0.z, c14
mad r0.w, r0, r0.z, c15.x
mad r0.w, r0, r0.z, c15.y
mad r0.z, r0.w, r0, c15
mul r0.z, r0, r0.y
dp3 r4.z, v5, v5
add r1.w, r2.x, c12.y
add r0.w, -r0.z, c15
add r0.y, r1.x, -r0.x
cmp r0.y, -r0, r0.z, r0.w
add r0.z, -r0.y, c13.w
cmp r0.y, v2.z, r0, r0.z
frc r0.w, r1
add_sat r0.w, r1, -r0
mad r2.xyz, r0.w, r2, r1.zxyw
abs r0.w, v2.y
add r1.w, r1.y, -r2.x
cmp r0.y, v2.x, r0, -r0
mad r4.x, r0.y, c16, c16.y
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0.x, r0, c13.x
add r3.x, -r0.w, c12.y
mad r2.w, r0, c12.z, c12
mad r2.w, r2, r0, c13.x
rsq r0.z, r0.z
rsq r3.x, r3.x
mad r0.x, r0, r0.y, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.z, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c13, r0.y
add_pp r1.xyz, r1.yxzw, -r2
mad r0.w, r2, r0, c13.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v2.y, c12.x, c12.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c13.z, r2.w
mad r0.z, r0.x, c13.w, r0
mad r0.x, r0.w, c13.w, r0.y
mul r0.y, r0.z, c14.x
add r1.w, r1, c12.y
frc r2.w, r1
add_sat r1.w, r1, -r2
mad_pp r1.xyz, r1.w, r1, r2
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c14.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c16.x
mul r3.x, r0.y, c16
texldd r0.yw, r4, s1, r3.zwzw, r3
mad_pp r0.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.zw, r0.xyxy, r0.xyxy
add_pp_sat r0.z, r0, r0.w
abs_pp r0.w, r1.x
rcp_pp r0.w, r0.w
add_pp r0.z, -r0, c12.y
rsq_pp r0.z, r0.z
rcp_pp r0.z, r0.z
mul_pp r2.xy, r1.zyzw, r0.w
mov_pp r2.zw, c8.xyxy
dp3 r1.x, r0, -v3
mul r1.xyz, r0, r1.x
mad r1.xyz, -r1, c13.z, -v3
dp3_sat r0.w, r1, v1
mad_pp r2.xy, r2, c16.y, r2.zwzw
mul r1.xy, r2, c7.x
pow r5, r0.w, c6.x
dp3_pp r1.w, r0, v3
texld r0, v5, s3
dp4 r0.y, r0, c17
texld r1.xyz, r1, s2
rsq r4.z, r4.z
rcp r0.x, r4.z
add_pp r4.z, r1.w, c12.y
mul r0.x, r0, c1.w
mad r0.x, -r0, c18, r0.y
mov r0.z, c2.x
cmp r0.y, r0.x, c12, r0.z
dp3 r0.x, v4, v4
add_pp r2.xyz, -r1, c12.y
texldd r3, r4, s0, r3.zwzw, r3
mov r2.w, r5.x
texld r0.w, v4, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r2.w
frc_pp r4.w, r4.z
add_pp_sat r2.w, r4.z, -r4
mul r0.xyz, r2.w, r0
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c3
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c13.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mul_sat r0.w, r0, c13.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c11.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c5, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Vector 11 [_DetailOffset]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 138 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c20, 0.25000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
rcp r1.x, r0.w
min r0.w, r0.x, r1
mul r0.w, r0, r1.x
mul r1.x, r0.w, r0.w
mad r1.y, r1.x, c17, c17.z
mad r1.y, r1, r1.x, c17.w
mad r1.y, r1, r1.x, c18.x
mad r1.y, r1, r1.x, c18
mad r2.x, r1.y, r1, c18.z
mul r2.x, r2, r0.w
add r1.xyz, r0, -r0.zxyw
add r2.z, r1.x, c15.y
rcp r4.z, v5.w
add r2.y, -r2.x, c18.w
add r0.w, r0.x, -r1
cmp r0.w, -r0, r2.x, r2.y
frc r2.w, r2.z
add_sat r2.y, r2.z, -r2.w
abs r2.z, v2.y
mad r1.xyz, r2.y, r1, r0.zxyw
add r2.y, r0, -r1.x
add r2.x, -r0.w, c16.w
cmp r0.w, v2.z, r0, r2.x
cmp r2.x, v2, r0.w, -r0.w
mad r4.x, r2, c19, c19.y
add r0.w, r2.y, c15.y
add r2.y, -r1.w, c15
mad r2.x, r1.w, c15.z, c15.w
mad r2.x, r1.w, r2, c16
add r3.x, -r2.z, c15.y
mad r2.w, r2.z, c15.z, c15
mad r2.w, r2, r2.z, c16.x
rsq r2.y, r2.y
rsq r3.x, r3.x
mad r1.w, r1, r2.x, c16.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v2.z, c15.x, c15.y
mul r2.y, r1.w, r2.x
mad r2.y, -r2, c16.z, r2.x
add_pp r0.xyz, r0.yxzw, -r1
mad r2.z, r2.w, r2, c16.y
rcp r3.x, r3.x
mul r2.w, r2.z, r3.x
cmp r2.z, v2.y, c15.x, c15.y
mul r3.x, r2.z, r2.w
mad r2.x, -r3, c16.z, r2.w
mad r2.y, r1.w, c16.w, r2
mad r1.w, r2.z, c16, r2.x
mul r2.x, r2.y, c17
dsy r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r4.y, r1.w, c17.x
dsx r3.w, r2.x
dsy r3.y, r2.x
dsx r2.xy, v2
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
add r2.x, r2.z, r2.w
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r3.z, r1.w, c19.x
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r0, r1
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r3.x, r2, c19
texldd r2.yw, r4, s1, r3.zwzw, r3
mad_pp r5.xy, r2.wyzw, c19.z, c19.w
mul_pp r2.xy, r5, r5
add_pp_sat r1.w, r2.x, r2.y
add_pp r0.w, -r1, c15.y
rsq_pp r0.w, r0.w
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
rcp_pp r5.z, r0.w
mul_pp r1.xy, r0.zyzw, r0.x
mov_pp r1.zw, c11.xyxy
mad_pp r1.xy, r1, c19.y, r1.zwzw
dp3 r0.x, r5, -v3
mul r0.xyz, r5, r0.x
mad r0.xyz, -r0, c16.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c9.x
mov r2.w, r0.x
mad r0.xy, v5, r4.z, c5
dp3_pp r1.w, r5, v3
texld r0.x, r0, s5
mul r1.xy, r1, c10.x
texld r1.xyz, r1, s2
add_pp r2.xyz, -r1, c15.y
mad r5.xy, v5, r4.z, c4
mov r0.w, r0.x
texld r0.x, r5, s5
mad r5.xy, v5, r4.z, c3
mov r0.z, r0.x
texld r0.x, r5, s5
mad r5.xy, v5, r4.z, c2
mov r0.y, r0.x
texld r0.x, r5, s5
mad r0, -v5.z, r4.z, r0
mov r4.w, c1.x
cmp r0, r0, c15.y, r4.w
dp4_pp r0.y, r0, c20.x
rcp r4.z, v4.w
mad r5.xy, v4, r4.z, c19.y
add_pp r4.z, r1.w, c15.y
dp3 r0.x, v4, v4
texldd r3, r4, s0, r3.zwzw, r3
texld r0.w, r5, s3
cmp r0.z, -v4, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c6
mul r0.xyz, r0, c7
mul r0.xyz, r0, r2.w
frc_pp r4.w, r4.z
add_pp_sat r2.w, r4.z, -r4
mul r0.xyz, r2.w, r0
mul r4.xyz, r3.w, r0
mul_pp r1.w, r1, c6
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c16.z
mov r0.x, c13
add r0.xyz, c6, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c12.x
mul_sat r0.w, r0, c16.z
mad_pp r1.xyz, r0.w, r2, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r2.xyz, r0, c14.x
mul_pp r1.xyz, r3, r1
mad_pp r1.xyz, r1, c8, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Vector 11 [_DetailOffset]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 138 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c20, 0.25000000, 0, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
rcp r1.x, r0.w
min r0.w, r0.x, r1
mul r0.w, r0, r1.x
mul r2.x, r0.w, r0.w
mad r1.x, r2, c17.y, c17.z
mad r1.x, r1, r2, c17.w
mad r1.x, r1, r2, c18
mad r2.y, r1.x, r2.x, c18
add r1.xyz, r0, -r0.zxyw
mad r2.x, r2.y, r2, c18.z
mul r2.x, r2, r0.w
add r2.z, r1.x, c15.y
frc r0.w, r2.z
add_sat r2.z, r2, -r0.w
add r0.w, r0.x, -r1
add r2.y, -r2.x, c18.w
cmp r0.w, -r0, r2.x, r2.y
mad r2.xyz, r2.z, r1, r0.zxyw
add r1.y, r0, -r2.x
add r1.x, -r0.w, c16.w
cmp r1.x, v2.z, r0.w, r1
add r0.w, r1.y, c15.y
frc r2.w, r0
cmp r1.x, v2, r1, -r1
mad r4.z, r1.x, c19.x, c19.y
add r1.y, -r1.w, c15
mad r1.x, r1.w, c15.z, c15.w
mad r1.x, r1.w, r1, c16
mad r1.x, r1.w, r1, c16.y
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r3.x, r1, r1.y
abs r1.x, v2.y
cmp r1.w, v2.z, c15.x, c15.y
mul r3.y, r1.w, r3.x
add r1.z, -r1.x, c15.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r1.z, r1.z
add_sat r0.w, r0, -r2
add_pp r0.xyz, r0.yxzw, -r2
mad_pp r0.xyz, r0.w, r0, r2
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r1.x, r1.y, r1, c16.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v2.y, c15, c15.y
mul r1.z, r1.x, r1.y
mad r1.y, -r1.z, c16.z, r1
mad r1.x, r1, c16.w, r1.y
mad r3.x, -r3.y, c16.z, r3
mad r1.z, r1.w, c16.w, r3.x
mul r1.y, r1.z, c17.x
dsy r3.xy, v2
mul r3.xy, r3, r3
dsx r4.y, r1
mul r4.w, r1.x, c17.x
dsy r1.w, r1.y
dsx r1.xy, v2
mul r1.xy, r1, r1
add r1.x, r1, r1.y
add r1.y, r3.x, r3
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.y, r1.y
rcp r1.y, r1.y
mul r4.x, r1, c19
mul r1.z, r1.y, c19.x
texldd r3.yw, r4.zwzw, s1, r4, r1.zwzw
mad_pp r5.xy, r3.wyzw, c19.z, c19.w
rcp r3.w, v5.w
mul_pp r1.xy, r5, r5
add_pp_sat r0.w, r1.x, r1.y
add_pp r0.w, -r0, c15.y
rsq_pp r0.w, r0.w
rcp_pp r5.z, r0.w
mov_pp r0.zw, c11.xyxy
mad_pp r1.xy, r0, c19.y, r0.zwzw
dp3 r2.x, r5, -v3
mul r0.xyz, r5, r2.x
mul r1.xy, r1, c10.x
texld r2.xyz, r1, s2
dp3_pp r2.w, r5, v3
mad r0.xyz, -r0, c16.z, -v3
dp3_sat r1.x, r0, v1
pow r0, r1.x, c9.x
mad r5.xyz, v5, r3.w, c3
texld r1.x, r5, s5
add_pp r3.xyz, -r2, c15.y
mov r1.y, r0.x
mad r6.xyz, v5, r3.w, c5
texld r0.x, r6, s5
mov_pp r0.w, r0.x
mad r0.xyz, v5, r3.w, c4
texld r0.x, r0, s5
mov_pp r0.z, r0.x
mad r5.xyz, v5, r3.w, c2
mov_pp r0.y, r1.x
mov r0.x, c1
add r1.x, c15.y, -r0
texld r0.x, r5, s5
mad r0, r0, r1.x, c1.x
dp4_pp r0.z, r0, c20.x
rcp r1.x, v4.w
mad r5.xy, v4, r1.x, c19.y
add_pp r1.x, r2.w, c15.y
dp3 r0.x, v4, v4
frc_pp r3.w, r1.x
texld r0.w, r5, s3
cmp r0.y, -v4.z, c15.x, c15
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul r0.xyz, r0.w, c6
mul r0.xyz, r0, c7
mul r0.xyz, r0, r1.y
add_pp_sat r1.x, r1, -r3.w
mul r0.xyz, r1.x, r0
texldd r1, r4.zwzw, s0, r4, r1.zwzw
mul r4.xyz, r1.w, r0
mul_pp r2.w, r2, c6
mul_pp r0.y, r2.w, r0.w
mul_pp_sat r0.w, r0.y, c16.z
mov r0.x, c13
add r0.xyz, c6, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c12.x
mul_sat r0.w, r0, c16.z
mad_pp r2.xyz, r0.w, r3, r2
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c14.x
mul_pp r1.xyz, r1, r2
mad_pp r1.xyz, r1, c8, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 137 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r1.w, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r1
rcp r1.x, r0.w
min r0.w, r0.x, r1
mul r0.w, r0, r1.x
mul r1.x, r0.w, r0.w
mad r1.y, r1.x, c14, c14.z
mad r1.y, r1, r1.x, c14.w
mad r1.y, r1, r1.x, c15.x
mad r1.y, r1, r1.x, c15
mad r2.x, r1.y, r1, c15.z
mul r2.x, r2, r0.w
add r1.xyz, r0, -r0.zxyw
add r2.z, r1.x, c12.y
add r4.xyz, v5, c17.xyyw
add r2.y, -r2.x, c15.w
add r0.w, r0.x, -r1
cmp r0.w, -r0, r2.x, r2.y
frc r2.w, r2.z
add_sat r2.y, r2.z, -r2.w
mad r1.xyz, r2.y, r1, r0.zxyw
add r2.y, r0, -r1.x
add r2.x, -r0.w, c13.w
cmp r0.w, v2.z, r0, r2.x
cmp r2.x, v2, r0.w, -r0.w
add r0.w, r2.y, c12.y
mad r6.x, r2, c16, c16.y
add r2.y, -r1.w, c12
mad r2.x, r1.w, c12.z, c12.w
mad r2.x, r1.w, r2, c13
rsq r2.y, r2.y
mad r1.w, r1, r2.x, c13.y
rcp r2.y, r2.y
mul r2.w, r1, r2.y
abs r1.w, v2.y
cmp r2.z, v2, c12.x, c12.y
mul r3.x, r2.z, r2.w
add r2.y, -r1.w, c12
mad r2.x, r1.w, c12.z, c12.w
mad r2.x, r2, r1.w, c13
rsq r2.y, r2.y
add_pp r0.xyz, r0.yxzw, -r1
mad r1.w, r2.x, r1, c13.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v2.y, c12.x, c12.y
mul r2.y, r1.w, r2.x
mad r2.x, -r2.y, c13.z, r2
mad r1.w, r1, c13, r2.x
mad r2.w, -r3.x, c13.z, r2
mad r2.y, r2.z, c13.w, r2.w
mul r2.x, r2.y, c14
dsy r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r6.y, r1.w, c14.x
dsx r5.w, r2.x
dsy r5.y, r2.x
dsx r2.xy, v2
mul r2.xy, r2, r2
add r1.w, r2.x, r2.y
add r2.x, r2.z, r2.w
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r5.z, r1.w, c16.x
frc r1.w, r0
add_sat r0.w, r0, -r1
mad_pp r0.xyz, r0.w, r0, r1
rsq r2.x, r2.x
rcp r2.x, r2.x
mul r5.x, r2, c16
texldd r2.yw, r6, s1, r5.zwzw, r5
mad_pp r2.xy, r2.wyzw, c16.z, c16.w
mul_pp r2.zw, r2.xyxy, r2.xyxy
add_pp_sat r1.w, r2.z, r2
add_pp r0.w, -r1, c12.y
rsq_pp r0.w, r0.w
rcp_pp r2.z, r0.w
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r1.xy, r0.zyzw, r0.x
mov_pp r1.zw, c8.xyxy
mad_pp r1.xy, r1, c16.y, r1.zwzw
dp3 r0.x, r2, -v3
mul r0.xyz, r2, r0.x
dp3_pp r3.w, r2, v3
mad r0.xyz, -r0, c13.z, -v3
dp3_sat r1.w, r0, v1
pow r0, r1.w, c6.x
mov r1.w, r0.x
texld r0, r4, s3
dp4 r4.w, r0, c18
mul r1.xy, r1, c7.x
texld r1.xyz, r1, s2
add r0.xyz, v5, c17.yxyw
texld r0, r0, s3
dp4 r4.z, r0, c18
add r2.xyz, v5, c17.yyxw
texld r2, r2, s3
dp4 r4.y, r2, c18
add r0.xyz, v5, c17.x
texld r0, r0, s3
dp3 r2.x, v5, v5
dp4 r4.x, r0, c18
rsq r2.x, r2.x
rcp r0.x, r2.x
mul r0.x, r0, c1.w
mad r0, -r0.x, c17.z, r4
mov r2.x, c2
cmp r2, r0, c12.y, r2.x
dp4_pp r0.y, r2, c17.w
add_pp r2.x, r3.w, c12.y
dp3 r0.x, v4, v4
texld r0.x, r0.x, s4
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
add_pp r3.xyz, -r1, c12.y
mul r0.xyz, r0, r1.w
frc_pp r2.y, r2.x
add_pp_sat r1.w, r2.x, -r2.y
mul r0.xyz, r1.w, r0
texldd r2, r6, s0, r5.zwzw, r5
mul r4.xyz, r2.w, r0
mul_pp r1.w, r3, c3
mul_pp r0.y, r1.w, r0.w
mul_pp_sat r0.w, r0.y, c13.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mul_sat r0.w, r0, c13.z
mad_pp r1.xyz, r0.w, r3, r1
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c11.x
mul_pp r1.xyz, r2, r1
mad_pp r1.xyz, r1, c5, r3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 138 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r2.x, v2.z
abs r0.xyz, v2
max r0.w, r0.x, r2.x
rcp r1.x, r0.w
min r0.w, r0.x, r2.x
mul r0.w, r0, r1.x
mul r1.w, r0, r0
mad r1.x, r1.w, c14.y, c14.z
mad r1.x, r1, r1.w, c14.w
mad r1.x, r1, r1.w, c15
mad r2.y, r1.x, r1.w, c15
add r1.xyz, r0, -r0.zxyw
mad r1.w, r2.y, r1, c15.z
mul r1.w, r1, r0
add r2.z, r1.x, c12.y
frc r0.w, r2.z
add_sat r2.z, r2, -r0.w
mad r1.xyz, r2.z, r1, r0.zxyw
add r2.z, -r2.x, c12.y
rsq r2.z, r2.z
add r2.y, -r1.w, c15.w
add r0.w, r0.x, -r2.x
cmp r0.w, -r0, r1, r2.y
add r2.y, r0, -r1.x
add r1.w, -r0, c13
cmp r1.w, v2.z, r0, r1
add r0.w, r2.y, c12.y
cmp r2.y, v2.x, r1.w, -r1.w
frc r1.w, r0
mad r7.x, r2.y, c16, c16.y
mad r2.y, r2.x, c12.z, c12.w
mad r2.y, r2.x, r2, c13.x
mad r2.x, r2, r2.y, c13.y
rcp r2.z, r2.z
mul r3.x, r2, r2.z
abs r2.x, v2.y
cmp r2.w, v2.z, c12.x, c12.y
mul r3.y, r2.w, r3.x
add r2.z, -r2.x, c12.y
mad r2.y, r2.x, c12.z, c12.w
mad r2.y, r2, r2.x, c13.x
rsq r2.z, r2.z
add_sat r0.w, r0, -r1
add_pp r0.xyz, r0.yxzw, -r1
mad_pp r0.xyz, r0.w, r0, r1
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
mul_pp r0.xy, r0.zyzw, r0.x
mad r2.x, r2.y, r2, c13.y
rcp r2.z, r2.z
mul r2.y, r2.x, r2.z
cmp r2.x, v2.y, c12, c12.y
mul r2.z, r2.x, r2.y
mad r2.y, -r2.z, c13.z, r2
mad r2.x, r2, c13.w, r2.y
mad r3.x, -r3.y, c13.z, r3
mad r2.z, r2.w, c13.w, r3.x
mul r2.y, r2.z, c14.x
dsy r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r7.y, r2.x, c14.x
dsx r6.w, r2.y
dsy r6.y, r2
dsx r2.xy, v2
mul r2.xy, r2, r2
add r2.x, r2, r2.y
add r2.y, r2.z, r2.w
rsq r2.x, r2.x
rcp r2.x, r2.x
rsq r2.y, r2.y
rcp r2.y, r2.y
mul r6.z, r2.x, c16.x
mul r6.x, r2.y, c16
texldd r2.yw, r7, s1, r6.zwzw, r6
mad_pp r3.xy, r2.wyzw, c16.z, c16.w
mul_pp r2.xy, r3, r3
add_pp_sat r0.w, r2.x, r2.y
add_pp r0.w, -r0, c12.y
rsq_pp r0.w, r0.w
rcp_pp r3.z, r0.w
mov_pp r0.zw, c8.xyxy
mad_pp r1.xy, r0, c16.y, r0.zwzw
mul r1.xy, r1, c7.x
texld r2.xyz, r1, s2
dp3 r1.z, r3, -v3
mul r0.xyz, r3, r1.z
mad r0.xyz, -r0, c13.z, -v3
dp3_sat r1.x, r0, v1
pow r0, r1.x, c6.x
mov r2.w, r0.x
add r1.xyz, v5, c17.xyyw
texld r1, r1, s3
dp4 r5.w, r1, c18
add r0.xyz, v5, c17.yxyw
texld r0, r0, s3
dp4 r5.z, r0, c18
add r1.xyz, v5, c17.yyxw
texld r1, r1, s3
dp4 r5.y, r1, c18
add r0.xyz, v5, c17.x
texld r0, r0, s3
dp3 r1.x, v5, v5
add_pp r4.xyz, -r2, c12.y
rsq r1.x, r1.x
dp4 r5.x, r0, c18
rcp r0.x, r1.x
mul r0.x, r0, c1.w
mov r1.x, c2
mad r0, -r0.x, c17.z, r5
cmp r0, r0, c12.y, r1.x
dp4_pp r0.y, r0, c17.w
dp3_pp r1.x, r3, v3
add_pp r1.y, r1.x, c12
frc_pp r1.z, r1.y
dp3 r0.x, v4, v4
texld r0.w, v4, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r2.w
add_pp_sat r1.y, r1, -r1.z
mul r0.xyz, r1.y, r0
mul_pp r2.w, r1.x, c3
texldd r1, r7, s0, r6.zwzw, r6
mul r3.xyz, r1.w, r0
mul_pp r0.y, r2.w, r0.w
mul_pp_sat r0.w, r0.y, c13.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r0.w, v0.x, c9.x
mad_pp r0.xyz, r0, v6.x, r3
mul_sat r0.w, r0, c13.z
mad_pp r3.xyz, r0.w, r4, r2
mul r2.xyz, r0, c11.x
mul_pp r1.xyz, r1, r3
mad_pp r1.xyz, r1, c5, r2
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 135 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
mul r6.xy, r2, c10.x
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r0.xyz, r4, r0.x
mad r1.xyz, -r0, c12.z, -v3
texldd r0, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r1, v1
texldd r1, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r0, c11.y
texld r2, r6, s5
mul_pp r1.w, r1, r5
mul_pp r3, r1, r2
mad_pp r3.xyz, -r0, r5, r3
mul_pp r5.xyz, r0, r5
pow r2, r4.w, c4.x
dp3_pp r0.y, r4, v3
add_pp r2.w, r0.y, c11.y
dp3 r0.x, v4, v4
texld r0.x, r0.x, s6
mov r0.z, r2.x
mul r2.xyz, r0.x, c1
mul r2.xyz, r2, c2
frc_pp r4.x, r2.w
mul r2.xyz, r2, r0.z
add_pp_sat r0.z, r2.w, -r4.x
mul r2.xyz, r0.z, r2
mul_pp r0.z, r0.y, c1.w
mul r4.xyz, r0.w, r2
mul_pp r0.w, r0.x, r0.z
mov r0.z, c8.x
add_pp r0.y, r0, c16.x
mul_pp r0.y, r0, c1.w
mul_pp_sat r0.w, r0, c12.z
add r2.xyz, c1, r0.z
mad_sat r2.xyz, r2, r0.w, c0
mad_pp r2.xyz, r2, v5.x, r4
mad_pp r3.xyz, r3.w, r3, r5
mul r4.xyz, r2, c9.x
mad_pp r4.xyz, r3, c3, r4
mul_pp r2.w, r0.y, r0.x
texld r3, r6, s4
mul_pp r0, r1, r3
mad_pp r0.xyz, -r4, r2, r0
mul_pp_sat r1.x, r2.w, c16.y
add_pp r1.x, -r1, c11.y
mul_pp r2.xyz, r4, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 132 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord8 v4.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
add r2.z, r1.x, c11.y
frc r2.w, r2.z
add_sat r2.z, r2, -r2.w
mad r1.xyz, r2.z, r1, r0.zxyw
add r2.z, r0.y, -r1.x
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
mad r2.x, r2.y, r2, c14.z
mul r2.x, r2, r1.w
add r2.z, r2, c11.y
frc r2.y, r2.z
add_sat r2.z, r2, -r2.y
add_pp r3.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.z, r3, r1
abs_pp r0.z, r1.x
add r2.y, -r2.x, c14.w
add r1.w, r0.x, -r0
cmp r1.w, -r1, r2.x, r2.y
add r0.x, -r1.w, c12.w
cmp r0.x, v2.z, r1.w, r0
cmp r0.y, v2.x, r0.x, -r0.x
mad r6.z, r0.y, c15.x, c15.y
rcp_pp r0.x, r0.z
add r0.z, -r0.w, c11.y
mad r0.y, r0.w, c11.z, c11.w
mad r0.y, r0.w, r0, c12.x
rsq r0.z, r0.z
mad r0.y, r0.w, r0, c12
rcp r0.z, r0.z
mul r1.w, r0.y, r0.z
abs r0.y, v2
cmp r1.x, v2.z, c11, c11.y
mul r2.x, r1, r1.w
mad r1.w, -r2.x, c12.z, r1
add r0.w, -r0.y, c11.y
mad r0.z, r0.y, c11, c11.w
mad r0.z, r0, r0.y, c12.x
rsq r0.w, r0.w
dsy r2.xy, v2
mad r0.y, r0.z, r0, c12
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c11.x, c11
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c12, r0
mad r0.w, r1.x, c12, r1
mad r0.y, r0, c12.w, r0.z
mul r0.z, r0.w, c13.x
mul r6.w, r0.y, c13.x
dsx r3.w, r0.z
dsy r3.y, r0.z
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r3.z, r0.y, c15.x
mul r3.x, r0.z, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r1.xy, r1.zyzw, r0.x
mov_pp r0.zw, c6.xyxy
mad_pp r1.xy, r1, c15.y, r0.zwzw
mul_pp r0.xy, r4, r4
add_pp_sat r0.z, r0.x, r0.y
add_pp r0.w, -r0.z, c11.y
mul r0.xy, r1, c5.x
texld r0.xyz, r0, s2
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r0.w, v0.x, c7.x
dp3 r1.z, r4, -v3
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r5.xyz, r0.w, r2, r0
mul r0.xyz, r4, r1.z
mul r6.xy, r1, c10.x
texldd r1, r6.zwzw, s0, r3.zwzw, r3
mad r0.xyz, -r0, c12.z, -v3
dp3_sat r4.w, r0, v1
pow r0, r4.w, c4.x
add_pp_sat r0.y, -r1.w, c11
texldd r3, r6.zwzw, s3, r3.zwzw, r3
dp3_pp r0.w, r4, v3
add_pp r4.x, r0.w, c11.y
frc_pp r4.y, r4.x
mul_pp r3.w, r3, r0.y
mov r4.z, r0.x
texld r2, r6, s5
mul_pp r2, r3, r2
mad_pp r2.xyz, -r1, r5, r2
mov r0.xyz, c1
mul r0.xyz, c2, r0
mul_pp r1.xyz, r1, r5
mul r0.xyz, r0, r4.z
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r0.y, r0.w, c1.w
add_pp r0.w, r0, c16.x
mul_pp r0.w, r0, c1
mul_pp_sat r0.w, r0, c16.y
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v4.x, r4
mad_pp r1.xyz, r2.w, r2, r1
mul r4.xyz, r0, c9.x
mad_pp r2.xyz, r1, c3, r4
texld r1, r6, s4
mul_pp r1, r3, r1
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 140 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c10.x
mad r2.xyz, -r1, c12.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c11.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c4.x
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
mov r5.x, r0
dp3_pp r4.w, r4, v3
rcp r0.x, v4.w
mad r4.xy, v4, r0.x, c15.y
texld r0.w, r4, s6
add_pp r4.x, r4.w, c11.y
frc_pp r4.y, r4.x
dp3 r0.x, v4, v4
cmp r0.y, -v4.z, c11.x, c11
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.w, r0.y, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c1.w
mul_pp r0.y, r0.w, r5.x
mad_pp r1.xyz, r3.w, r3, r1
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v5.x, r4
mul r3.xyz, r0, c9.x
add_pp r1.w, r4, c16.x
mul_pp r3.w, r1, c1
mad_pp r3.xyz, r1, c3, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c16.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 136 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c10.x
mad r2.xyz, -r1, c12.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c11.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c4.x
dp3_pp r4.w, r4, v3
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
mov r5.x, r0
add_pp r4.x, r4.w, c11.y
frc_pp r4.y, r4.x
dp3 r0.x, v4, v4
mad_pp r1.xyz, r3.w, r3, r1
texld r0.x, r0.x, s6
texld r0.w, v4, s7
mul r0.w, r0.x, r0
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c1.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v5.x, r4
mul r3.xyz, r0, c9.x
add_pp r1.w, r4, c16.x
mul_pp r3.w, r1, c1
mad_pp r3.xyz, r1, c3, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c16.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 134 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c10.x
mad r2.xyz, -r1, c12.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c11.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c4.x
dp3_pp r4.w, r4, v3
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
add_pp r4.x, r4.w, c11.y
frc_pp r4.y, r4.x
mad_pp r1.xyz, r3.w, r3, r1
mov r5.x, r0
texld r0.w, v4, s6
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c1.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v5.x, r4
mul r3.xyz, r0, c9.x
add_pp r1.w, r4, c16.x
mul_pp r3.w, r1, c1
mad_pp r3.xyz, r1, c3, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c16.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 145 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c12
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c12.y
mad r2.y, r2.x, c14, c14.z
mad r2.y, r2, r2.x, c14.w
mad r2.y, r2, r2.x, c15.x
mad r2.y, r2, r2.x, c15
frc r2.w, r2.z
mad r2.x, r2.y, r2, c15.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c15.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c13.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c16.x, c16.y
add r0.y, -r0.w, c12
mad r0.x, r0.w, c12.z, c12.w
mad r0.x, r0.w, r0, c13
mad r0.x, r0.w, r0, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c12.x, c12.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r1.z, -r1.w, c13, r1
mad r0.z, r0.w, c13.w, r1
mul r0.y, r0.z, c14.x
mov_pp r1.zw, c7.xyxy
mad_pp r2.xy, r1, c16.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c14.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c16.x
mul r3.x, r0.y, c16
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c6.x
texld r0.xyz, r0, s2
mul r6.xy, r2, c11.x
texldd r2, r6.zwzw, s0, r3.zwzw, r3
add_pp r0.w, -r0, c12.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c8.x
add_pp r1.xyz, -r0, c12.y
mul_sat r0.w, r1, c13.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mad r1.xyz, -r1, c13.z, -v3
dp3_sat r4.w, r1, v1
texldd r1, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r2, c12.y
texld r0, r6, s5
mul_pp r1.w, r1, r5
mul_pp r3, r1, r0
pow r0, r4.w, c5.x
mad_pp r3.xyz, -r2, r5, r3
mul_pp r2.xyz, r2, r5
mov r5.x, r0
dp3_pp r4.w, r4, v3
mad_pp r2.xyz, r3.w, r3, r2
texldp r0.x, v5, s8
rcp r0.y, v5.w
mad r0.y, -v5.z, r0, r0.x
rcp r0.x, v4.w
mad r4.xy, v4, r0.x, c16.y
texld r0.w, r4, s6
add_pp r4.x, r4.w, c12.y
frc_pp r4.y, r4.x
mov r0.z, c1.x
cmp r0.z, r0.y, c12.y, r0
dp3 r0.x, v4, v4
cmp r0.y, -v4.z, c12.x, c12
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r2.w, r0
mul_pp r5.x, r4.w, c2.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r2.w, r0.y, c13.z
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r2.w, c0
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c10.x
add_pp r2.w, r4, c17.x
mul_pp r3.w, r2, c2
mad_pp r3.xyz, r2, c4, r3
texld r2, r6, s4
mul_pp r1, r1, r2
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c17.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c12.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 144 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c12
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c12.y
mad r2.y, r2.x, c14, c14.z
mad r2.y, r2, r2.x, c14.w
mad r2.y, r2, r2.x, c15.x
mad r2.y, r2, r2.x, c15
frc r2.w, r2.z
mad r2.x, r2.y, r2, c15.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c15.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c13.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c16.x, c16.y
add r0.y, -r0.w, c12
mad r0.x, r0.w, c12.z, c12.w
mad r0.x, r0.w, r0, c13
mad r0.x, r0.w, r0, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c12.x, c12.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r1.z, -r1.w, c13, r1
mad r0.z, r0.w, c13.w, r1
mul r0.y, r0.z, c14.x
mov_pp r1.zw, c7.xyxy
mad_pp r2.xy, r1, c16.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c14.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c16.x
mul r3.x, r0.y, c16
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c6.x
texld r0.xyz, r0, s2
mul r6.xy, r2, c11.x
texldd r2, r6.zwzw, s0, r3.zwzw, r3
add_pp r0.w, -r0, c12.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c8.x
add_pp r1.xyz, -r0, c12.y
mul_sat r0.w, r1, c13.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mad r1.xyz, -r1, c13.z, -v3
dp3_sat r4.w, r1, v1
texldd r1, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r2, c12.y
texld r0, r6, s5
mul_pp r1.w, r1, r5
mul_pp r3, r1, r0
pow r0, r4.w, c5.x
mad_pp r3.xyz, -r2, r5, r3
mul_pp r2.xyz, r2, r5
mov r5.x, r0
mov r0.x, c1
add r0.z, c12.y, -r0.x
texldp r0.x, v5, s8
mad r0.z, r0.x, r0, c1.x
dp3 r0.x, v4, v4
dp3_pp r4.w, r4, v3
rcp r0.y, v4.w
mad r4.xy, v4, r0.y, c16.y
texld r0.w, r4, s6
add_pp r4.x, r4.w, c12.y
frc_pp r4.y, r4.x
cmp r0.y, -v4.z, c12.x, c12
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r2.w, r0
mul_pp r5.x, r4.w, c2.w
mul_pp r0.y, r0.w, r5.x
mad_pp r2.xyz, r3.w, r3, r2
mul_pp_sat r2.w, r0.y, c13.z
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r2.w, c0
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c10.x
add_pp r2.w, r4, c17.x
mul_pp r3.w, r2, c2
mad_pp r3.xyz, r2, c4, r3
texld r2, r6, s4
mul_pp r1, r1, r2
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c17.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c12.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 134 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c10.x
mad r2.xyz, -r1, c12.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c11.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c4.x
dp3_pp r0.w, r4, v3
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
add_pp r4.x, r0.w, c11.y
frc_pp r4.y, r4.x
mov r4.w, r0.x
texldp r5.x, v4, s6
mul r0.xyz, r5.x, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r4.w
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r4.w, r0, c1
mul_pp r0.y, r5.x, r4.w
add_pp r0.w, r0, c16.x
mul_pp r0.w, r0, c1
mul_pp r0.w, r0, r5.x
mul_pp_sat r0.w, r0, c16.y
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v5.x, r4
mad_pp r1.xyz, r3.w, r3, r1
mul r3.xyz, r0, c9.x
mad_pp r3.xyz, r1, c3, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 135 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c10.x
mad r2.xyz, -r1, c12.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c11.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c4.x
dp3_pp r4.w, r4, v3
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
mov r5.x, r0
add_pp r4.x, r4.w, c11.y
frc_pp r4.y, r4.x
mad_pp r1.xyz, r3.w, r3, r1
texldp r0.x, v5, s6
texld r0.w, v4, s7
mul r0.w, r0, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c1.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c9.x
add_pp r1.w, r4, c16.x
mul_pp r3.w, r1, c1
mad_pp r3.xyz, r1, c3, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c16.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 144 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c18, -0.01000214, 0.97000003, 4.03944778, 0
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c13
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c13.y
mad r2.y, r2.x, c15, c15.z
mad r2.y, r2, r2.x, c15.w
mad r2.y, r2, r2.x, c16.x
mad r2.y, r2, r2.x, c16
frc r2.w, r2.z
mad r2.x, r2.y, r2, c16.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c16.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c14.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c17.x, c17.y
add r0.y, -r0.w, c13
mad r0.x, r0.w, c13.z, c13.w
mad r0.x, r0.w, r0, c14
mad r0.x, r0.w, r0, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c13.x, c13.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c13.y
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mad r1.z, -r1.w, c14, r1
mad r0.z, r0.w, c14.w, r1
mul r0.y, r0.z, c15.x
mov_pp r1.zw, c8.xyxy
mad_pp r2.xy, r1, c17.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c15.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c17.z, c17.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c7.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c13.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c9.x
add_pp r1.xyz, -r0, c13.y
mul_sat r0.w, r1, c14.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c12.x
mad r2.xyz, -r1, c14.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c13.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c6.x
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
mov r5.x, r0
dp3_pp r4.w, r4, v3
dp3 r0.x, v5, v5
rsq r4.x, r0.x
texld r0, v5, s6
dp4 r0.y, r0, c19
rcp r4.x, r4.x
mul r0.x, r4, c1.w
mad r0.y, -r0.x, c18, r0
mov r0.z, c2.x
add_pp r4.x, r4.w, c13.y
frc_pp r4.y, r4.x
dp3 r0.x, v4, v4
mad_pp r1.xyz, r3.w, r3, r1
cmp r0.y, r0, c13, r0.z
texld r0.x, r0.x, s7
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c3.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r1.w, r0.y, c14.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c11.x
add_pp r1.w, r4, c18.x
mul_pp r3.w, r1, c3
mad_pp r3.xyz, r1, c5, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c18.z
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 145 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c18, -0.01000214, 0.97000003, 4.03944778, 0
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c13
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c13.y
mad r2.y, r2.x, c15, c15.z
mad r2.y, r2, r2.x, c15.w
mad r2.y, r2, r2.x, c16.x
mad r2.y, r2, r2.x, c16
frc r2.w, r2.z
mad r2.x, r2.y, r2, c16.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c16.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c14.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c17.x, c17.y
add r0.y, -r0.w, c13
mad r0.x, r0.w, c13.z, c13.w
mad r0.x, r0.w, r0, c14
mad r0.x, r0.w, r0, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c13.x, c13.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c13.y
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mad r1.z, -r1.w, c14, r1
mad r0.z, r0.w, c14.w, r1
mul r0.y, r0.z, c15.x
mov_pp r1.zw, c8.xyxy
mad_pp r2.xy, r1, c17.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c15.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c17.z, c17.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c7.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c13.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c9.x
add_pp r1.xyz, -r0, c13.y
mul_sat r0.w, r1, c14.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c12.x
mad r2.xyz, -r1, c14.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c13.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c6.x
dp3_pp r4.w, r4, v3
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
mov r5.x, r0
texld r0, v5, s6
dp4 r0.y, r0, c19
dp3 r4.x, v5, v5
rsq r4.x, r4.x
rcp r0.x, r4.x
add_pp r4.x, r4.w, c13.y
frc_pp r4.y, r4.x
mul r0.x, r0, c1.w
mad r0.x, -r0, c18.y, r0.y
mov r0.z, c2.x
cmp r0.y, r0.x, c13, r0.z
dp3 r0.x, v4, v4
mad_pp r1.xyz, r3.w, r3, r1
texld r0.w, v4, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c3.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r1.w, r0.y, c14.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c11.x
add_pp r1.w, r4, c18.x
mul_pp r3.w, r1, c3
mad_pp r3.xyz, r1, c5, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c18.z
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Vector 11 [_DetailOffset]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 153 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c21, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.x, r1, c16.y
min r2.y, r0.x, r0.w
rcp r1.w, r1.w
mul r2.w, r2.y, r1
frc r1.w, r2.x
add_sat r1.w, r2.x, -r1
mad r1.xyz, r1.w, r1, r0.zxyw
mul r2.z, r2.w, r2.w
mad r2.x, r2.z, c18.y, c18.z
mad r2.x, r2, r2.z, c18.w
mad r2.y, r2.x, r2.z, c19.x
add r1.w, r0.y, -r1.x
add r2.x, r1.w, c16.y
mad r2.y, r2, r2.z, c19
frc r1.w, r2.x
mad r2.y, r2, r2.z, c19.z
add_sat r1.w, r2.x, -r1
mul r2.w, r2.y, r2
add_pp r2.xyz, r0.yxzw, -r1
add r0.x, r0, -r0.w
add r0.y, -r2.w, c19.w
cmp r2.w, -r0.x, r2, r0.y
mad_pp r0.xyz, r1.w, r2, r1
abs r2.x, v2.y
add r1.x, -r2.w, c17.w
cmp r1.x, v2.z, r2.w, r1
mad r1.y, r0.w, c16.z, c16.w
add r1.z, -r2.x, c16.y
mad r1.w, r2.x, c16.z, c16
mad r1.w, r1, r2.x, c17.x
mad r1.w, r1, r2.x, c17.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
rsq r1.z, r1.z
rcp r1.z, r1.z
dsx r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r1.w, r1, r1.z
cmp r2.x, v2.y, c16, c16.y
mul r1.z, r2.x, r1.w
mad r1.y, r0.w, r1, c17.x
cmp r1.x, v2, r1, -r1
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r1.x, c20.x, c20.y
add r1.x, -r0.w, c16.y
mad r0.w, r0, r1.y, c17.y
mov_pp r3.xy, c11
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r1.y, v2.z, c16.x, c16
mul r0.w, r1.y, r1.x
mad r0.w, -r0, c17.z, r1.x
mad r1.x, -r1.z, c17.z, r1.w
mad r0.w, r1.y, c17, r0
mad r1.y, r2.x, c17.w, r1.x
mul r1.x, r0.w, c18
mul r0.w, r1.y, c18.x
add r1.z, r2, r2.w
dsy r2.xy, v2
mul r2.xy, r2, r2
dsx r1.y, r1.x
dsy r1.w, r1.x
add r1.x, r2, r2.y
rsq r1.z, r1.z
mad_pp r0.xy, r0, c20.y, r3
rcp r2.x, r1.z
rsq r1.x, r1.x
rcp r1.z, r1.x
mul r1.x, r2, c20
mul r1.z, r1, c20.x
texldd r2.yw, r0.zwzw, s1, r1, r1.zwzw
mad_pp r4.xy, r2.wyzw, c20.z, c20.w
mul r2.xy, r0, c10.x
mul_pp r3.xy, r4, r4
add_pp_sat r2.w, r3.x, r3.y
add_pp r3.w, -r2, c16.y
texld r2.xyz, r2, s2
rsq_pp r3.w, r3.w
mul r2.w, v0.x, c12.x
rcp_pp r4.z, r3.w
add_pp r3.xyz, -r2, c16.y
mul_sat r2.w, r2, c17.z
mad_pp r5.xyz, r2.w, r3, r2
dp3 r3.x, r4, -v3
mul r6.xyz, r4, r3.x
texldd r3, r0.zwzw, s0, r1, r1.zwzw
texldd r1, r0.zwzw, s3, r1, r1.zwzw
mul r0.xy, r0, c15.x
add_pp_sat r4.w, -r3, c16.y
mad r6.xyz, -r6, c17.z, -v3
dp3_sat r0.z, r6, v1
pow r6, r0.z, c9.x
rcp r0.w, v5.w
dp3_pp r0.z, r4, v3
mul_pp r1.w, r1, r4
texld r2, r0, s5
mul_pp r2, r1, r2
mad_pp r2.xyz, -r3, r5, r2
mul_pp r3.xyz, r3, r5
mov r5.x, r6
mad r6.xy, v5, r0.w, c5
texld r4.x, r6, s8
mad_pp r3.xyz, r2.w, r2, r3
mad r6.xy, v5, r0.w, c4
mov r4.w, r4.x
texld r4.x, r6, s8
mad r6.xy, v5, r0.w, c3
mov r4.z, r4.x
texld r4.x, r6, s8
mad r6.xy, v5, r0.w, c2
mov r4.y, r4.x
texld r4.x, r6, s8
mad r4, -v5.z, r0.w, r4
mov r5.y, c1.x
cmp r4, r4, c16.y, r5.y
dp4_pp r4.y, r4, c21.y
add_pp r5.y, r0.z, c16
rcp r0.w, v4.w
frc_pp r4.w, r5.y
mad r6.xy, v4, r0.w, c20.y
dp3 r4.x, v4, v4
add_pp_sat r4.w, r5.y, -r4
texld r4.x, r4.x, s7
cmp r4.z, -v4, c16.x, c16.y
texld r0.w, r6, s6
mul_pp r0.w, r4.z, r0
mul_pp r0.w, r0, r4.x
mul_pp r0.w, r0, r4.y
mul r4.xyz, r0.w, c6
mul r4.xyz, r4, c7
mul r4.xyz, r4, r5.x
mul r4.xyz, r4.w, r4
mul_pp r4.w, r0.z, c6
mul r4.xyz, r3.w, r4
mul_pp r3.w, r0, r4
mov r4.w, c13.x
add_pp r0.z, r0, c21.x
mul_pp r0.z, r0, c6.w
mul_pp_sat r3.w, r3, c17.z
add r5.xyz, c6, r4.w
mad_sat r5.xyz, r5, r3.w, c0
mad_pp r4.xyz, r5, v6.x, r4
mul r2.xyz, r4, c14.x
mad_pp r2.xyz, r3, c8, r2
mul_pp r2.w, r0.z, r0
texld r3, r0, s4
mul_pp r0, r1, r3
mul_pp_sat r1.x, r2.w, c21.z
add_pp r1.w, -r1.x, c16.y
mad_pp r0.xyz, -r2, r4, r0
mul_pp r1.xyz, r2, r4
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Vector 11 [_DetailOffset]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 153 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c21, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.xyz, v2
add r1.xyz, r0, -r0.zxyw
abs r0.w, v2.z
add r2.x, r1, c16.y
frc r1.w, r2.x
add_sat r1.w, r2.x, -r1
mad r1.xyz, r1.w, r1, r0.zxyw
max r2.y, r0.x, r0.w
rcp r2.x, r2.y
min r2.y, r0.x, r0.w
mul r3.y, r2, r2.x
mul r3.x, r3.y, r3.y
add r1.w, r0.y, -r1.x
add r2.x, r1.w, c16.y
mad r2.y, r3.x, c18, c18.z
mad r2.y, r2, r3.x, c18.w
mad r2.y, r2, r3.x, c19.x
frc r1.w, r2.x
mad r2.w, r2.y, r3.x, c19.y
add_sat r1.w, r2.x, -r1
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r1.w, r2, r1
mad r0.y, r2.w, r3.x, c19.z
mul r1.w, r0.y, r3.y
dsx r2.zw, v2.xyxy
mul r2.zw, r2, r2
abs r2.x, v2.y
add r0.x, r0, -r0.w
add r0.z, -r1.w, c19.w
cmp r0.z, -r0.x, r1.w, r0
abs_pp r0.y, r1.x
rcp_pp r0.x, r0.y
mul_pp r1.xy, r1.zyzw, r0.x
add r0.y, -r0.z, c17.w
cmp r0.z, v2, r0, r0.y
add r1.z, -r2.x, c16.y
mad r1.w, r2.x, c16.z, c16
mad r1.w, r1, r2.x, c17.x
mad r1.w, r1, r2.x, c17.y
mov_pp r0.xy, c11
mad_pp r0.xy, r1, c20.y, r0
add r1.x, -r0.w, c16.y
mad r1.y, r0.w, c16.z, c16.w
mad r1.y, r0.w, r1, c17.x
mad r0.w, r0, r1.y, c17.y
cmp r0.z, v2.x, r0, -r0
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r1.w, r1, r1.z
cmp r2.x, v2.y, c16, c16.y
mad r0.z, r0, c20.x, c20.y
mul r1.x, r0.w, r1
cmp r1.y, v2.z, c16.x, c16
mul r0.w, r1.y, r1.x
mad r0.w, -r0, c17.z, r1.x
mul r1.z, r2.x, r1.w
mad r1.x, -r1.z, c17.z, r1.w
add r1.z, r2, r2.w
mad r0.w, r1.y, c17, r0
mad r1.y, r2.x, c17.w, r1.x
mul r1.x, r0.w, c18
mul r0.w, r1.y, c18.x
dsy r2.xy, v2
mul r2.w, v0.x, c12.x
mul r2.xy, r2, r2
dsx r1.y, r1.x
dsy r1.w, r1.x
add r1.x, r2, r2.y
rsq r1.z, r1.z
rcp r2.x, r1.z
rsq r1.x, r1.x
rcp r1.z, r1.x
mul r1.x, r2, c20
mul r2.xy, r0, c10.x
mul r1.z, r1, c20.x
texldd r3.yw, r0.zwzw, s1, r1, r1.zwzw
mad_pp r4.xy, r3.wyzw, c20.z, c20.w
texld r2.xyz, r2, s2
mul_pp r4.zw, r4.xyxy, r4.xyxy
add_pp_sat r3.w, r4.z, r4
add_pp r3.xyz, -r2, c16.y
mul_sat r2.w, r2, c17.z
mad_pp r5.xyz, r2.w, r3, r2
add_pp r3.w, -r3, c16.y
rsq_pp r2.x, r3.w
texldd r3, r0.zwzw, s0, r1, r1.zwzw
texldd r1, r0.zwzw, s3, r1, r1.zwzw
rcp_pp r4.z, r2.x
mul r0.xy, r0, c15.x
dp3 r4.w, r4, -v3
mul r6.xyz, r4, r4.w
add_pp_sat r4.w, -r3, c16.y
mad r6.xyz, -r6, c17.z, -v3
mul_pp r1.w, r1, r4
texld r2, r0, s5
mul_pp r2, r1, r2
mad_pp r2.xyz, -r3, r5, r2
mul_pp r3.xyz, r3, r5
dp3_sat r0.z, r6, v1
pow r5, r0.z, c9.x
rcp r0.w, v5.w
dp3_pp r0.z, r4, v3
mad r4.xyz, v5, r0.w, c4
texld r4.x, r4, s8
mov_pp r4.z, r4.x
mad_pp r3.xyz, r2.w, r2, r3
mad r6.xyz, v5, r0.w, c5
mov r5.w, r5.x
texld r5.x, r6, s8
mov_pp r4.w, r5.x
mad r5.xyz, v5, r0.w, c3
texld r5.x, r5, s8
mov_pp r4.y, r5.x
mad r5.xyz, v5, r0.w, c2
mov r4.x, c1
add r0.w, c16.y, -r4.x
texld r4.x, r5, s8
mad r4, r4, r0.w, c1.x
dp4_pp r4.y, r4, c21.y
rcp r0.w, v4.w
mad r5.xy, v4, r0.w, c20.y
texld r0.w, r5, s6
add_pp r5.x, r0.z, c16.y
cmp r4.z, -v4, c16.x, c16.y
frc_pp r4.w, r5.x
dp3 r4.x, v4, v4
add_pp_sat r4.w, r5.x, -r4
texld r4.x, r4.x, s7
mul_pp r0.w, r4.z, r0
mul_pp r0.w, r0, r4.x
mul_pp r0.w, r0, r4.y
mul r4.xyz, r0.w, c6
mul r4.xyz, r4, c7
mul r4.xyz, r4, r5.w
mul r4.xyz, r4.w, r4
mul_pp r4.w, r0.z, c6
mul r4.xyz, r3.w, r4
mul_pp r3.w, r0, r4
mov r4.w, c13.x
add_pp r0.z, r0, c21.x
mul_pp r0.z, r0, c6.w
mul_pp_sat r3.w, r3, c17.z
add r5.xyz, c6, r4.w
mad_sat r5.xyz, r5, r3.w, c0
mad_pp r4.xyz, r5, v6.x, r4
mul r2.xyz, r4, c14.x
mad_pp r2.xyz, r3, c8, r2
mul_pp r2.w, r0.z, r0
texld r3, r0, s4
mul_pp r0, r1, r3
mul_pp_sat r1.x, r2.w, c21.z
add_pp r1.w, -r1.x, c16.y
mad_pp r0.xyz, -r2, r4, r0
mul_pp r1.xyz, r2, r4
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 152 ALU, 17 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c18, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.x, r1, c13.y
min r2.y, r0.x, r0.w
rcp r1.w, r1.w
mul r2.w, r2.y, r1
frc r1.w, r2.x
add_sat r1.w, r2.x, -r1
mad r1.xyz, r1.w, r1, r0.zxyw
mul r2.z, r2.w, r2.w
mad r2.x, r2.z, c15.y, c15.z
mad r2.x, r2, r2.z, c15.w
mad r2.y, r2.x, r2.z, c16.x
add r1.w, r0.y, -r1.x
add r2.x, r1.w, c13.y
mad r2.y, r2, r2.z, c16
frc r1.w, r2.x
mad r2.y, r2, r2.z, c16.z
add_sat r1.w, r2.x, -r1
mul r2.w, r2.y, r2
add_pp r2.xyz, r0.yxzw, -r1
add r0.x, r0, -r0.w
add r0.y, -r2.w, c16.w
cmp r2.w, -r0.x, r2, r0.y
mad_pp r0.xyz, r1.w, r2, r1
abs r2.x, v2.y
add r1.x, -r2.w, c14.w
cmp r1.x, v2.z, r2.w, r1
mad r1.y, r0.w, c13.z, c13.w
add r1.z, -r2.x, c13.y
mad r1.w, r2.x, c13.z, c13
mad r1.w, r1, r2.x, c14.x
mad r1.w, r1, r2.x, c14.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
rsq r1.z, r1.z
rcp r1.z, r1.z
dsx r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r1.w, r1, r1.z
cmp r2.x, v2.y, c13, c13.y
mul r1.z, r2.x, r1.w
mad r1.y, r0.w, r1, c14.x
cmp r1.x, v2, r1, -r1
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r1.x, c17.x, c17.y
add r1.x, -r0.w, c13.y
mad r0.w, r0, r1.y, c14.y
mov_pp r3.xy, c8
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r1.y, v2.z, c13.x, c13
mul r0.w, r1.y, r1.x
mad r0.w, -r0, c14.z, r1.x
mad r1.x, -r1.z, c14.z, r1.w
mad r0.w, r1.y, c14, r0
mad r1.y, r2.x, c14.w, r1.x
mul r1.x, r0.w, c15
mul r0.w, r1.y, c15.x
add r1.z, r2, r2.w
dsy r2.xy, v2
mul r2.xy, r2, r2
dsx r1.y, r1.x
dsy r1.w, r1.x
add r1.x, r2, r2.y
rsq r1.z, r1.z
mad_pp r0.xy, r0, c17.y, r3
rcp r2.x, r1.z
rsq r1.x, r1.x
rcp r1.z, r1.x
mul r1.x, r2, c17
mul r1.z, r1, c17.x
texldd r2.yw, r0.zwzw, s1, r1, r1.zwzw
mad_pp r4.xy, r2.wyzw, c17.z, c17.w
mul r2.xy, r0, c7.x
mul_pp r3.xy, r4, r4
add_pp_sat r2.w, r3.x, r3.y
add_pp r3.w, -r2, c13.y
texld r2.xyz, r2, s2
rsq_pp r3.w, r3.w
mul r2.w, v0.x, c9.x
rcp_pp r4.z, r3.w
add_pp r3.xyz, -r2, c13.y
mul_sat r2.w, r2, c14.z
mad_pp r5.xyz, r2.w, r3, r2
dp3 r3.x, r4, -v3
mul r6.xyz, r4, r3.x
texldd r3, r0.zwzw, s0, r1, r1.zwzw
mul r0.xy, r0, c12.x
texldd r1, r0.zwzw, s3, r1, r1.zwzw
add_pp_sat r4.w, -r3, c13.y
mad r6.xyz, -r6, c14.z, -v3
dp3_sat r0.z, r6, v1
pow r6, r0.z, c6.x
dp3_pp r0.z, r4, v3
mul_pp r1.w, r1, r4
texld r2, r0, s5
mul_pp r2, r1, r2
mad_pp r2.xyz, -r3, r5, r2
mul_pp r3.xyz, r3, r5
add r5.xyz, v5, c18.yzzw
texld r5, r5, s6
dp4 r4.w, r5, c19
add r5.xyz, v5, c18.zyzw
add r4.xyz, v5, c18.zzyw
mov r0.w, r6.x
texld r6, r4, s6
texld r5, r5, s6
dp4 r4.z, r5, c19
add r5.xyz, v5, c18.y
texld r5, r5, s6
mad_pp r3.xyz, r2.w, r2, r3
dp4 r4.y, r6, c19
dp3 r4.x, v5, v5
rsq r6.x, r4.x
dp4 r4.x, r5, c19
rcp r5.y, r6.x
mul r5.y, r5, c1.w
mad r4, -r5.y, c18.w, r4
mov r5.x, c2
cmp r5, r4, c13.y, r5.x
dp4_pp r4.y, r5, c20.x
add_pp r5.y, r0.z, c13
dp3 r4.x, v4, v4
texld r4.x, r4.x, s7
mul r4.w, r4.x, r4.y
mul r4.xyz, r4.w, c3
mul r4.xyz, r4, c4
mul r4.xyz, r4, r0.w
frc_pp r5.x, r5.y
add_pp_sat r0.w, r5.y, -r5.x
mul r4.xyz, r0.w, r4
mul_pp r0.w, r0.z, c3
mul r4.xyz, r3.w, r4
add_pp r0.z, r0, c18.x
mul_pp r2.w, r0.z, c3
mul_pp r0.w, r4, r0
mov r3.w, c10.x
mul_pp_sat r0.w, r0, c14.z
add r5.xyz, c3, r3.w
mad_sat r5.xyz, r5, r0.w, c0
mad_pp r4.xyz, r5, v6.x, r4
mul r2.xyz, r4, c11.x
texld r0, r0, s4
mul_pp r0, r1, r0
mad_pp r2.xyz, r3, c5, r2
mul_pp r2.w, r2, r4
mul_pp_sat r1.x, r2.w, c20.y
add_pp r1.w, -r1.x, c13.y
mad_pp r0.xyz, -r2, r4, r0
mul_pp r1.xyz, r2, r4
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 153 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c18, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.xyz, v2
add r1.xyz, r0, -r0.zxyw
abs r0.w, v2.z
add r2.x, r1, c13.y
frc r2.y, r2.x
add_sat r2.y, r2.x, -r2
mad r1.xyz, r2.y, r1, r0.zxyw
max r1.w, r0.x, r0
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
add r2.y, r0, -r1.x
add r2.y, r2, c13
mad r2.x, r2.w, c15.y, c15.z
mad r2.x, r2, r2.w, c15.w
mad r2.x, r2, r2.w, c16
frc r2.z, r2.y
mad r3.x, r2, r2.w, c16.y
add_sat r3.y, r2, -r2.z
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r3.y, r2, r1
mad r0.y, r3.x, r2.w, c16.z
mul r0.y, r0, r1.w
add r0.z, -r0.y, c16.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c14.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r1.x, r1
rcp_pp r0.z, r1.x
mul_pp r1.xy, r1.zyzw, r0.z
mov_pp r1.zw, c8.xyxy
mad_pp r3.zw, r1.xyxy, c17.y, r1
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c17, c17.y
add r0.y, -r0.w, c13
mad r0.x, r0.w, c13.z, c13.w
mad r0.x, r0.w, r0, c14
mad r0.x, r0.w, r0, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.x, r0, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c13.x, c13.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c13.y
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mul r7.xy, r3.zwzw, c12.x
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mad r1.x, -r1.y, c14.z, r1
mad r0.z, r0.w, c14.w, r1.x
mul r0.y, r0.z, c15.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c15.x
dsx r2.w, r0.y
dsy r2.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c17.x
mul r2.x, r0.y, c17
texldd r1.yw, r4, s1, r2.zwzw, r2
mad_pp r3.xy, r1.wyzw, c17.z, c17.w
mul_pp r4.zw, r3.xyxy, r3.xyxy
texldd r5, r4, s0, r2.zwzw, r2
mul r0.xy, r3.zwzw, c7.x
texld r0.xyz, r0, s2
add_pp_sat r0.w, r4.z, r4
mul r1.w, v0.x, c9.x
add_pp r0.w, -r0, c13.y
rsq_pp r0.w, r0.w
rcp_pp r3.z, r0.w
dp3 r0.w, r3, -v3
mul r6.xyz, r3, r0.w
texldd r2, r4, s3, r2.zwzw, r2
add_pp_sat r0.w, -r5, c13.y
add_pp r1.xyz, -r0, c13.y
mul_sat r1.w, r1, c14.z
mad_pp r0.xyz, r1.w, r1, r0
texld r1, r7, s5
mul_pp r2.w, r2, r0
mul_pp r4, r2, r1
mad r1.xyz, -r6, c14.z, -v3
mad_pp r4.xyz, -r5, r0, r4
dp3_sat r1.x, r1, v1
mul_pp r5.xyz, r5, r0
pow r0, r1.x, c6.x
mov r3.w, r0.x
add r1.xyz, v5, c18.yzzw
texld r1, r1, s6
dp4 r6.w, r1, c19
add r0.xyz, v5, c18.zyzw
texld r0, r0, s6
dp4 r6.z, r0, c19
add r1.xyz, v5, c18.zzyw
texld r1, r1, s6
dp4 r6.y, r1, c19
dp3_pp r1.w, r3, v3
add r0.xyz, v5, c18.y
texld r0, r0, s6
dp3 r1.x, v5, v5
mul_pp r3.x, r1.w, c3.w
rsq r1.x, r1.x
dp4 r6.x, r0, c19
rcp r0.x, r1.x
mul r0.x, r0, c1.w
mov r1.x, c2
mad r0, -r0.x, c18.w, r6
cmp r0, r0, c13.y, r1.x
dp4_pp r0.y, r0, c20.x
add_pp r1.x, r1.w, c13.y
frc_pp r1.y, r1.x
dp3 r0.x, v4, v4
texld r0.w, v4, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r3.w
add_pp_sat r1.x, r1, -r1.y
mul r0.xyz, r1.x, r0
mul r1.xyz, r5.w, r0
mul_pp r0.y, r0.w, r3.x
add_pp r1.w, r1, c18.x
mul_pp r3.w, r1, c3
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c20.y
mul_pp_sat r3.x, r0.y, c14.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r3.x, c0
mad_pp r0.xyz, r0, v6.x, r1
mad_pp r1.xyz, r4.w, r4, r5
mul r3.xyz, r0, c11.x
mad_pp r3.xyz, r1, c5, r3
texld r1, r7, s4
mul_pp r1, r2, r1
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 135 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
mul r6.xy, r2, c10.x
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r0.xyz, r4, r0.x
mad r1.xyz, -r0, c12.z, -v3
texldd r0, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r1, v1
texldd r1, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r0, c11.y
texld r2, r6, s5
mul_pp r1.w, r1, r5
mul_pp r3, r1, r2
mad_pp r3.xyz, -r0, r5, r3
mul_pp r5.xyz, r0, r5
pow r2, r4.w, c4.x
dp3_pp r0.y, r4, v3
add_pp r2.w, r0.y, c11.y
dp3 r0.x, v4, v4
texld r0.x, r0.x, s6
mov r0.z, r2.x
mul r2.xyz, r0.x, c1
mul r2.xyz, r2, c2
frc_pp r4.x, r2.w
mul r2.xyz, r2, r0.z
add_pp_sat r0.z, r2.w, -r4.x
mul r2.xyz, r0.z, r2
mul_pp r0.z, r0.y, c1.w
mul r4.xyz, r0.w, r2
mul_pp r0.w, r0.x, r0.z
mov r0.z, c8.x
add_pp r0.y, r0, c16.x
mul_pp r0.y, r0, c1.w
mul_pp_sat r0.w, r0, c12.z
add r2.xyz, c1, r0.z
mad_sat r2.xyz, r2, r0.w, c0
mad_pp r2.xyz, r2, v5.x, r4
mad_pp r3.xyz, r3.w, r3, r5
mul r4.xyz, r2, c9.x
mad_pp r4.xyz, r3, c3, r4
mul_pp r2.w, r0.y, r0.x
texld r3, r6, s4
mul_pp r0, r1, r3
mad_pp r0.xyz, -r4, r2, r0
mul_pp_sat r1.x, r2.w, c16.y
add_pp r1.x, -r1, c11.y
mul_pp r2.xyz, r4, r2
mul_pp r0.w, r0, r1.x
mad_pp oC0.xyz, r0.w, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 132 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord8 v4.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
mul r2.x, r1.w, r1.w
add r2.z, r1.x, c11.y
frc r2.w, r2.z
add_sat r2.z, r2, -r2.w
mad r1.xyz, r2.z, r1, r0.zxyw
add r2.z, r0.y, -r1.x
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
mad r2.x, r2.y, r2, c14.z
mul r2.x, r2, r1.w
add r2.z, r2, c11.y
frc r2.y, r2.z
add_sat r2.z, r2, -r2.y
add_pp r3.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.z, r3, r1
abs_pp r0.z, r1.x
add r2.y, -r2.x, c14.w
add r1.w, r0.x, -r0
cmp r1.w, -r1, r2.x, r2.y
add r0.x, -r1.w, c12.w
cmp r0.x, v2.z, r1.w, r0
cmp r0.y, v2.x, r0.x, -r0.x
mad r6.z, r0.y, c15.x, c15.y
rcp_pp r0.x, r0.z
add r0.z, -r0.w, c11.y
mad r0.y, r0.w, c11.z, c11.w
mad r0.y, r0.w, r0, c12.x
rsq r0.z, r0.z
mad r0.y, r0.w, r0, c12
rcp r0.z, r0.z
mul r1.w, r0.y, r0.z
abs r0.y, v2
cmp r1.x, v2.z, c11, c11.y
mul r2.x, r1, r1.w
mad r1.w, -r2.x, c12.z, r1
add r0.w, -r0.y, c11.y
mad r0.z, r0.y, c11, c11.w
mad r0.z, r0, r0.y, c12.x
rsq r0.w, r0.w
dsy r2.xy, v2
mad r0.y, r0.z, r0, c12
rcp r0.w, r0.w
mul r0.z, r0.y, r0.w
cmp r0.y, v2, c11.x, c11
mul r0.w, r0.y, r0.z
mad r0.z, -r0.w, c12, r0
mad r0.w, r1.x, c12, r1
mad r0.y, r0, c12.w, r0.z
mul r0.z, r0.w, c13.x
mul r6.w, r0.y, c13.x
dsx r3.w, r0.z
dsy r3.y, r0.z
dsx r0.zw, v2.xyxy
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r3.z, r0.y, c15.x
mul r3.x, r0.z, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r1.xy, r1.zyzw, r0.x
mov_pp r0.zw, c6.xyxy
mad_pp r1.xy, r1, c15.y, r0.zwzw
mul_pp r0.xy, r4, r4
add_pp_sat r0.z, r0.x, r0.y
add_pp r0.w, -r0.z, c11.y
mul r0.xy, r1, c5.x
texld r0.xyz, r0, s2
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r0.w, v0.x, c7.x
dp3 r1.z, r4, -v3
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r5.xyz, r0.w, r2, r0
mul r0.xyz, r4, r1.z
mul r6.xy, r1, c10.x
texldd r1, r6.zwzw, s0, r3.zwzw, r3
mad r0.xyz, -r0, c12.z, -v3
dp3_sat r4.w, r0, v1
pow r0, r4.w, c4.x
add_pp_sat r0.y, -r1.w, c11
texldd r3, r6.zwzw, s3, r3.zwzw, r3
dp3_pp r0.w, r4, v3
add_pp r4.x, r0.w, c11.y
frc_pp r4.y, r4.x
mul_pp r3.w, r3, r0.y
mov r4.z, r0.x
texld r2, r6, s5
mul_pp r2, r3, r2
mad_pp r2.xyz, -r1, r5, r2
mov r0.xyz, c1
mul r0.xyz, c2, r0
mul_pp r1.xyz, r1, r5
mul r0.xyz, r0, r4.z
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r0.y, r0.w, c1.w
add_pp r0.w, r0, c16.x
mul_pp r0.w, r0, c1
mul_pp_sat r0.w, r0, c16.y
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v4.x, r4
mad_pp r1.xyz, r2.w, r2, r1
mul r4.xyz, r0, c9.x
mad_pp r2.xyz, r1, c3, r4
texld r1, r6, s4
mul_pp r1, r3, r1
mad_pp r1.xyz, -r2, r0, r1
mul_pp r2.xyz, r2, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 140 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c10.x
mad r2.xyz, -r1, c12.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c11.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c4.x
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
mov r5.x, r0
dp3_pp r4.w, r4, v3
rcp r0.x, v4.w
mad r4.xy, v4, r0.x, c15.y
texld r0.w, r4, s6
add_pp r4.x, r4.w, c11.y
frc_pp r4.y, r4.x
dp3 r0.x, v4, v4
cmp r0.y, -v4.z, c11.x, c11
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.w, r0.y, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c1.w
mul_pp r0.y, r0.w, r5.x
mad_pp r1.xyz, r3.w, r3, r1
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v5.x, r4
mul r3.xyz, r0, c9.x
add_pp r1.w, r4, c16.x
mul_pp r3.w, r1, c1
mad_pp r3.xyz, r1, c3, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c16.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 136 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c10.x
mad r2.xyz, -r1, c12.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c11.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c4.x
dp3_pp r4.w, r4, v3
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
mov r5.x, r0
add_pp r4.x, r4.w, c11.y
frc_pp r4.y, r4.x
dp3 r0.x, v4, v4
mad_pp r1.xyz, r3.w, r3, r1
texld r0.x, r0.x, s6
texld r0.w, v4, s7
mul r0.w, r0.x, r0
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c1.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v5.x, r4
mul r3.xyz, r0, c9.x
add_pp r1.w, r4, c16.x
mul_pp r3.w, r1, c1
mad_pp r3.xyz, r1, c3, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c16.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 134 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c10.x
mad r2.xyz, -r1, c12.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c11.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c4.x
dp3_pp r4.w, r4, v3
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
add_pp r4.x, r4.w, c11.y
frc_pp r4.y, r4.x
mad_pp r1.xyz, r3.w, r3, r1
mov r5.x, r0
texld r0.w, v4, s6
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c1.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v5.x, r4
mul r3.xyz, r0, c9.x
add_pp r1.w, r4, c16.x
mul_pp r3.w, r1, c1
mad_pp r3.xyz, r1, c3, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c16.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 145 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c12
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c12.y
mad r2.y, r2.x, c14, c14.z
mad r2.y, r2, r2.x, c14.w
mad r2.y, r2, r2.x, c15.x
mad r2.y, r2, r2.x, c15
frc r2.w, r2.z
mad r2.x, r2.y, r2, c15.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c15.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c13.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c16.x, c16.y
add r0.y, -r0.w, c12
mad r0.x, r0.w, c12.z, c12.w
mad r0.x, r0.w, r0, c13
mad r0.x, r0.w, r0, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c12.x, c12.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r1.z, -r1.w, c13, r1
mad r0.z, r0.w, c13.w, r1
mul r0.y, r0.z, c14.x
mov_pp r1.zw, c7.xyxy
mad_pp r2.xy, r1, c16.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c14.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c16.x
mul r3.x, r0.y, c16
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c6.x
texld r0.xyz, r0, s2
mul r6.xy, r2, c11.x
texldd r2, r6.zwzw, s0, r3.zwzw, r3
add_pp r0.w, -r0, c12.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c8.x
add_pp r1.xyz, -r0, c12.y
mul_sat r0.w, r1, c13.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mad r1.xyz, -r1, c13.z, -v3
dp3_sat r4.w, r1, v1
texldd r1, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r2, c12.y
texld r0, r6, s5
mul_pp r1.w, r1, r5
mul_pp r3, r1, r0
pow r0, r4.w, c5.x
mad_pp r3.xyz, -r2, r5, r3
mul_pp r2.xyz, r2, r5
mov r5.x, r0
dp3_pp r4.w, r4, v3
mad_pp r2.xyz, r3.w, r3, r2
texldp r0.x, v5, s8
rcp r0.y, v5.w
mad r0.y, -v5.z, r0, r0.x
rcp r0.x, v4.w
mad r4.xy, v4, r0.x, c16.y
texld r0.w, r4, s6
add_pp r4.x, r4.w, c12.y
frc_pp r4.y, r4.x
mov r0.z, c1.x
cmp r0.z, r0.y, c12.y, r0
dp3 r0.x, v4, v4
cmp r0.y, -v4.z, c12.x, c12
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r2.w, r0
mul_pp r5.x, r4.w, c2.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r2.w, r0.y, c13.z
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r2.w, c0
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c10.x
add_pp r2.w, r4, c17.x
mul_pp r3.w, r2, c2
mad_pp r3.xyz, r2, c4, r3
texld r2, r6, s4
mul_pp r1, r1, r2
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c17.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c12.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Vector 7 [_DetailOffset]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_Albedo]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 144 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c17, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c12
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c12.y
mad r2.y, r2.x, c14, c14.z
mad r2.y, r2, r2.x, c14.w
mad r2.y, r2, r2.x, c15.x
mad r2.y, r2, r2.x, c15
frc r2.w, r2.z
mad r2.x, r2.y, r2, c15.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c15.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c13.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c16.x, c16.y
add r0.y, -r0.w, c12
mad r0.x, r0.w, c12.z, c12.w
mad r0.x, r0.w, r0, c13
mad r0.x, r0.w, r0, c13.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c12.x, c12.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c12.y
mad r0.y, r0.x, c12.z, c12.w
mad r0.y, r0, r0.x, c13.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c13.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mad r1.z, -r1.w, c13, r1
mad r0.z, r0.w, c13.w, r1
mul r0.y, r0.z, c14.x
mov_pp r1.zw, c7.xyxy
mad_pp r2.xy, r1, c16.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c14.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c16.x
mul r3.x, r0.y, c16
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c16.z, c16.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c6.x
texld r0.xyz, r0, s2
mul r6.xy, r2, c11.x
texldd r2, r6.zwzw, s0, r3.zwzw, r3
add_pp r0.w, -r0, c12.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c8.x
add_pp r1.xyz, -r0, c12.y
mul_sat r0.w, r1, c13.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mad r1.xyz, -r1, c13.z, -v3
dp3_sat r4.w, r1, v1
texldd r1, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r2, c12.y
texld r0, r6, s5
mul_pp r1.w, r1, r5
mul_pp r3, r1, r0
pow r0, r4.w, c5.x
mad_pp r3.xyz, -r2, r5, r3
mul_pp r2.xyz, r2, r5
mov r5.x, r0
mov r0.x, c1
add r0.z, c12.y, -r0.x
texldp r0.x, v5, s8
mad r0.z, r0.x, r0, c1.x
dp3 r0.x, v4, v4
dp3_pp r4.w, r4, v3
rcp r0.y, v4.w
mad r4.xy, v4, r0.y, c16.y
texld r0.w, r4, s6
add_pp r4.x, r4.w, c12.y
frc_pp r4.y, r4.x
cmp r0.y, -v4.z, c12.x, c12
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r2.w, r0
mul_pp r5.x, r4.w, c2.w
mul_pp r0.y, r0.w, r5.x
mad_pp r2.xyz, r3.w, r3, r2
mul_pp_sat r2.w, r0.y, c13.z
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r2.w, c0
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c10.x
add_pp r2.w, r4, c17.x
mul_pp r3.w, r2, c2
mad_pp r3.xyz, r2, c4, r3
texld r2, r6, s4
mul_pp r1, r1, r2
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c17.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c12.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 134 ALU, 13 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord8 v5.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c10.x
mad r2.xyz, -r1, c12.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c11.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c4.x
dp3_pp r0.w, r4, v3
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
add_pp r4.x, r0.w, c11.y
frc_pp r4.y, r4.x
mov r4.w, r0.x
texldp r5.x, v4, s6
mul r0.xyz, r5.x, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r4.w
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r4.w, r0, c1
mul_pp r0.y, r5.x, r4.w
add_pp r0.w, r0, c16.x
mul_pp r0.w, r0, c1
mul_pp r0.w, r0, r5.x
mul_pp_sat r0.w, r0, c16.y
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v5.x, r4
mad_pp r1.xyz, r3.w, r3, r1
mul r3.xyz, r0, c9.x
mad_pp r3.xyz, r1, c3, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightColor0]
Vector 2 [_SpecColor]
Vector 3 [_Color]
Float 4 [_Shininess]
Float 5 [_DetailScale]
Vector 6 [_DetailOffset]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_Albedo]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 135 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xy
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c11
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c11.y
mad r2.y, r2.x, c13, c13.z
mad r2.y, r2, r2.x, c13.w
mad r2.y, r2, r2.x, c14.x
mad r2.y, r2, r2.x, c14
frc r2.w, r2.z
mad r2.x, r2.y, r2, c14.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c14.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c12.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c15.x, c15.y
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c11.x, c11.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.z, -r1.w, c12, r1
mad r0.z, r0.w, c12.w, r1
mul r0.y, r0.z, c13.x
mov_pp r1.zw, c6.xyxy
mad_pp r2.xy, r1, c15.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c13.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c15.x
mul r3.x, r0.y, c15
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c15.z, c15.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c5.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c11.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c7.x
add_pp r1.xyz, -r0, c11.y
mul_sat r0.w, r1, c12.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c10.x
mad r2.xyz, -r1, c12.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c11.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c4.x
dp3_pp r4.w, r4, v3
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
mov r5.x, r0
add_pp r4.x, r4.w, c11.y
frc_pp r4.y, r4.x
mad_pp r1.xyz, r3.w, r3, r1
texldp r0.x, v5, s6
texld r0.w, v4, s7
mul r0.w, r0, r0.x
mul r0.xyz, r0.w, c1
mul r0.xyz, r0, c2
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c1.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r1.w, r0.y, c12.z
mov r0.x, c8
add r0.xyz, c1, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c9.x
add_pp r1.w, r4, c16.x
mul_pp r3.w, r1, c1
mad_pp r3.xyz, r1, c3, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c16.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 144 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c18, -0.01000214, 0.97000003, 4.03944778, 0
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c13
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c13.y
mad r2.y, r2.x, c15, c15.z
mad r2.y, r2, r2.x, c15.w
mad r2.y, r2, r2.x, c16.x
mad r2.y, r2, r2.x, c16
frc r2.w, r2.z
mad r2.x, r2.y, r2, c16.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c16.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c14.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c17.x, c17.y
add r0.y, -r0.w, c13
mad r0.x, r0.w, c13.z, c13.w
mad r0.x, r0.w, r0, c14
mad r0.x, r0.w, r0, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c13.x, c13.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c13.y
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mad r1.z, -r1.w, c14, r1
mad r0.z, r0.w, c14.w, r1
mul r0.y, r0.z, c15.x
mov_pp r1.zw, c8.xyxy
mad_pp r2.xy, r1, c17.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c15.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c17.z, c17.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c7.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c13.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c9.x
add_pp r1.xyz, -r0, c13.y
mul_sat r0.w, r1, c14.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c12.x
mad r2.xyz, -r1, c14.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c13.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c6.x
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
mov r5.x, r0
dp3_pp r4.w, r4, v3
dp3 r0.x, v5, v5
rsq r4.x, r0.x
texld r0, v5, s6
dp4 r0.y, r0, c19
rcp r4.x, r4.x
mul r0.x, r4, c1.w
mad r0.y, -r0.x, c18, r0
mov r0.z, c2.x
add_pp r4.x, r4.w, c13.y
frc_pp r4.y, r4.x
dp3 r0.x, v4, v4
mad_pp r1.xyz, r3.w, r3, r1
cmp r0.y, r0, c13, r0.z
texld r0.x, r0.x, s7
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c3.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r1.w, r0.y, c14.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c11.x
add_pp r1.w, r4, c18.x
mul_pp r3.w, r1, c3
mad_pp r3.xyz, r1, c5, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c18.z
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 145 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c18, -0.01000214, 0.97000003, 4.03944778, 0
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.y, r1.x, c13
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
frc r2.z, r2.y
add_sat r2.z, r2.y, -r2
mad r1.xyz, r2.z, r1, r0.zxyw
mul r2.x, r1.w, r1.w
add r2.z, r0.y, -r1.x
add r2.z, r2, c13.y
mad r2.y, r2.x, c15, c15.z
mad r2.y, r2, r2.x, c15.w
mad r2.y, r2, r2.x, c16.x
mad r2.y, r2, r2.x, c16
frc r2.w, r2.z
mad r2.x, r2.y, r2, c16.z
mul r1.w, r2.x, r1
add_sat r2.w, r2.z, -r2
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r2.w, r2, r1
add r0.y, -r1.w, c16.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r1.w, r0.y
add r0.y, -r0.x, c14.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r0.z, r1.x
rcp_pp r0.y, r0.z
mul_pp r1.xy, r1.zyzw, r0.y
cmp r0.x, v2, r0, -r0
mad r6.z, r0.x, c17.x, c17.y
add r0.y, -r0.w, c13
mad r0.x, r0.w, c13.z, c13.w
mad r0.x, r0.w, r0, c14
mad r0.x, r0.w, r0, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.z, r0.x, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c13.x, c13.y
mul r1.w, r0, r1.z
add r0.z, -r0.x, c13.y
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mad r1.z, -r1.w, c14, r1
mad r0.z, r0.w, c14.w, r1
mul r0.y, r0.z, c15.x
mov_pp r1.zw, c8.xyxy
mad_pp r2.xy, r1, c17.y, r1.zwzw
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
dsx r3.w, r0.y
dsy r3.y, r0
mul r6.w, r0.x, c15.x
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0.yw, r6.zwzw, s1, r3.zwzw, r3
mad_pp r4.xy, r0.wyzw, c17.z, c17.w
mul_pp r0.zw, r4.xyxy, r4.xyxy
add_pp_sat r0.w, r0.z, r0
mul r0.xy, r2, c7.x
texld r0.xyz, r0, s2
add_pp r0.w, -r0, c13.y
rsq_pp r0.w, r0.w
rcp_pp r4.z, r0.w
mul r1.w, v0.x, c9.x
add_pp r1.xyz, -r0, c13.y
mul_sat r0.w, r1, c14.z
mad_pp r5.xyz, r0.w, r1, r0
dp3 r0.x, r4, -v3
mul r1.xyz, r4, r0.x
mul r6.xy, r2, c12.x
mad r2.xyz, -r1, c14.z, -v3
texldd r1, r6.zwzw, s0, r3.zwzw, r3
dp3_sat r4.w, r2, v1
texldd r2, r6.zwzw, s3, r3.zwzw, r3
add_pp_sat r5.w, -r1, c13.y
texld r0, r6, s5
mul_pp r2.w, r2, r5
mul_pp r3, r2, r0
pow r0, r4.w, c6.x
dp3_pp r4.w, r4, v3
mad_pp r3.xyz, -r1, r5, r3
mul_pp r1.xyz, r1, r5
mov r5.x, r0
texld r0, v5, s6
dp4 r0.y, r0, c19
dp3 r4.x, v5, v5
rsq r4.x, r4.x
rcp r0.x, r4.x
add_pp r4.x, r4.w, c13.y
frc_pp r4.y, r4.x
mul r0.x, r0, c1.w
mad r0.x, -r0, c18.y, r0.y
mov r0.z, c2.x
cmp r0.y, r0.x, c13, r0.z
dp3 r0.x, v4, v4
mad_pp r1.xyz, r3.w, r3, r1
texld r0.w, v4, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r5.x
add_pp_sat r4.x, r4, -r4.y
mul r0.xyz, r4.x, r0
mul r4.xyz, r1.w, r0
mul_pp r5.x, r4.w, c3.w
mul_pp r0.y, r0.w, r5.x
mul_pp_sat r1.w, r0.y, c14.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r1.w, c0
mad_pp r0.xyz, r0, v6.x, r4
mul r3.xyz, r0, c11.x
add_pp r1.w, r4, c18.x
mul_pp r3.w, r1, c3
mad_pp r3.xyz, r1, c5, r3
texld r1, r6, s4
mul_pp r1, r2, r1
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c18.z
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Vector 11 [_DetailOffset]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 153 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c21, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.x, r1, c16.y
min r2.y, r0.x, r0.w
rcp r1.w, r1.w
mul r2.w, r2.y, r1
frc r1.w, r2.x
add_sat r1.w, r2.x, -r1
mad r1.xyz, r1.w, r1, r0.zxyw
mul r2.z, r2.w, r2.w
mad r2.x, r2.z, c18.y, c18.z
mad r2.x, r2, r2.z, c18.w
mad r2.y, r2.x, r2.z, c19.x
add r1.w, r0.y, -r1.x
add r2.x, r1.w, c16.y
mad r2.y, r2, r2.z, c19
frc r1.w, r2.x
mad r2.y, r2, r2.z, c19.z
add_sat r1.w, r2.x, -r1
mul r2.w, r2.y, r2
add_pp r2.xyz, r0.yxzw, -r1
add r0.x, r0, -r0.w
add r0.y, -r2.w, c19.w
cmp r2.w, -r0.x, r2, r0.y
mad_pp r0.xyz, r1.w, r2, r1
abs r2.x, v2.y
add r1.x, -r2.w, c17.w
cmp r1.x, v2.z, r2.w, r1
mad r1.y, r0.w, c16.z, c16.w
add r1.z, -r2.x, c16.y
mad r1.w, r2.x, c16.z, c16
mad r1.w, r1, r2.x, c17.x
mad r1.w, r1, r2.x, c17.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
rsq r1.z, r1.z
rcp r1.z, r1.z
dsx r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r1.w, r1, r1.z
cmp r2.x, v2.y, c16, c16.y
mul r1.z, r2.x, r1.w
mad r1.y, r0.w, r1, c17.x
cmp r1.x, v2, r1, -r1
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r1.x, c20.x, c20.y
add r1.x, -r0.w, c16.y
mad r0.w, r0, r1.y, c17.y
mov_pp r3.xy, c11
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r1.y, v2.z, c16.x, c16
mul r0.w, r1.y, r1.x
mad r0.w, -r0, c17.z, r1.x
mad r1.x, -r1.z, c17.z, r1.w
mad r0.w, r1.y, c17, r0
mad r1.y, r2.x, c17.w, r1.x
mul r1.x, r0.w, c18
mul r0.w, r1.y, c18.x
add r1.z, r2, r2.w
dsy r2.xy, v2
mul r2.xy, r2, r2
dsx r1.y, r1.x
dsy r1.w, r1.x
add r1.x, r2, r2.y
rsq r1.z, r1.z
mad_pp r0.xy, r0, c20.y, r3
rcp r2.x, r1.z
rsq r1.x, r1.x
rcp r1.z, r1.x
mul r1.x, r2, c20
mul r1.z, r1, c20.x
texldd r2.yw, r0.zwzw, s1, r1, r1.zwzw
mad_pp r4.xy, r2.wyzw, c20.z, c20.w
mul r2.xy, r0, c10.x
mul_pp r3.xy, r4, r4
add_pp_sat r2.w, r3.x, r3.y
add_pp r3.w, -r2, c16.y
texld r2.xyz, r2, s2
rsq_pp r3.w, r3.w
mul r2.w, v0.x, c12.x
rcp_pp r4.z, r3.w
add_pp r3.xyz, -r2, c16.y
mul_sat r2.w, r2, c17.z
mad_pp r5.xyz, r2.w, r3, r2
dp3 r3.x, r4, -v3
mul r6.xyz, r4, r3.x
texldd r3, r0.zwzw, s0, r1, r1.zwzw
texldd r1, r0.zwzw, s3, r1, r1.zwzw
mul r0.xy, r0, c15.x
add_pp_sat r4.w, -r3, c16.y
mad r6.xyz, -r6, c17.z, -v3
dp3_sat r0.z, r6, v1
pow r6, r0.z, c9.x
rcp r0.w, v5.w
dp3_pp r0.z, r4, v3
mul_pp r1.w, r1, r4
texld r2, r0, s5
mul_pp r2, r1, r2
mad_pp r2.xyz, -r3, r5, r2
mul_pp r3.xyz, r3, r5
mov r5.x, r6
mad r6.xy, v5, r0.w, c5
texld r4.x, r6, s8
mad_pp r3.xyz, r2.w, r2, r3
mad r6.xy, v5, r0.w, c4
mov r4.w, r4.x
texld r4.x, r6, s8
mad r6.xy, v5, r0.w, c3
mov r4.z, r4.x
texld r4.x, r6, s8
mad r6.xy, v5, r0.w, c2
mov r4.y, r4.x
texld r4.x, r6, s8
mad r4, -v5.z, r0.w, r4
mov r5.y, c1.x
cmp r4, r4, c16.y, r5.y
dp4_pp r4.y, r4, c21.y
add_pp r5.y, r0.z, c16
rcp r0.w, v4.w
frc_pp r4.w, r5.y
mad r6.xy, v4, r0.w, c20.y
dp3 r4.x, v4, v4
add_pp_sat r4.w, r5.y, -r4
texld r4.x, r4.x, s7
cmp r4.z, -v4, c16.x, c16.y
texld r0.w, r6, s6
mul_pp r0.w, r4.z, r0
mul_pp r0.w, r0, r4.x
mul_pp r0.w, r0, r4.y
mul r4.xyz, r0.w, c6
mul r4.xyz, r4, c7
mul r4.xyz, r4, r5.x
mul r4.xyz, r4.w, r4
mul_pp r4.w, r0.z, c6
mul r4.xyz, r3.w, r4
mul_pp r3.w, r0, r4
mov r4.w, c13.x
add_pp r0.z, r0, c21.x
mul_pp r0.z, r0, c6.w
mul_pp_sat r3.w, r3, c17.z
add r5.xyz, c6, r4.w
mad_sat r5.xyz, r5, r3.w, c0
mad_pp r4.xyz, r5, v6.x, r4
mul r2.xyz, r4, c14.x
mad_pp r2.xyz, r3, c8, r2
mul_pp r2.w, r0.z, r0
texld r3, r0, s4
mul_pp r0, r1, r3
mul_pp_sat r1.x, r2.w, c21.z
add_pp r1.w, -r1.x, c16.y
mad_pp r0.xyz, -r2, r4, r0
mul_pp r1.xyz, r2, r4
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightShadowData]
Vector 2 [_ShadowOffsets0]
Vector 3 [_ShadowOffsets1]
Vector 4 [_ShadowOffsets2]
Vector 5 [_ShadowOffsets3]
Vector 6 [_LightColor0]
Vector 7 [_SpecColor]
Vector 8 [_Color]
Float 9 [_Shininess]
Float 10 [_DetailScale]
Vector 11 [_DetailOffset]
Float 12 [_DetailDist]
Float 13 [_MinLight]
Float 14 [_Albedo]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 153 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c21, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4
dcl_texcoord7 v5
dcl_texcoord8 v6.x
abs r0.xyz, v2
add r1.xyz, r0, -r0.zxyw
abs r0.w, v2.z
add r2.x, r1, c16.y
frc r1.w, r2.x
add_sat r1.w, r2.x, -r1
mad r1.xyz, r1.w, r1, r0.zxyw
max r2.y, r0.x, r0.w
rcp r2.x, r2.y
min r2.y, r0.x, r0.w
mul r3.y, r2, r2.x
mul r3.x, r3.y, r3.y
add r1.w, r0.y, -r1.x
add r2.x, r1.w, c16.y
mad r2.y, r3.x, c18, c18.z
mad r2.y, r2, r3.x, c18.w
mad r2.y, r2, r3.x, c19.x
frc r1.w, r2.x
mad r2.w, r2.y, r3.x, c19.y
add_sat r1.w, r2.x, -r1
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r1.w, r2, r1
mad r0.y, r2.w, r3.x, c19.z
mul r1.w, r0.y, r3.y
dsx r2.zw, v2.xyxy
mul r2.zw, r2, r2
abs r2.x, v2.y
add r0.x, r0, -r0.w
add r0.z, -r1.w, c19.w
cmp r0.z, -r0.x, r1.w, r0
abs_pp r0.y, r1.x
rcp_pp r0.x, r0.y
mul_pp r1.xy, r1.zyzw, r0.x
add r0.y, -r0.z, c17.w
cmp r0.z, v2, r0, r0.y
add r1.z, -r2.x, c16.y
mad r1.w, r2.x, c16.z, c16
mad r1.w, r1, r2.x, c17.x
mad r1.w, r1, r2.x, c17.y
mov_pp r0.xy, c11
mad_pp r0.xy, r1, c20.y, r0
add r1.x, -r0.w, c16.y
mad r1.y, r0.w, c16.z, c16.w
mad r1.y, r0.w, r1, c17.x
mad r0.w, r0, r1.y, c17.y
cmp r0.z, v2.x, r0, -r0
rsq r1.x, r1.x
rcp r1.x, r1.x
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r1.w, r1, r1.z
cmp r2.x, v2.y, c16, c16.y
mad r0.z, r0, c20.x, c20.y
mul r1.x, r0.w, r1
cmp r1.y, v2.z, c16.x, c16
mul r0.w, r1.y, r1.x
mad r0.w, -r0, c17.z, r1.x
mul r1.z, r2.x, r1.w
mad r1.x, -r1.z, c17.z, r1.w
add r1.z, r2, r2.w
mad r0.w, r1.y, c17, r0
mad r1.y, r2.x, c17.w, r1.x
mul r1.x, r0.w, c18
mul r0.w, r1.y, c18.x
dsy r2.xy, v2
mul r2.w, v0.x, c12.x
mul r2.xy, r2, r2
dsx r1.y, r1.x
dsy r1.w, r1.x
add r1.x, r2, r2.y
rsq r1.z, r1.z
rcp r2.x, r1.z
rsq r1.x, r1.x
rcp r1.z, r1.x
mul r1.x, r2, c20
mul r2.xy, r0, c10.x
mul r1.z, r1, c20.x
texldd r3.yw, r0.zwzw, s1, r1, r1.zwzw
mad_pp r4.xy, r3.wyzw, c20.z, c20.w
texld r2.xyz, r2, s2
mul_pp r4.zw, r4.xyxy, r4.xyxy
add_pp_sat r3.w, r4.z, r4
add_pp r3.xyz, -r2, c16.y
mul_sat r2.w, r2, c17.z
mad_pp r5.xyz, r2.w, r3, r2
add_pp r3.w, -r3, c16.y
rsq_pp r2.x, r3.w
texldd r3, r0.zwzw, s0, r1, r1.zwzw
texldd r1, r0.zwzw, s3, r1, r1.zwzw
rcp_pp r4.z, r2.x
mul r0.xy, r0, c15.x
dp3 r4.w, r4, -v3
mul r6.xyz, r4, r4.w
add_pp_sat r4.w, -r3, c16.y
mad r6.xyz, -r6, c17.z, -v3
mul_pp r1.w, r1, r4
texld r2, r0, s5
mul_pp r2, r1, r2
mad_pp r2.xyz, -r3, r5, r2
mul_pp r3.xyz, r3, r5
dp3_sat r0.z, r6, v1
pow r5, r0.z, c9.x
rcp r0.w, v5.w
dp3_pp r0.z, r4, v3
mad r4.xyz, v5, r0.w, c4
texld r4.x, r4, s8
mov_pp r4.z, r4.x
mad_pp r3.xyz, r2.w, r2, r3
mad r6.xyz, v5, r0.w, c5
mov r5.w, r5.x
texld r5.x, r6, s8
mov_pp r4.w, r5.x
mad r5.xyz, v5, r0.w, c3
texld r5.x, r5, s8
mov_pp r4.y, r5.x
mad r5.xyz, v5, r0.w, c2
mov r4.x, c1
add r0.w, c16.y, -r4.x
texld r4.x, r5, s8
mad r4, r4, r0.w, c1.x
dp4_pp r4.y, r4, c21.y
rcp r0.w, v4.w
mad r5.xy, v4, r0.w, c20.y
texld r0.w, r5, s6
add_pp r5.x, r0.z, c16.y
cmp r4.z, -v4, c16.x, c16.y
frc_pp r4.w, r5.x
dp3 r4.x, v4, v4
add_pp_sat r4.w, r5.x, -r4
texld r4.x, r4.x, s7
mul_pp r0.w, r4.z, r0
mul_pp r0.w, r0, r4.x
mul_pp r0.w, r0, r4.y
mul r4.xyz, r0.w, c6
mul r4.xyz, r4, c7
mul r4.xyz, r4, r5.w
mul r4.xyz, r4.w, r4
mul_pp r4.w, r0.z, c6
mul r4.xyz, r3.w, r4
mul_pp r3.w, r0, r4
mov r4.w, c13.x
add_pp r0.z, r0, c21.x
mul_pp r0.z, r0, c6.w
mul_pp_sat r3.w, r3, c17.z
add r5.xyz, c6, r4.w
mad_sat r5.xyz, r5, r3.w, c0
mad_pp r4.xyz, r5, v6.x, r4
mul r2.xyz, r4, c14.x
mad_pp r2.xyz, r3, c8, r2
mul_pp r2.w, r0.z, r0
texld r3, r0, s4
mul_pp r0, r1, r3
mul_pp_sat r1.x, r2.w, c21.z
add_pp r1.w, -r1.x, c16.y
mad_pp r0.xyz, -r2, r4, r0
mul_pp r1.xyz, r2, r4
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 152 ALU, 17 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c18, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.xyz, v2
abs r0.w, v2.z
add r1.xyz, r0, -r0.zxyw
max r1.w, r0.x, r0
add r2.x, r1, c13.y
min r2.y, r0.x, r0.w
rcp r1.w, r1.w
mul r2.w, r2.y, r1
frc r1.w, r2.x
add_sat r1.w, r2.x, -r1
mad r1.xyz, r1.w, r1, r0.zxyw
mul r2.z, r2.w, r2.w
mad r2.x, r2.z, c15.y, c15.z
mad r2.x, r2, r2.z, c15.w
mad r2.y, r2.x, r2.z, c16.x
add r1.w, r0.y, -r1.x
add r2.x, r1.w, c13.y
mad r2.y, r2, r2.z, c16
frc r1.w, r2.x
mad r2.y, r2, r2.z, c16.z
add_sat r1.w, r2.x, -r1
mul r2.w, r2.y, r2
add_pp r2.xyz, r0.yxzw, -r1
add r0.x, r0, -r0.w
add r0.y, -r2.w, c16.w
cmp r2.w, -r0.x, r2, r0.y
mad_pp r0.xyz, r1.w, r2, r1
abs r2.x, v2.y
add r1.x, -r2.w, c14.w
cmp r1.x, v2.z, r2.w, r1
mad r1.y, r0.w, c13.z, c13.w
add r1.z, -r2.x, c13.y
mad r1.w, r2.x, c13.z, c13
mad r1.w, r1, r2.x, c14.x
mad r1.w, r1, r2.x, c14.y
abs_pp r0.x, r0
rcp_pp r0.x, r0.x
rsq r1.z, r1.z
rcp r1.z, r1.z
dsx r2.zw, v2.xyxy
mul r2.zw, r2, r2
mul r1.w, r1, r1.z
cmp r2.x, v2.y, c13, c13.y
mul r1.z, r2.x, r1.w
mad r1.y, r0.w, r1, c14.x
cmp r1.x, v2, r1, -r1
mul_pp r0.xy, r0.zyzw, r0.x
mad r0.z, r1.x, c17.x, c17.y
add r1.x, -r0.w, c13.y
mad r0.w, r0, r1.y, c14.y
mov_pp r3.xy, c8
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r1.y, v2.z, c13.x, c13
mul r0.w, r1.y, r1.x
mad r0.w, -r0, c14.z, r1.x
mad r1.x, -r1.z, c14.z, r1.w
mad r0.w, r1.y, c14, r0
mad r1.y, r2.x, c14.w, r1.x
mul r1.x, r0.w, c15
mul r0.w, r1.y, c15.x
add r1.z, r2, r2.w
dsy r2.xy, v2
mul r2.xy, r2, r2
dsx r1.y, r1.x
dsy r1.w, r1.x
add r1.x, r2, r2.y
rsq r1.z, r1.z
mad_pp r0.xy, r0, c17.y, r3
rcp r2.x, r1.z
rsq r1.x, r1.x
rcp r1.z, r1.x
mul r1.x, r2, c17
mul r1.z, r1, c17.x
texldd r2.yw, r0.zwzw, s1, r1, r1.zwzw
mad_pp r4.xy, r2.wyzw, c17.z, c17.w
mul r2.xy, r0, c7.x
mul_pp r3.xy, r4, r4
add_pp_sat r2.w, r3.x, r3.y
add_pp r3.w, -r2, c13.y
texld r2.xyz, r2, s2
rsq_pp r3.w, r3.w
mul r2.w, v0.x, c9.x
rcp_pp r4.z, r3.w
add_pp r3.xyz, -r2, c13.y
mul_sat r2.w, r2, c14.z
mad_pp r5.xyz, r2.w, r3, r2
dp3 r3.x, r4, -v3
mul r6.xyz, r4, r3.x
texldd r3, r0.zwzw, s0, r1, r1.zwzw
mul r0.xy, r0, c12.x
texldd r1, r0.zwzw, s3, r1, r1.zwzw
add_pp_sat r4.w, -r3, c13.y
mad r6.xyz, -r6, c14.z, -v3
dp3_sat r0.z, r6, v1
pow r6, r0.z, c6.x
dp3_pp r0.z, r4, v3
mul_pp r1.w, r1, r4
texld r2, r0, s5
mul_pp r2, r1, r2
mad_pp r2.xyz, -r3, r5, r2
mul_pp r3.xyz, r3, r5
add r5.xyz, v5, c18.yzzw
texld r5, r5, s6
dp4 r4.w, r5, c19
add r5.xyz, v5, c18.zyzw
add r4.xyz, v5, c18.zzyw
mov r0.w, r6.x
texld r6, r4, s6
texld r5, r5, s6
dp4 r4.z, r5, c19
add r5.xyz, v5, c18.y
texld r5, r5, s6
mad_pp r3.xyz, r2.w, r2, r3
dp4 r4.y, r6, c19
dp3 r4.x, v5, v5
rsq r6.x, r4.x
dp4 r4.x, r5, c19
rcp r5.y, r6.x
mul r5.y, r5, c1.w
mad r4, -r5.y, c18.w, r4
mov r5.x, c2
cmp r5, r4, c13.y, r5.x
dp4_pp r4.y, r5, c20.x
add_pp r5.y, r0.z, c13
dp3 r4.x, v4, v4
texld r4.x, r4.x, s7
mul r4.w, r4.x, r4.y
mul r4.xyz, r4.w, c3
mul r4.xyz, r4, c4
mul r4.xyz, r4, r0.w
frc_pp r5.x, r5.y
add_pp_sat r0.w, r5.y, -r5.x
mul r4.xyz, r0.w, r4
mul_pp r0.w, r0.z, c3
mul r4.xyz, r3.w, r4
add_pp r0.z, r0, c18.x
mul_pp r2.w, r0.z, c3
mul_pp r0.w, r4, r0
mov r3.w, c10.x
mul_pp_sat r0.w, r0, c14.z
add r5.xyz, c3, r3.w
mad_sat r5.xyz, r5, r0.w, c0
mad_pp r4.xyz, r5, v6.x, r4
mul r2.xyz, r4, c11.x
texld r0, r0, s4
mul_pp r0, r1, r0
mad_pp r2.xyz, r3, c5, r2
mul_pp r2.w, r2, r4
mul_pp_sat r1.x, r2.w, c20.y
add_pp r1.w, -r1.x, c13.y
mad_pp r0.xyz, -r2, r4, r0
mul_pp r1.xyz, r2, r4
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_LightPositionRange]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Vector 8 [_DetailOffset]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_Albedo]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_BumpMap] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 153 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, 2.00000000, -1.00000000
def c18, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
dcl_texcoord7 v5.xyz
dcl_texcoord8 v6.x
abs r0.xyz, v2
add r1.xyz, r0, -r0.zxyw
abs r0.w, v2.z
add r2.x, r1, c13.y
frc r2.y, r2.x
add_sat r2.y, r2.x, -r2
mad r1.xyz, r2.y, r1, r0.zxyw
max r1.w, r0.x, r0
rcp r2.x, r1.w
min r1.w, r0.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
add r2.y, r0, -r1.x
add r2.y, r2, c13
mad r2.x, r2.w, c15.y, c15.z
mad r2.x, r2, r2.w, c15.w
mad r2.x, r2, r2.w, c16
frc r2.z, r2.y
mad r3.x, r2, r2.w, c16.y
add_sat r3.y, r2, -r2.z
add_pp r2.xyz, r0.yxzw, -r1
mad_pp r1.xyz, r3.y, r2, r1
mad r0.y, r3.x, r2.w, c16.z
mul r0.y, r0, r1.w
add r0.z, -r0.y, c16.w
add r0.x, r0, -r0.w
cmp r0.x, -r0, r0.y, r0.z
add r0.y, -r0.x, c14.w
cmp r0.x, v2.z, r0, r0.y
abs_pp r1.x, r1
rcp_pp r0.z, r1.x
mul_pp r1.xy, r1.zyzw, r0.z
mov_pp r1.zw, c8.xyxy
mad_pp r3.zw, r1.xyxy, c17.y, r1
cmp r0.x, v2, r0, -r0
mad r4.x, r0, c17, c17.y
add r0.y, -r0.w, c13
mad r0.x, r0.w, c13.z, c13.w
mad r0.x, r0.w, r0, c14
mad r0.x, r0.w, r0, c14.y
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r1.x, r0, r0.y
abs r0.x, v2.y
cmp r0.w, v2.z, c13.x, c13.y
mul r1.y, r0.w, r1.x
add r0.z, -r0.x, c13.y
mad r0.y, r0.x, c13.z, c13.w
mad r0.y, r0, r0.x, c14.x
rsq r0.z, r0.z
mul r7.xy, r3.zwzw, c12.x
mad r0.x, r0.y, r0, c14.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v2.y, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mad r1.x, -r1.y, c14.z, r1
mad r0.z, r0.w, c14.w, r1.x
mul r0.y, r0.z, c15.x
dsy r0.zw, v2.xyxy
mul r0.zw, r0, r0
mul r4.y, r0.x, c15.x
dsx r2.w, r0.y
dsy r2.y, r0
dsx r0.xy, v2
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r2.z, r0.x, c17.x
mul r2.x, r0.y, c17
texldd r1.yw, r4, s1, r2.zwzw, r2
mad_pp r3.xy, r1.wyzw, c17.z, c17.w
mul_pp r4.zw, r3.xyxy, r3.xyxy
texldd r5, r4, s0, r2.zwzw, r2
mul r0.xy, r3.zwzw, c7.x
texld r0.xyz, r0, s2
add_pp_sat r0.w, r4.z, r4
mul r1.w, v0.x, c9.x
add_pp r0.w, -r0, c13.y
rsq_pp r0.w, r0.w
rcp_pp r3.z, r0.w
dp3 r0.w, r3, -v3
mul r6.xyz, r3, r0.w
texldd r2, r4, s3, r2.zwzw, r2
add_pp_sat r0.w, -r5, c13.y
add_pp r1.xyz, -r0, c13.y
mul_sat r1.w, r1, c14.z
mad_pp r0.xyz, r1.w, r1, r0
texld r1, r7, s5
mul_pp r2.w, r2, r0
mul_pp r4, r2, r1
mad r1.xyz, -r6, c14.z, -v3
mad_pp r4.xyz, -r5, r0, r4
dp3_sat r1.x, r1, v1
mul_pp r5.xyz, r5, r0
pow r0, r1.x, c6.x
mov r3.w, r0.x
add r1.xyz, v5, c18.yzzw
texld r1, r1, s6
dp4 r6.w, r1, c19
add r0.xyz, v5, c18.zyzw
texld r0, r0, s6
dp4 r6.z, r0, c19
add r1.xyz, v5, c18.zzyw
texld r1, r1, s6
dp4 r6.y, r1, c19
dp3_pp r1.w, r3, v3
add r0.xyz, v5, c18.y
texld r0, r0, s6
dp3 r1.x, v5, v5
mul_pp r3.x, r1.w, c3.w
rsq r1.x, r1.x
dp4 r6.x, r0, c19
rcp r0.x, r1.x
mul r0.x, r0, c1.w
mov r1.x, c2
mad r0, -r0.x, c18.w, r6
cmp r0, r0, c13.y, r1.x
dp4_pp r0.y, r0, c20.x
add_pp r1.x, r1.w, c13.y
frc_pp r1.y, r1.x
dp3 r0.x, v4, v4
texld r0.w, v4, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c3
mul r0.xyz, r0, c4
mul r0.xyz, r0, r3.w
add_pp_sat r1.x, r1, -r1.y
mul r0.xyz, r1.x, r0
mul r1.xyz, r5.w, r0
mul_pp r0.y, r0.w, r3.x
add_pp r1.w, r1, c18.x
mul_pp r3.w, r1, c3
mul_pp r0.w, r3, r0
mul_pp_sat r0.w, r0, c20.y
mul_pp_sat r3.x, r0.y, c14.z
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r3.x, c0
mad_pp r0.xyz, r0, v6.x, r1
mad_pp r1.xyz, r4.w, r4, r5
mul r3.xyz, r0, c11.x
mad_pp r3.xyz, r1, c5, r3
texld r1, r7, s4
mul_pp r1, r2, r1
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 194

	
		}
		
	} 
	
	FallBack "VertexLit"
}
Shader "Sphere/Planet" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_SpecColor ("Specular tint", Color) = (1,1,1,1)
		_Shininess ("Shininess", Float) = 10
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_DetailVertTex ("Detail for Vertical Surfaces (RGB)", 2D) = "white" {}
		_DetailScale ("Detail Scale", Range(0,1000)) = 200
		_DetailVertScale ("Detail Scale", Range(0,1000)) = 200
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_CityOverlayTex ("Overlay (RGB)", 2D) = "white" {}
		_CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
		_CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
	}
	
SubShader {

Tags { "Queue"="Geometry" "RenderType"="Opaque" }
	Fog { Mode Global}
	ColorMask RGB
	Cull Back Lighting On ZWrite On
	
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 60
//   d3d9 - ALU: 26 to 35
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, vec2(tmpvar_57)).w;
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_3 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_61;
  mediump vec3 tmpvar_62;
  mediump vec3 i_63;
  i_63 = -(lightDirection_5);
  tmpvar_62 = (i_63 - (2.0 * (dot (normalDir_4, i_63) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_58 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_62, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, vec2(tmpvar_57)).w;
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_3 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_61;
  mediump vec3 tmpvar_62;
  mediump vec3 i_63;
  i_63 = -(lightDirection_5);
  tmpvar_62 = (i_63 - (2.0 * (dot (normalDir_4, i_63) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_58 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_62, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 437
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 429
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 433
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 437
#line 437
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 441
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 445
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 448
lowp vec4 frag( in v2f IN ) {
    #line 450
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 454
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 458
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 462
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 466
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 470
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 474
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 478
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 482
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 26 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r2.xyz, r0.x, v2
mov r0.xyz, r2
mov r0.w, c9.x
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o6.xyz, r0.x, r1
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v0
mov o2, v1
mov o3.xyz, r2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 407
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
#line 444
#line 418
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 422
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 426
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 431
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 407
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
#line 444
#line 433
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 435
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 439
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 444
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 448
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 452
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 456
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 460
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 464
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 468
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 472
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 476
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 480
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_56;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  highp float tmpvar_62;
  tmpvar_62 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w);
  atten_4 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * ((tmpvar_57 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_3 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = vec3(clamp (floor((1.0 + tmpvar_57)), 0.0, 1.0));
  specularReflection_2 = tmpvar_65;
  mediump vec3 tmpvar_66;
  mediump vec3 i_67;
  i_67 = -(lightDirection_6);
  tmpvar_66 = (i_67 - (2.0 * (dot (normalDir_5, i_67) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_66, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = ((color_19 * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_56;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  highp float tmpvar_62;
  tmpvar_62 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w);
  atten_4 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * ((tmpvar_57 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_3 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = vec3(clamp (floor((1.0 + tmpvar_57)), 0.0, 1.0));
  specularReflection_2 = tmpvar_65;
  mediump vec3 tmpvar_66;
  mediump vec3 i_67;
  i_67 = -(lightDirection_6);
  tmpvar_66 = (i_67 - (2.0 * (dot (normalDir_5, i_67) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_66, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = ((color_19 * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 430
#line 446
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 438
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 442
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 430
#line 446
#line 446
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 450
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 454
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 457
lowp vec4 frag( in v2f IN ) {
    #line 459
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 463
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 467
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 471
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 475
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 479
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 483
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 487
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 491
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_58;
  tmpvar_58 = (texture2D (_LightTextureB0, vec2(tmpvar_57)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_3 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_61;
  mediump vec3 tmpvar_62;
  mediump vec3 i_63;
  i_63 = -(lightDirection_5);
  tmpvar_62 = (i_63 - (2.0 * (dot (normalDir_4, i_63) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_58 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_62, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_58;
  tmpvar_58 = (texture2D (_LightTextureB0, vec2(tmpvar_57)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_3 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_61;
  mediump vec3 tmpvar_62;
  mediump vec3 i_63;
  i_63 = -(lightDirection_5);
  tmpvar_62 = (i_63 - (2.0 * (dot (normalDir_4, i_63) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_58 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_62, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
#line 438
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 430
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 434
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
#line 438
#line 438
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 442
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 446
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 449
lowp vec4 frag( in v2f IN ) {
    #line 451
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 455
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 459
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 463
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 467
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 471
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 475
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 479
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 483
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2D (_LightTexture0, xlv_TEXCOORD3).w), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
mov r1.xyz, r2
mov r1.w, c13.x
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_3 = tmpvar_59;
  mediump vec3 tmpvar_60;
  tmpvar_60 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_60;
  mediump vec3 tmpvar_61;
  mediump vec3 i_62;
  i_62 = -(lightDirection_5);
  tmpvar_61 = (i_62 - (2.0 * (dot (normalDir_4, i_62) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_57 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_61, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_3 = tmpvar_59;
  mediump vec3 tmpvar_60;
  tmpvar_60 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_60;
  mediump vec3 tmpvar_61;
  mediump vec3 i_62;
  i_62 = -(lightDirection_5);
  tmpvar_61 = (i_62 - (2.0 * (dot (normalDir_4, i_62) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_57 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_61, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 437
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 429
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 433
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 437
#line 437
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 441
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 445
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 448
lowp vec4 frag( in v2f IN ) {
    #line 450
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 454
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 458
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 462
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 466
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 470
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 474
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 478
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 482
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_22;
  if ((tmpvar_21.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_60 = texture2D (_LightTexture0, P_61);
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_LightTextureB0, vec2(tmpvar_62));
  lowp float tmpvar_64;
  mediump float shadow_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_67;
  if ((tmpvar_66.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_67 = _LightShadowData.x;
  } else {
    tmpvar_67 = 1.0;
  };
  shadow_65 = tmpvar_67;
  tmpvar_64 = shadow_65;
  highp float tmpvar_68;
  tmpvar_68 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_60.w) * tmpvar_63.w) * tmpvar_64);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  mediump vec3 tmpvar_72;
  mediump vec3 i_73;
  i_73 = -(lightDirection_6);
  tmpvar_72 = (i_73 - (2.0 * (dot (normalDir_5, i_73) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_72, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_60 = texture2D (_LightTexture0, P_61);
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_LightTextureB0, vec2(tmpvar_62));
  lowp float tmpvar_64;
  mediump float shadow_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_67;
  if ((tmpvar_66.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_67 = _LightShadowData.x;
  } else {
    tmpvar_67 = 1.0;
  };
  shadow_65 = tmpvar_67;
  tmpvar_64 = shadow_65;
  highp float tmpvar_68;
  tmpvar_68 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_60.w) * tmpvar_63.w) * tmpvar_64);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  mediump vec3 tmpvar_72;
  mediump vec3 i_73;
  i_73 = -(lightDirection_6);
  tmpvar_72 = (i_73 - (2.0 * (dot (normalDir_5, i_73) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_72, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
#line 454
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 445
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 449
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
#line 454
#line 454
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 458
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 462
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 465
lowp vec4 frag( in v2f IN ) {
    #line 467
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 471
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 475
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 479
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 483
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 487
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 491
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 495
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 499
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_56;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump float shadow_63;
  lowp float tmpvar_64;
  tmpvar_64 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (_LightShadowData.x + (shadow_63 * (1.0 - _LightShadowData.x)));
  shadow_63 = tmpvar_65;
  tmpvar_62 = shadow_63;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * ((tmpvar_57 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + tmpvar_57)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  mediump vec3 i_71;
  i_71 = -(lightDirection_6);
  tmpvar_70 = (i_71 - (2.0 * (dot (normalDir_5, i_71) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_70, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = ((color_19 * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 438
#line 455
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 446
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 450
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 438
#line 455
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 459
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 463
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 466
lowp vec4 frag( in v2f IN ) {
    #line 468
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 472
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 476
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 480
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 484
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 488
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 492
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 496
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 500
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(gl_Normal);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_3;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c11.y
mov o0, r0
mul r1.y, r1, c9.x
mad o4.xy, r1.z, c10.zwzw, r1
mov o4.zw, r0
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r2.xyz, r0.x, v2
mov r0.xyz, r2
mov r0.w, c11.x
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o7.xyz, r0.x, r1
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v0
mov o2, v1
mov o3.xyz, r2
mov o6.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_57;
  mediump float lightShadowDataX_58;
  highp float dist_59;
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = _LightShadowData.x;
  lightShadowDataX_58 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = max (float((dist_59 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_58);
  tmpvar_57 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_3 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_65;
  mediump vec3 tmpvar_66;
  mediump vec3 i_67;
  i_67 = -(lightDirection_5);
  tmpvar_66 = (i_67 - (2.0 * (dot (normalDir_4, i_67) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_57 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_66, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_57.x), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_3 = tmpvar_59;
  mediump vec3 tmpvar_60;
  tmpvar_60 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_60;
  mediump vec3 tmpvar_61;
  mediump vec3 i_62;
  i_62 = -(lightDirection_5);
  tmpvar_61 = (i_62 - (2.0 * (dot (normalDir_4, i_62) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_57.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_61, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 427
#line 443
#line 427
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 431
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 435
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 439
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 427
#line 443
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 447
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 451
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    #line 456
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 460
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 464
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 468
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 472
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 476
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 480
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 484
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 488
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(gl_Normal);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_3;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c15.y
mov o0, r1
mul r0.y, r0, c13.x
mad o5.xy, r0.z, c14.zwzw, r0
mov o5.zw, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.w, c15.x
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r1.x, v2, v2
rsq r0.w, r1.x
mul r2.xyz, r0.w, v2
mov r1.xyz, r2
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_57;
  mediump float lightShadowDataX_58;
  highp float dist_59;
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = _LightShadowData.x;
  lightShadowDataX_58 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = max (float((dist_59 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_58);
  tmpvar_57 = tmpvar_62;
  lowp float tmpvar_63;
  tmpvar_63 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_57);
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_63), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  mediump vec3 tmpvar_67;
  mediump vec3 i_68;
  i_68 = -(lightDirection_5);
  tmpvar_67 = (i_68 - (2.0 * (dot (normalDir_4, i_68) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_63 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_67, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_7;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_57;
  tmpvar_57 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_3 = tmpvar_59;
  mediump vec3 tmpvar_60;
  tmpvar_60 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_60;
  mediump vec3 tmpvar_61;
  mediump vec3 i_62;
  i_62 = -(lightDirection_5);
  tmpvar_61 = (i_62 - (2.0 * (dot (normalDir_4, i_62) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_57 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_61, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 430
#line 447
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 438
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 442
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 430
#line 447
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 451
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 455
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    #line 460
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 464
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 468
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 472
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 476
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 480
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 484
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 488
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 492
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_20;
  tmpvar_20 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_21;
  tmpvar_21 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_22;
  if ((tmpvar_21 < tmpvar_20)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTexture0, vec2(tmpvar_60));
  highp float tmpvar_62;
  tmpvar_62 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_66;
  if ((tmpvar_65 < tmpvar_62)) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  tmpvar_67 = (tmpvar_61.w * tmpvar_66);
  atten_4 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_3 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_70;
  mediump vec3 tmpvar_71;
  mediump vec3 i_72;
  i_72 = -(lightDirection_6);
  tmpvar_71 = (i_72 - (2.0 * (dot (normalDir_5, i_72) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_71, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTexture0, vec2(tmpvar_60));
  highp float tmpvar_62;
  tmpvar_62 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_66;
  if ((tmpvar_65 < tmpvar_62)) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  tmpvar_67 = (tmpvar_61.w * tmpvar_66);
  atten_4 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_3 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_70;
  mediump vec3 tmpvar_71;
  mediump vec3 i_72;
  i_72 = -(lightDirection_6);
  tmpvar_71 = (i_72 - (2.0 * (dot (normalDir_5, i_72) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_71, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 452
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 443
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 447
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 452
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 456
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 460
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 463
lowp vec4 frag( in v2f IN ) {
    #line 465
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 469
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 473
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 477
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 481
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 485
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 489
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 493
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 497
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_21;
  tmpvar_21 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_22;
  tmpvar_22 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_23;
  if ((tmpvar_22 < tmpvar_21)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * tmpvar_23)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = dot (packDist_64, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_67;
  if ((tmpvar_66 < tmpvar_63)) {
    tmpvar_67 = _LightShadowData.x;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  tmpvar_68 = ((tmpvar_61.w * tmpvar_62.w) * tmpvar_67);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  mediump vec3 tmpvar_72;
  mediump vec3 i_73;
  i_73 = -(lightDirection_6);
  tmpvar_72 = (i_73 - (2.0 * (dot (normalDir_5, i_73) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_72, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = dot (packDist_64, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_67;
  if ((tmpvar_66 < tmpvar_63)) {
    tmpvar_67 = _LightShadowData.x;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  tmpvar_68 = ((tmpvar_61.w * tmpvar_62.w) * tmpvar_67);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  mediump vec3 tmpvar_72;
  mediump vec3 i_73;
  i_73 = -(lightDirection_6);
  tmpvar_72 = (i_73 - (2.0 * (dot (normalDir_5, i_73) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_72, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 453
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 444
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 448
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 474
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 478
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 482
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 486
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 490
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 494
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 498
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_21;
  vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_21.x = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_21.y = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_21.z = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_21.w = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_23;
  tmpvar_23 = lessThan (shadowVals_21, tmpvar_22.zzzz);
  vec4 tmpvar_24;
  tmpvar_24 = _LightShadowData.xxxx;
  float tmpvar_25;
  if (tmpvar_23.x) {
    tmpvar_25 = tmpvar_24.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_23.y) {
    tmpvar_26 = tmpvar_24.y;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_23.z) {
    tmpvar_27 = tmpvar_24.z;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_23.w) {
    tmpvar_28 = tmpvar_24.w;
  } else {
    tmpvar_28 = 1.0;
  };
  vec4 tmpvar_29;
  tmpvar_29.x = tmpvar_25;
  tmpvar_29.y = tmpvar_26;
  tmpvar_29.z = tmpvar_27;
  tmpvar_29.w = tmpvar_28;
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_60 = texture2D (_LightTexture0, P_61);
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_LightTextureB0, vec2(tmpvar_62));
  lowp float tmpvar_64;
  mediump vec4 shadows_65;
  highp vec4 shadowVals_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_68;
  P_68 = (tmpvar_67.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_66.x = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_67.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_66.y = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_67.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_66.z = tmpvar_73;
  highp vec2 P_74;
  P_74 = (tmpvar_67.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_75;
  tmpvar_75 = texture2D (_ShadowMapTexture, P_74).x;
  shadowVals_66.w = tmpvar_75;
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_66, tmpvar_67.zzzz);
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_65 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_65, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_64 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_60.w) * tmpvar_63.w) * tmpvar_64);
  atten_4 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_6);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_5, i_89) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_60 = texture2D (_LightTexture0, P_61);
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_LightTextureB0, vec2(tmpvar_62));
  lowp float tmpvar_64;
  mediump vec4 shadows_65;
  highp vec4 shadowVals_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_68;
  P_68 = (tmpvar_67.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_66.x = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_67.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_66.y = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_67.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_66.z = tmpvar_73;
  highp vec2 P_74;
  P_74 = (tmpvar_67.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_75;
  tmpvar_75 = texture2D (_ShadowMapTexture, P_74).x;
  shadowVals_66.w = tmpvar_75;
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_66, tmpvar_67.zzzz);
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_65 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_65, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_64 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_60.w) * tmpvar_63.w) * tmpvar_64);
  atten_4 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_6);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_5, i_89) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
#line 462
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 453
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 457
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
#line 462
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 466
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 470
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 473
lowp vec4 frag( in v2f IN ) {
    #line 475
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 479
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 483
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 487
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 491
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 495
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 499
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 503
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 507
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 shadows_17;
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_17.x = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[0].xyz)).x;
  shadows_17.y = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[1].xyz)).x;
  shadows_17.z = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[2].xyz)).x;
  shadows_17.w = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_19;
  tmpvar_19 = (_LightShadowData.xxxx + (shadows_17 * (1.0 - _LightShadowData.xxxx)));
  shadows_17 = tmpvar_19;
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_19, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_56;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_65;
  coord_65 = (tmpvar_64 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_66;
  tmpvar_66 = shadow2DEXT (_ShadowMapTexture, coord_65);
  shadows_63.x = tmpvar_66;
  highp vec3 coord_67;
  coord_67 = (tmpvar_64 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_68;
  tmpvar_68 = shadow2DEXT (_ShadowMapTexture, coord_67);
  shadows_63.y = tmpvar_68;
  highp vec3 coord_69;
  coord_69 = (tmpvar_64 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_70;
  tmpvar_70 = shadow2DEXT (_ShadowMapTexture, coord_69);
  shadows_63.z = tmpvar_70;
  highp vec3 coord_71;
  coord_71 = (tmpvar_64 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_72;
  tmpvar_72 = shadow2DEXT (_ShadowMapTexture, coord_71);
  shadows_63.w = tmpvar_72;
  highp vec4 tmpvar_73;
  tmpvar_73 = (_LightShadowData.xxxx + (shadows_63 * (1.0 - _LightShadowData.xxxx)));
  shadows_63 = tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * ((tmpvar_57 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_3 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = vec3(clamp (floor((1.0 + tmpvar_57)), 0.0, 1.0));
  specularReflection_2 = tmpvar_78;
  mediump vec3 tmpvar_79;
  mediump vec3 i_80;
  i_80 = -(lightDirection_6);
  tmpvar_79 = (i_80 - (2.0 * (dot (normalDir_5, i_80) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_79, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = ((color_19 * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
#line 462
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 453
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 457
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
#line 462
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 466
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 470
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 473
lowp vec4 frag( in v2f IN ) {
    #line 475
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 479
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 483
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 487
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 491
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 495
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 499
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 503
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 507
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_20;
  shadowVals_20.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_21;
  tmpvar_21 = lessThan (shadowVals_20, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_22;
  tmpvar_22 = _LightShadowData.xxxx;
  float tmpvar_23;
  if (tmpvar_21.x) {
    tmpvar_23 = tmpvar_22.x;
  } else {
    tmpvar_23 = 1.0;
  };
  float tmpvar_24;
  if (tmpvar_21.y) {
    tmpvar_24 = tmpvar_22.y;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_21.z) {
    tmpvar_25 = tmpvar_22.z;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_21.w) {
    tmpvar_26 = tmpvar_22.w;
  } else {
    tmpvar_26 = 1.0;
  };
  vec4 tmpvar_27;
  tmpvar_27.x = tmpvar_23;
  tmpvar_27.y = tmpvar_24;
  tmpvar_27.z = tmpvar_25;
  tmpvar_27.w = tmpvar_26;
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * dot (tmpvar_27, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTexture0, vec2(tmpvar_60));
  highp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp float tmpvar_65;
  tmpvar_65 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_66;
  vec_66 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_ShadowMapTexture, vec_66);
  packDist_67 = tmpvar_68;
  shadowVals_64.x = dot (packDist_67, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_69;
  vec_69 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, vec_69);
  packDist_70 = tmpvar_71;
  shadowVals_64.y = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_64.z = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_75;
  vec_75 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, vec_75);
  packDist_76 = tmpvar_77;
  shadowVals_64.w = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_78;
  tmpvar_78 = lessThan (shadowVals_64, vec4(tmpvar_65));
  highp vec4 tmpvar_79;
  tmpvar_79 = _LightShadowData.xxxx;
  highp float tmpvar_80;
  if (tmpvar_78.x) {
    tmpvar_80 = tmpvar_79.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_78.y) {
    tmpvar_81 = tmpvar_79.y;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_78.z) {
    tmpvar_82 = tmpvar_79.z;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_78.w) {
    tmpvar_83 = tmpvar_79.w;
  } else {
    tmpvar_83 = 1.0;
  };
  highp vec4 tmpvar_84;
  tmpvar_84.x = tmpvar_80;
  tmpvar_84.y = tmpvar_81;
  tmpvar_84.z = tmpvar_82;
  tmpvar_84.w = tmpvar_83;
  shadows_63 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (tmpvar_61.w * tmpvar_62);
  atten_4 = tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_6);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_5, i_91) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTexture0, vec2(tmpvar_60));
  highp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp float tmpvar_65;
  tmpvar_65 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_66;
  vec_66 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_ShadowMapTexture, vec_66);
  packDist_67 = tmpvar_68;
  shadowVals_64.x = dot (packDist_67, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_69;
  vec_69 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, vec_69);
  packDist_70 = tmpvar_71;
  shadowVals_64.y = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_64.z = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_75;
  vec_75 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, vec_75);
  packDist_76 = tmpvar_77;
  shadowVals_64.w = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_78;
  tmpvar_78 = lessThan (shadowVals_64, vec4(tmpvar_65));
  highp vec4 tmpvar_79;
  tmpvar_79 = _LightShadowData.xxxx;
  highp float tmpvar_80;
  if (tmpvar_78.x) {
    tmpvar_80 = tmpvar_79.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_78.y) {
    tmpvar_81 = tmpvar_79.y;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_78.z) {
    tmpvar_82 = tmpvar_79.z;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_78.w) {
    tmpvar_83 = tmpvar_79.w;
  } else {
    tmpvar_83 = 1.0;
  };
  highp vec4 tmpvar_84;
  tmpvar_84.x = tmpvar_80;
  tmpvar_84.y = tmpvar_81;
  tmpvar_84.z = tmpvar_82;
  tmpvar_84.w = tmpvar_83;
  shadows_63 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (tmpvar_61.w * tmpvar_62);
  atten_4 = tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_6);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_5, i_91) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 441
#line 458
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 449
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 453
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 441
#line 458
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 462
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 466
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 469
lowp vec4 frag( in v2f IN ) {
    #line 471
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 475
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 479
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 483
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 487
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 491
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 495
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 499
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 503
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_21;
  shadowVals_21.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_22;
  tmpvar_22 = lessThan (shadowVals_21, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_23;
  tmpvar_23 = _LightShadowData.xxxx;
  float tmpvar_24;
  if (tmpvar_22.x) {
    tmpvar_24 = tmpvar_23.x;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_22.y) {
    tmpvar_25 = tmpvar_23.y;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_22.z) {
    tmpvar_26 = tmpvar_23.z;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_22.w) {
    tmpvar_27 = tmpvar_23.w;
  } else {
    tmpvar_27 = 1.0;
  };
  vec4 tmpvar_28;
  tmpvar_28.x = tmpvar_24;
  tmpvar_28.y = tmpvar_25;
  tmpvar_28.z = tmpvar_26;
  tmpvar_28.w = tmpvar_27;
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * dot (tmpvar_28, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_63;
  mediump vec4 shadows_64;
  highp vec4 shadowVals_65;
  highp float tmpvar_66;
  tmpvar_66 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_65.x = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_65.y = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_65.z = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_76;
  vec_76 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, vec_76);
  packDist_77 = tmpvar_78;
  shadowVals_65.w = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_79;
  tmpvar_79 = lessThan (shadowVals_65, vec4(tmpvar_66));
  highp vec4 tmpvar_80;
  tmpvar_80 = _LightShadowData.xxxx;
  highp float tmpvar_81;
  if (tmpvar_79.x) {
    tmpvar_81 = tmpvar_80.x;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_79.y) {
    tmpvar_82 = tmpvar_80.y;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_79.z) {
    tmpvar_83 = tmpvar_80.z;
  } else {
    tmpvar_83 = 1.0;
  };
  highp float tmpvar_84;
  if (tmpvar_79.w) {
    tmpvar_84 = tmpvar_80.w;
  } else {
    tmpvar_84 = 1.0;
  };
  highp vec4 tmpvar_85;
  tmpvar_85.x = tmpvar_81;
  tmpvar_85.y = tmpvar_82;
  tmpvar_85.z = tmpvar_83;
  tmpvar_85.w = tmpvar_84;
  shadows_64 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = dot (shadows_64, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_63 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((tmpvar_61.w * tmpvar_62.w) * tmpvar_63);
  atten_4 = tmpvar_87;
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_3 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_90;
  mediump vec3 tmpvar_91;
  mediump vec3 i_92;
  i_92 = -(lightDirection_6);
  tmpvar_91 = (i_92 - (2.0 * (dot (normalDir_5, i_92) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_91, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_63;
  mediump vec4 shadows_64;
  highp vec4 shadowVals_65;
  highp float tmpvar_66;
  tmpvar_66 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_65.x = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_65.y = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_65.z = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_76;
  vec_76 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, vec_76);
  packDist_77 = tmpvar_78;
  shadowVals_65.w = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_79;
  tmpvar_79 = lessThan (shadowVals_65, vec4(tmpvar_66));
  highp vec4 tmpvar_80;
  tmpvar_80 = _LightShadowData.xxxx;
  highp float tmpvar_81;
  if (tmpvar_79.x) {
    tmpvar_81 = tmpvar_80.x;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_79.y) {
    tmpvar_82 = tmpvar_80.y;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_79.z) {
    tmpvar_83 = tmpvar_80.z;
  } else {
    tmpvar_83 = 1.0;
  };
  highp float tmpvar_84;
  if (tmpvar_79.w) {
    tmpvar_84 = tmpvar_80.w;
  } else {
    tmpvar_84 = 1.0;
  };
  highp vec4 tmpvar_85;
  tmpvar_85.x = tmpvar_81;
  tmpvar_85.y = tmpvar_82;
  tmpvar_85.z = tmpvar_83;
  tmpvar_85.w = tmpvar_84;
  shadows_64 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = dot (shadows_64, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_63 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((tmpvar_61.w * tmpvar_62.w) * tmpvar_63);
  atten_4 = tmpvar_87;
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_3 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_90;
  mediump vec3 tmpvar_91;
  mediump vec3 i_92;
  i_92 = -(lightDirection_6);
  tmpvar_91 = (i_92 - (2.0 * (dot (normalDir_5, i_92) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_91, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 442
#line 459
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 450
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 454
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 442
#line 459
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 463
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 467
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 470
lowp vec4 frag( in v2f IN ) {
    #line 472
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 476
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 480
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 484
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 488
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 492
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 496
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 500
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 504
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, vec2(tmpvar_57)).w;
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_3 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_61;
  mediump vec3 tmpvar_62;
  mediump vec3 i_63;
  i_63 = -(lightDirection_5);
  tmpvar_62 = (i_63 - (2.0 * (dot (normalDir_4, i_63) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_58 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_62, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_58;
  tmpvar_58 = texture2D (_LightTexture0, vec2(tmpvar_57)).w;
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_3 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_61;
  mediump vec3 tmpvar_62;
  mediump vec3 i_63;
  i_63 = -(lightDirection_5);
  tmpvar_62 = (i_63 - (2.0 * (dot (normalDir_4, i_63) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_58 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_62, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 437
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 429
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 433
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 437
#line 437
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 441
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 445
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 448
lowp vec4 frag( in v2f IN ) {
    #line 450
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 454
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 458
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 462
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 466
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 470
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 474
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 478
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 482
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 26 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r2.xyz, r0.x, v2
mov r0.xyz, r2
mov r0.w, c9.x
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o6.xyz, r0.x, r1
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v0
mov o2, v1
mov o3.xyz, r2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = clamp (((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 407
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
#line 444
#line 418
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 422
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 426
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 431
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 407
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 418
#line 444
#line 433
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 435
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 439
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 444
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 448
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 452
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 456
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 460
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 464
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    #line 468
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 472
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 476
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 480
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_56;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  highp float tmpvar_62;
  tmpvar_62 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w);
  atten_4 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * ((tmpvar_57 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_3 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = vec3(clamp (floor((1.0 + tmpvar_57)), 0.0, 1.0));
  specularReflection_2 = tmpvar_65;
  mediump vec3 tmpvar_66;
  mediump vec3 i_67;
  i_67 = -(lightDirection_6);
  tmpvar_66 = (i_67 - (2.0 * (dot (normalDir_5, i_67) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_66, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = ((color_19 * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_56;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  highp float tmpvar_62;
  tmpvar_62 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w);
  atten_4 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * ((tmpvar_57 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_3 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = vec3(clamp (floor((1.0 + tmpvar_57)), 0.0, 1.0));
  specularReflection_2 = tmpvar_65;
  mediump vec3 tmpvar_66;
  mediump vec3 i_67;
  i_67 = -(lightDirection_6);
  tmpvar_66 = (i_67 - (2.0 * (dot (normalDir_5, i_67) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_66, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = ((color_19 * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 430
#line 446
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 438
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 442
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 430
#line 446
#line 446
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 450
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 454
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 457
lowp vec4 frag( in v2f IN ) {
    #line 459
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 463
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 467
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 471
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 475
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 479
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 483
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 487
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 491
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_58;
  tmpvar_58 = (texture2D (_LightTextureB0, vec2(tmpvar_57)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_3 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_61;
  mediump vec3 tmpvar_62;
  mediump vec3 i_63;
  i_63 = -(lightDirection_5);
  tmpvar_62 = (i_63 - (2.0 * (dot (normalDir_4, i_63) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_58 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_62, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_57;
  tmpvar_57 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_58;
  tmpvar_58 = (texture2D (_LightTextureB0, vec2(tmpvar_57)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_59;
  tmpvar_59 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_58), 0.0, 1.0);
  highp vec3 tmpvar_60;
  tmpvar_60 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_59)), 0.0, 1.0);
  light_3 = tmpvar_60;
  mediump vec3 tmpvar_61;
  tmpvar_61 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_61;
  mediump vec3 tmpvar_62;
  mediump vec3 i_63;
  i_63 = -(lightDirection_5);
  tmpvar_62 = (i_63 - (2.0 * (dot (normalDir_4, i_63) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_58 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_62, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
#line 438
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 430
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 434
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 422
#line 438
#line 438
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 442
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 446
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 449
lowp vec4 frag( in v2f IN ) {
    #line 451
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 455
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 459
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 463
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 467
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 471
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 475
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 479
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 483
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2D (_LightTexture0, xlv_TEXCOORD3).w), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
mov r1.xyz, r2
mov r1.w, c13.x
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_3 = tmpvar_59;
  mediump vec3 tmpvar_60;
  tmpvar_60 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_60;
  mediump vec3 tmpvar_61;
  mediump vec3 i_62;
  i_62 = -(lightDirection_5);
  tmpvar_61 = (i_62 - (2.0 * (dot (normalDir_4, i_62) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_57 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_61, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_57;
  tmpvar_57 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_3 = tmpvar_59;
  mediump vec3 tmpvar_60;
  tmpvar_60 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_60;
  mediump vec3 tmpvar_61;
  mediump vec3 i_62;
  i_62 = -(lightDirection_5);
  tmpvar_61 = (i_62 - (2.0 * (dot (normalDir_4, i_62) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_57 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_61, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 437
#line 421
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 425
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 429
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 433
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 421
#line 437
#line 437
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 441
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 445
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 448
lowp vec4 frag( in v2f IN ) {
    #line 450
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 454
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 458
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 462
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 466
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 470
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 474
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 478
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 482
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_21;
  tmpvar_21 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_22;
  if ((tmpvar_21.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_60 = texture2D (_LightTexture0, P_61);
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_LightTextureB0, vec2(tmpvar_62));
  lowp float tmpvar_64;
  mediump float shadow_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_67;
  if ((tmpvar_66.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_67 = _LightShadowData.x;
  } else {
    tmpvar_67 = 1.0;
  };
  shadow_65 = tmpvar_67;
  tmpvar_64 = shadow_65;
  highp float tmpvar_68;
  tmpvar_68 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_60.w) * tmpvar_63.w) * tmpvar_64);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  mediump vec3 tmpvar_72;
  mediump vec3 i_73;
  i_73 = -(lightDirection_6);
  tmpvar_72 = (i_73 - (2.0 * (dot (normalDir_5, i_73) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_72, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_60 = texture2D (_LightTexture0, P_61);
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_LightTextureB0, vec2(tmpvar_62));
  lowp float tmpvar_64;
  mediump float shadow_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_67;
  if ((tmpvar_66.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_67 = _LightShadowData.x;
  } else {
    tmpvar_67 = 1.0;
  };
  shadow_65 = tmpvar_67;
  tmpvar_64 = shadow_65;
  highp float tmpvar_68;
  tmpvar_68 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_60.w) * tmpvar_63.w) * tmpvar_64);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  mediump vec3 tmpvar_72;
  mediump vec3 i_73;
  i_73 = -(lightDirection_6);
  tmpvar_72 = (i_73 - (2.0 * (dot (normalDir_5, i_73) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_72, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
#line 454
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 445
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 449
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 437
#line 454
#line 454
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 458
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 462
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 465
lowp vec4 frag( in v2f IN ) {
    #line 467
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 471
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 475
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 479
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 483
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 487
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 491
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 495
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 499
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_56;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump float shadow_63;
  lowp float tmpvar_64;
  tmpvar_64 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = (_LightShadowData.x + (shadow_63 * (1.0 - _LightShadowData.x)));
  shadow_63 = tmpvar_65;
  tmpvar_62 = shadow_63;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * ((tmpvar_57 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + tmpvar_57)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  mediump vec3 i_71;
  i_71 = -(lightDirection_6);
  tmpvar_70 = (i_71 - (2.0 * (dot (normalDir_5, i_71) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_70, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = ((color_19 * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 438
#line 455
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 446
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 450
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 438
#line 455
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 459
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 463
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 466
lowp vec4 frag( in v2f IN ) {
    #line 468
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 472
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 476
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 480
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 484
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 488
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 492
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 496
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 500
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(gl_Normal);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_3;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c11.y
mov o0, r0
mul r1.y, r1, c9.x
mad o4.xy, r1.z, c10.zwzw, r1
mov o4.zw, r0
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r2.xyz, r0.x, v2
mov r0.xyz, r2
mov r0.w, c11.x
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o7.xyz, r0.x, r1
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v0
mov o2, v1
mov o3.xyz, r2
mov o6.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_57;
  mediump float lightShadowDataX_58;
  highp float dist_59;
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = _LightShadowData.x;
  lightShadowDataX_58 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = max (float((dist_59 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_58);
  tmpvar_57 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_64;
  tmpvar_64 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_63)), 0.0, 1.0);
  light_3 = tmpvar_64;
  mediump vec3 tmpvar_65;
  tmpvar_65 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_65;
  mediump vec3 tmpvar_66;
  mediump vec3 i_67;
  i_67 = -(lightDirection_5);
  tmpvar_66 = (i_67 - (2.0 * (dot (normalDir_4, i_67) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_57 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_66, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_57.x), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_3 = tmpvar_59;
  mediump vec3 tmpvar_60;
  tmpvar_60 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_60;
  mediump vec3 tmpvar_61;
  mediump vec3 i_62;
  i_62 = -(lightDirection_5);
  tmpvar_61 = (i_62 - (2.0 * (dot (normalDir_4, i_62) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_57.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_61, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 427
#line 443
#line 427
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 431
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 435
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 439
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 415
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 427
#line 443
#line 443
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 447
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 451
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 454
lowp vec4 frag( in v2f IN ) {
    #line 456
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 460
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 464
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 468
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 472
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 476
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 480
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 484
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 488
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(gl_Normal);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_3;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c15.y
mov o0, r1
mul r0.y, r0, c13.x
mad o5.xy, r0.z, c14.zwzw, r0
mov o5.zw, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.w, c15.x
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r1.x, v2, v2
rsq r0.w, r1.x
mul r2.xyz, r0.w, v2
mov r1.xyz, r2
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_57;
  mediump float lightShadowDataX_58;
  highp float dist_59;
  lowp float tmpvar_60;
  tmpvar_60 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_59 = tmpvar_60;
  highp float tmpvar_61;
  tmpvar_61 = _LightShadowData.x;
  lightShadowDataX_58 = tmpvar_61;
  highp float tmpvar_62;
  tmpvar_62 = max (float((dist_59 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_58);
  tmpvar_57 = tmpvar_62;
  lowp float tmpvar_63;
  tmpvar_63 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_57);
  mediump float tmpvar_64;
  tmpvar_64 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_63), 0.0, 1.0);
  highp vec3 tmpvar_65;
  tmpvar_65 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_64)), 0.0, 1.0);
  light_3 = tmpvar_65;
  mediump vec3 tmpvar_66;
  tmpvar_66 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_66;
  mediump vec3 tmpvar_67;
  mediump vec3 i_68;
  i_68 = -(lightDirection_5);
  tmpvar_67 = (i_68 - (2.0 * (dot (normalDir_4, i_68) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_63 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_67, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_7;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7));
  highp vec4 tmpvar_53;
  tmpvar_53 = ((main_16 * tmpvar_52) * xlv_TEXCOORD1);
  color_18 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_55;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_57;
  tmpvar_57 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_58;
  tmpvar_58 = clamp ((((_LightColor0.w * ((tmpvar_56 - 0.01) / 0.99)) * 4.0) * tmpvar_57), 0.0, 1.0);
  highp vec3 tmpvar_59;
  tmpvar_59 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_58)), 0.0, 1.0);
  light_3 = tmpvar_59;
  mediump vec3 tmpvar_60;
  tmpvar_60 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_60;
  mediump vec3 tmpvar_61;
  mediump vec3 i_62;
  i_62 = -(lightDirection_5);
  tmpvar_61 = (i_62 - (2.0 * (dot (normalDir_4, i_62) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_57 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_61, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_18.xyz = ((color_18 * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 430
#line 447
#line 430
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 434
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 438
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 442
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 430
#line 447
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 451
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 455
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    #line 460
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 464
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 468
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 472
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 476
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 480
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 484
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 488
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 492
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_20;
  tmpvar_20 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_21;
  tmpvar_21 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_22;
  if ((tmpvar_21 < tmpvar_20)) {
    tmpvar_22 = _LightShadowData.x;
  } else {
    tmpvar_22 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * tmpvar_22)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTexture0, vec2(tmpvar_60));
  highp float tmpvar_62;
  tmpvar_62 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_66;
  if ((tmpvar_65 < tmpvar_62)) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  tmpvar_67 = (tmpvar_61.w * tmpvar_66);
  atten_4 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_3 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_70;
  mediump vec3 tmpvar_71;
  mediump vec3 i_72;
  i_72 = -(lightDirection_6);
  tmpvar_71 = (i_72 - (2.0 * (dot (normalDir_5, i_72) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_71, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTexture0, vec2(tmpvar_60));
  highp float tmpvar_62;
  tmpvar_62 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = dot (packDist_63, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_66;
  if ((tmpvar_65 < tmpvar_62)) {
    tmpvar_66 = _LightShadowData.x;
  } else {
    tmpvar_66 = 1.0;
  };
  highp float tmpvar_67;
  tmpvar_67 = (tmpvar_61.w * tmpvar_66);
  atten_4 = tmpvar_67;
  mediump float tmpvar_68;
  tmpvar_68 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_69;
  tmpvar_69 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_68)), 0.0, 1.0);
  light_3 = tmpvar_69;
  mediump vec3 tmpvar_70;
  tmpvar_70 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_70;
  mediump vec3 tmpvar_71;
  mediump vec3 i_72;
  i_72 = -(lightDirection_6);
  tmpvar_71 = (i_72 - (2.0 * (dot (normalDir_5, i_72) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_71, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 452
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 443
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 447
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 452
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 456
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 460
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 463
lowp vec4 frag( in v2f IN ) {
    #line 465
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 469
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 473
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 477
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 481
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 485
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 489
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 493
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 497
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_21;
  tmpvar_21 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_22;
  tmpvar_22 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_23;
  if ((tmpvar_22 < tmpvar_21)) {
    tmpvar_23 = _LightShadowData.x;
  } else {
    tmpvar_23 = 1.0;
  };
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * tmpvar_23)), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = dot (packDist_64, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_67;
  if ((tmpvar_66 < tmpvar_63)) {
    tmpvar_67 = _LightShadowData.x;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  tmpvar_68 = ((tmpvar_61.w * tmpvar_62.w) * tmpvar_67);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  mediump vec3 tmpvar_72;
  mediump vec3 i_73;
  i_73 = -(lightDirection_6);
  tmpvar_72 = (i_73 - (2.0 * (dot (normalDir_5, i_73) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_72, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = dot (packDist_64, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_67;
  if ((tmpvar_66 < tmpvar_63)) {
    tmpvar_67 = _LightShadowData.x;
  } else {
    tmpvar_67 = 1.0;
  };
  highp float tmpvar_68;
  tmpvar_68 = ((tmpvar_61.w * tmpvar_62.w) * tmpvar_67);
  atten_4 = tmpvar_68;
  mediump float tmpvar_69;
  tmpvar_69 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_70;
  tmpvar_70 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_69)), 0.0, 1.0);
  light_3 = tmpvar_70;
  mediump vec3 tmpvar_71;
  tmpvar_71 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_71;
  mediump vec3 tmpvar_72;
  mediump vec3 i_73;
  i_73 = -(lightDirection_6);
  tmpvar_72 = (i_73 - (2.0 * (dot (normalDir_5, i_73) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_72, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 453
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 444
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 448
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 474
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 478
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 482
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 486
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 490
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 494
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 498
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_20;
  tmpvar_20 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_21;
  vec3 tmpvar_22;
  tmpvar_22 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_21.x = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_21.y = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_21.z = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_21.w = texture2D (_ShadowMapTexture, (tmpvar_22.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_23;
  tmpvar_23 = lessThan (shadowVals_21, tmpvar_22.zzzz);
  vec4 tmpvar_24;
  tmpvar_24 = _LightShadowData.xxxx;
  float tmpvar_25;
  if (tmpvar_23.x) {
    tmpvar_25 = tmpvar_24.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_23.y) {
    tmpvar_26 = tmpvar_24.y;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_23.z) {
    tmpvar_27 = tmpvar_24.z;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_23.w) {
    tmpvar_28 = tmpvar_24.w;
  } else {
    tmpvar_28 = 1.0;
  };
  vec4 tmpvar_29;
  tmpvar_29.x = tmpvar_25;
  tmpvar_29.y = tmpvar_26;
  tmpvar_29.z = tmpvar_27;
  tmpvar_29.w = tmpvar_28;
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_19.w) * tmpvar_20.w) * dot (tmpvar_29, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_60 = texture2D (_LightTexture0, P_61);
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_LightTextureB0, vec2(tmpvar_62));
  lowp float tmpvar_64;
  mediump vec4 shadows_65;
  highp vec4 shadowVals_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_68;
  P_68 = (tmpvar_67.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_66.x = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_67.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_66.y = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_67.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_66.z = tmpvar_73;
  highp vec2 P_74;
  P_74 = (tmpvar_67.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_75;
  tmpvar_75 = texture2D (_ShadowMapTexture, P_74).x;
  shadowVals_66.w = tmpvar_75;
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_66, tmpvar_67.zzzz);
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_65 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_65, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_64 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_60.w) * tmpvar_63.w) * tmpvar_64);
  atten_4 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_6);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_5, i_89) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_60 = texture2D (_LightTexture0, P_61);
  highp float tmpvar_62;
  tmpvar_62 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_63;
  tmpvar_63 = texture2D (_LightTextureB0, vec2(tmpvar_62));
  lowp float tmpvar_64;
  mediump vec4 shadows_65;
  highp vec4 shadowVals_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_68;
  P_68 = (tmpvar_67.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_66.x = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_67.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_66.y = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_67.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_66.z = tmpvar_73;
  highp vec2 P_74;
  P_74 = (tmpvar_67.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_75;
  tmpvar_75 = texture2D (_ShadowMapTexture, P_74).x;
  shadowVals_66.w = tmpvar_75;
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_66, tmpvar_67.zzzz);
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_65 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_65, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_64 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_60.w) * tmpvar_63.w) * tmpvar_64);
  atten_4 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_6);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_5, i_89) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
#line 462
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 453
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 457
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
#line 462
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 466
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 470
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 473
lowp vec4 frag( in v2f IN ) {
    #line 475
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 479
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 483
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 487
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 491
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 495
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 499
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 503
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 507
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 shadows_17;
  vec3 tmpvar_18;
  tmpvar_18 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_17.x = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[0].xyz)).x;
  shadows_17.y = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[1].xyz)).x;
  shadows_17.z = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[2].xyz)).x;
  shadows_17.w = shadow2D (_ShadowMapTexture, (tmpvar_18 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_19;
  tmpvar_19 = (_LightShadowData.xxxx + (shadows_17 * (1.0 - _LightShadowData.xxxx)));
  shadows_17 = tmpvar_19;
  color_2.xyz = ((((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color).xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_19, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_56;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_57;
  tmpvar_57 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec3 tmpvar_64;
  tmpvar_64 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_65;
  coord_65 = (tmpvar_64 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_66;
  tmpvar_66 = shadow2DEXT (_ShadowMapTexture, coord_65);
  shadows_63.x = tmpvar_66;
  highp vec3 coord_67;
  coord_67 = (tmpvar_64 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_68;
  tmpvar_68 = shadow2DEXT (_ShadowMapTexture, coord_67);
  shadows_63.y = tmpvar_68;
  highp vec3 coord_69;
  coord_69 = (tmpvar_64 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_70;
  tmpvar_70 = shadow2DEXT (_ShadowMapTexture, coord_69);
  shadows_63.z = tmpvar_70;
  highp vec3 coord_71;
  coord_71 = (tmpvar_64 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_72;
  tmpvar_72 = shadow2DEXT (_ShadowMapTexture, coord_71);
  shadows_63.w = tmpvar_72;
  highp vec4 tmpvar_73;
  tmpvar_73 = (_LightShadowData.xxxx + (shadows_63 * (1.0 - _LightShadowData.xxxx)));
  shadows_63 = tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_74;
  highp float tmpvar_75;
  tmpvar_75 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_75;
  mediump float tmpvar_76;
  tmpvar_76 = clamp ((((_LightColor0.w * ((tmpvar_57 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_77;
  tmpvar_77 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_76)), 0.0, 1.0);
  light_3 = tmpvar_77;
  mediump vec3 tmpvar_78;
  tmpvar_78 = vec3(clamp (floor((1.0 + tmpvar_57)), 0.0, 1.0));
  specularReflection_2 = tmpvar_78;
  mediump vec3 tmpvar_79;
  mediump vec3 i_80;
  i_80 = -(lightDirection_6);
  tmpvar_79 = (i_80 - (2.0 * (dot (normalDir_5, i_80) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_79, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = ((color_19 * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
#line 462
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 453
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 457
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 445
#line 462
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 466
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 470
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 473
lowp vec4 frag( in v2f IN ) {
    #line 475
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 479
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 483
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 487
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 491
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 495
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 499
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 503
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 507
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_20;
  shadowVals_20.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_20.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_21;
  tmpvar_21 = lessThan (shadowVals_20, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_22;
  tmpvar_22 = _LightShadowData.xxxx;
  float tmpvar_23;
  if (tmpvar_21.x) {
    tmpvar_23 = tmpvar_22.x;
  } else {
    tmpvar_23 = 1.0;
  };
  float tmpvar_24;
  if (tmpvar_21.y) {
    tmpvar_24 = tmpvar_22.y;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_21.z) {
    tmpvar_25 = tmpvar_22.z;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_21.w) {
    tmpvar_26 = tmpvar_22.w;
  } else {
    tmpvar_26 = 1.0;
  };
  vec4 tmpvar_27;
  tmpvar_27.x = tmpvar_23;
  tmpvar_27.y = tmpvar_24;
  tmpvar_27.z = tmpvar_25;
  tmpvar_27.w = tmpvar_26;
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * (tmpvar_19.w * dot (tmpvar_27, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTexture0, vec2(tmpvar_60));
  highp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp float tmpvar_65;
  tmpvar_65 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_66;
  vec_66 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_ShadowMapTexture, vec_66);
  packDist_67 = tmpvar_68;
  shadowVals_64.x = dot (packDist_67, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_69;
  vec_69 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, vec_69);
  packDist_70 = tmpvar_71;
  shadowVals_64.y = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_64.z = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_75;
  vec_75 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, vec_75);
  packDist_76 = tmpvar_77;
  shadowVals_64.w = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_78;
  tmpvar_78 = lessThan (shadowVals_64, vec4(tmpvar_65));
  highp vec4 tmpvar_79;
  tmpvar_79 = _LightShadowData.xxxx;
  highp float tmpvar_80;
  if (tmpvar_78.x) {
    tmpvar_80 = tmpvar_79.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_78.y) {
    tmpvar_81 = tmpvar_79.y;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_78.z) {
    tmpvar_82 = tmpvar_79.z;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_78.w) {
    tmpvar_83 = tmpvar_79.w;
  } else {
    tmpvar_83 = 1.0;
  };
  highp vec4 tmpvar_84;
  tmpvar_84.x = tmpvar_80;
  tmpvar_84.y = tmpvar_81;
  tmpvar_84.z = tmpvar_82;
  tmpvar_84.w = tmpvar_83;
  shadows_63 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (tmpvar_61.w * tmpvar_62);
  atten_4 = tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_6);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_5, i_91) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTexture0, vec2(tmpvar_60));
  highp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp float tmpvar_65;
  tmpvar_65 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_66;
  vec_66 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_67;
  lowp vec4 tmpvar_68;
  tmpvar_68 = textureCube (_ShadowMapTexture, vec_66);
  packDist_67 = tmpvar_68;
  shadowVals_64.x = dot (packDist_67, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_69;
  vec_69 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_70;
  lowp vec4 tmpvar_71;
  tmpvar_71 = textureCube (_ShadowMapTexture, vec_69);
  packDist_70 = tmpvar_71;
  shadowVals_64.y = dot (packDist_70, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_72;
  vec_72 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_73;
  lowp vec4 tmpvar_74;
  tmpvar_74 = textureCube (_ShadowMapTexture, vec_72);
  packDist_73 = tmpvar_74;
  shadowVals_64.z = dot (packDist_73, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_75;
  vec_75 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_76;
  lowp vec4 tmpvar_77;
  tmpvar_77 = textureCube (_ShadowMapTexture, vec_75);
  packDist_76 = tmpvar_77;
  shadowVals_64.w = dot (packDist_76, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_78;
  tmpvar_78 = lessThan (shadowVals_64, vec4(tmpvar_65));
  highp vec4 tmpvar_79;
  tmpvar_79 = _LightShadowData.xxxx;
  highp float tmpvar_80;
  if (tmpvar_78.x) {
    tmpvar_80 = tmpvar_79.x;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_78.y) {
    tmpvar_81 = tmpvar_79.y;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_78.z) {
    tmpvar_82 = tmpvar_79.z;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_78.w) {
    tmpvar_83 = tmpvar_79.w;
  } else {
    tmpvar_83 = 1.0;
  };
  highp vec4 tmpvar_84;
  tmpvar_84.x = tmpvar_80;
  tmpvar_84.y = tmpvar_81;
  tmpvar_84.z = tmpvar_82;
  tmpvar_84.w = tmpvar_83;
  shadows_63 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_85;
  highp float tmpvar_86;
  tmpvar_86 = (tmpvar_61.w * tmpvar_62);
  atten_4 = tmpvar_86;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_6);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_5, i_91) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 441
#line 458
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 449
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 453
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 441
#line 458
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 462
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 466
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 469
lowp vec4 frag( in v2f IN ) {
    #line 471
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 475
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 479
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 483
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 487
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 491
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 495
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 499
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 503
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  float tmpvar_15;
  tmpvar_15 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_16;
  tmpvar_16 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_17;
  tmpvar_17 = (((texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_15)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_15)), tmpvar_16.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1) * _Color);
  color_2 = tmpvar_17;
  float tmpvar_18;
  tmpvar_18 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_19;
  tmpvar_19 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_20;
  tmpvar_20 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_21;
  shadowVals_21.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_21.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_22;
  tmpvar_22 = lessThan (shadowVals_21, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_23;
  tmpvar_23 = _LightShadowData.xxxx;
  float tmpvar_24;
  if (tmpvar_22.x) {
    tmpvar_24 = tmpvar_23.x;
  } else {
    tmpvar_24 = 1.0;
  };
  float tmpvar_25;
  if (tmpvar_22.y) {
    tmpvar_25 = tmpvar_23.y;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  if (tmpvar_22.z) {
    tmpvar_26 = tmpvar_23.z;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_22.w) {
    tmpvar_27 = tmpvar_23.w;
  } else {
    tmpvar_27 = 1.0;
  };
  vec4 tmpvar_28;
  tmpvar_28.x = tmpvar_24;
  tmpvar_28.y = tmpvar_25;
  tmpvar_28.z = tmpvar_26;
  tmpvar_28.w = tmpvar_27;
  color_2.xyz = (tmpvar_17.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_18) * 4.0) * ((tmpvar_19.w * tmpvar_20.w) * dot (tmpvar_28, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0))), 0.0, 1.0));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_63;
  mediump vec4 shadows_64;
  highp vec4 shadowVals_65;
  highp float tmpvar_66;
  tmpvar_66 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_65.x = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_65.y = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_65.z = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_76;
  vec_76 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, vec_76);
  packDist_77 = tmpvar_78;
  shadowVals_65.w = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_79;
  tmpvar_79 = lessThan (shadowVals_65, vec4(tmpvar_66));
  highp vec4 tmpvar_80;
  tmpvar_80 = _LightShadowData.xxxx;
  highp float tmpvar_81;
  if (tmpvar_79.x) {
    tmpvar_81 = tmpvar_80.x;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_79.y) {
    tmpvar_82 = tmpvar_80.y;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_79.z) {
    tmpvar_83 = tmpvar_80.z;
  } else {
    tmpvar_83 = 1.0;
  };
  highp float tmpvar_84;
  if (tmpvar_79.w) {
    tmpvar_84 = tmpvar_80.w;
  } else {
    tmpvar_84 = 1.0;
  };
  highp vec4 tmpvar_85;
  tmpvar_85.x = tmpvar_81;
  tmpvar_85.y = tmpvar_82;
  tmpvar_85.z = tmpvar_83;
  tmpvar_85.w = tmpvar_84;
  shadows_64 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = dot (shadows_64, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_63 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((tmpvar_61.w * tmpvar_62.w) * tmpvar_63);
  atten_4 = tmpvar_87;
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_3 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_90;
  mediump vec3 tmpvar_91;
  mediump vec3 i_92;
  i_92 = -(lightDirection_6);
  tmpvar_91 = (i_92 - (2.0 * (dot (normalDir_5, i_92) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_91, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_54;
  tmpvar_54 = ((main_17 * tmpvar_53) * xlv_TEXCOORD1);
  color_19 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55 = (color_19 * _Color);
  color_19 = tmpvar_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_57;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_58;
  tmpvar_58 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_59;
  tmpvar_59 = ((tmpvar_58 - 0.01) / 0.99);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_63;
  mediump vec4 shadows_64;
  highp vec4 shadowVals_65;
  highp float tmpvar_66;
  tmpvar_66 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_65.x = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_65.y = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_65.z = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_76;
  vec_76 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_77;
  lowp vec4 tmpvar_78;
  tmpvar_78 = textureCube (_ShadowMapTexture, vec_76);
  packDist_77 = tmpvar_78;
  shadowVals_65.w = dot (packDist_77, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_79;
  tmpvar_79 = lessThan (shadowVals_65, vec4(tmpvar_66));
  highp vec4 tmpvar_80;
  tmpvar_80 = _LightShadowData.xxxx;
  highp float tmpvar_81;
  if (tmpvar_79.x) {
    tmpvar_81 = tmpvar_80.x;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_79.y) {
    tmpvar_82 = tmpvar_80.y;
  } else {
    tmpvar_82 = 1.0;
  };
  highp float tmpvar_83;
  if (tmpvar_79.z) {
    tmpvar_83 = tmpvar_80.z;
  } else {
    tmpvar_83 = 1.0;
  };
  highp float tmpvar_84;
  if (tmpvar_79.w) {
    tmpvar_84 = tmpvar_80.w;
  } else {
    tmpvar_84 = 1.0;
  };
  highp vec4 tmpvar_85;
  tmpvar_85.x = tmpvar_81;
  tmpvar_85.y = tmpvar_82;
  tmpvar_85.z = tmpvar_83;
  tmpvar_85.w = tmpvar_84;
  shadows_64 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = dot (shadows_64, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_63 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((tmpvar_61.w * tmpvar_62.w) * tmpvar_63);
  atten_4 = tmpvar_87;
  mediump float tmpvar_88;
  tmpvar_88 = clamp ((((_LightColor0.w * tmpvar_59) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_89;
  tmpvar_89 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_88)), 0.0, 1.0);
  light_3 = tmpvar_89;
  mediump vec3 tmpvar_90;
  tmpvar_90 = vec3(clamp (floor((1.0 + tmpvar_58)), 0.0, 1.0));
  specularReflection_2 = tmpvar_90;
  mediump vec3 tmpvar_91;
  mediump vec3 i_92;
  i_92 = -(lightDirection_6);
  tmpvar_91 = (i_92 - (2.0 * (dot (normalDir_5, i_92) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_91, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_19.xyz = (tmpvar_55.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 442
#line 459
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 450
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 454
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 442
#line 459
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 463
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 467
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 470
lowp vec4 frag( in v2f IN ) {
    #line 472
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 476
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 480
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 484
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 488
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 492
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 496
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 500
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 504
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, vec2(tmpvar_85)).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_5);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_4, i_91) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_86 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_87 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, vec2(tmpvar_85)).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_5);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_4, i_91) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_86 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_87 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 441
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 433
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 437
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 441
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 445
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 449
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    #line 454
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 458
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 462
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 466
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 470
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 474
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 478
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 482
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 486
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 490
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 494
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 498
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 502
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 26 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r2.xyz, r0.x, v2
mov r0.xyz, r2
mov r0.w, c9.x
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o6.xyz, r0.x, r1
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v0
mov o2, v1
mov o3.xyz, r2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = clamp (((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = clamp (((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 422
#line 448
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 430
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 435
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 422
#line 448
#line 437
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 439
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 443
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 448
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 452
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 456
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 460
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 464
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 468
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 472
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 476
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 480
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 484
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 488
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 492
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 496
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 500
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  highp float tmpvar_90;
  tmpvar_90 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w);
  atten_4 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * ((tmpvar_85 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_3 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_93;
  mediump vec3 tmpvar_94;
  mediump vec3 i_95;
  i_95 = -(lightDirection_6);
  tmpvar_94 = (i_95 - (2.0 * (dot (normalDir_5, i_95) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_94, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_91 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  highp float tmpvar_90;
  tmpvar_90 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w);
  atten_4 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * ((tmpvar_85 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_3 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_93;
  mediump vec3 tmpvar_94;
  mediump vec3 i_95;
  i_95 = -(lightDirection_6);
  tmpvar_94 = (i_95 - (2.0 * (dot (normalDir_5, i_95) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_94, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_91 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 450
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 442
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 446
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 450
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 454
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 458
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 461
lowp vec4 frag( in v2f IN ) {
    #line 463
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 467
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 471
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 475
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 479
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 483
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 487
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 491
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 495
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 499
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 503
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 507
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 511
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = (texture2D (_LightTextureB0, vec2(tmpvar_85)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_5);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_4, i_91) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_86 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_87 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = (texture2D (_LightTextureB0, vec2(tmpvar_85)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_5);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_4, i_91) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_86 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_87 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 442
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 434
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 438
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 442
#line 442
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 446
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 450
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 453
lowp vec4 frag( in v2f IN ) {
    #line 455
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 459
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 463
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 467
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 471
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 475
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 479
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 483
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 487
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 491
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 495
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 499
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 503
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2D (_LightTexture0, xlv_TEXCOORD3).w), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
mov r1.xyz, r2
mov r1.w, c13.x
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 441
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 433
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 437
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 441
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 445
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 449
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    #line 454
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 458
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 462
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 466
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 470
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 474
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 478
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 482
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 486
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 490
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 494
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 498
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 502
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_26;
  if ((tmpvar_25.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_26 = _LightShadowData.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  tmpvar_27 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_23.w) * tmpvar_24.w) * tmpvar_26)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_27)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_27 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump float shadow_92;
  lowp vec4 tmpvar_93;
  tmpvar_93 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_94;
  if ((tmpvar_93.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  shadow_92 = tmpvar_94;
  tmpvar_91 = shadow_92;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_4 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  mediump vec3 i_100;
  i_100 = -(lightDirection_6);
  tmpvar_99 = (i_100 - (2.0 * (dot (normalDir_5, i_100) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_99, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_96 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump float shadow_92;
  lowp vec4 tmpvar_93;
  tmpvar_93 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_94;
  if ((tmpvar_93.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  shadow_92 = tmpvar_94;
  tmpvar_91 = shadow_92;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_4 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  mediump vec3 i_100;
  i_100 = -(lightDirection_6);
  tmpvar_99 = (i_100 - (2.0 * (dot (normalDir_5, i_100) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_99, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_96 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 458
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 449
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 453
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 458
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 462
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 466
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 469
lowp vec4 frag( in v2f IN ) {
    #line 471
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 475
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 479
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 483
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 487
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 495
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 499
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 503
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 507
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 511
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 515
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 519
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp float tmpvar_92;
  tmpvar_92 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (_LightShadowData.x + (shadow_91 * (1.0 - _LightShadowData.x)));
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * ((tmpvar_85 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 459
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 450
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 454
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 459
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 463
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 467
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 470
lowp vec4 frag( in v2f IN ) {
    #line 472
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 476
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 480
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 484
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 488
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 492
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 496
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 500
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 504
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 508
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 512
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 516
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 520
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(gl_Normal);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_3;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c11.y
mov o0, r0
mul r1.y, r1, c9.x
mad o4.xy, r1.z, c10.zwzw, r1
mov o4.zw, r0
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r2.xyz, r0.x, v2
mov r0.xyz, r2
mov r0.w, c11.x
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o7.xyz, r0.x, r1
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v0
mov o2, v1
mov o3.xyz, r2
mov o6.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_85;
  mediump float lightShadowDataX_86;
  highp float dist_87;
  lowp float tmpvar_88;
  tmpvar_88 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_87 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = _LightShadowData.x;
  lightShadowDataX_86 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = max (float((dist_87 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_86);
  tmpvar_85 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_3 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_93;
  mediump vec3 tmpvar_94;
  mediump vec3 i_95;
  i_95 = -(lightDirection_5);
  tmpvar_94 = (i_95 - (2.0 * (dot (normalDir_4, i_95) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_94, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_91 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  tmpvar_85 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_85.x), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_85.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 431
#line 447
#line 431
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 435
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 439
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 443
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 431
#line 447
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 451
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 455
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    #line 460
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 464
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 468
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 472
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 476
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 480
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 484
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 488
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 492
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 496
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 500
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 504
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 508
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(gl_Normal);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_3;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c15.y
mov o0, r1
mul r0.y, r0, c13.x
mad o5.xy, r0.z, c14.zwzw, r0
mov o5.zw, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.w, c15.x
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r1.x, v2, v2
rsq r0.w, r1.x
mul r2.xyz, r0.w, v2
mov r1.xyz, r2
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_85;
  mediump float lightShadowDataX_86;
  highp float dist_87;
  lowp float tmpvar_88;
  tmpvar_88 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_87 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = _LightShadowData.x;
  lightShadowDataX_86 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = max (float((dist_87 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_86);
  tmpvar_85 = tmpvar_90;
  lowp float tmpvar_91;
  tmpvar_91 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_85);
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_91), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_3 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_94;
  mediump vec3 tmpvar_95;
  mediump vec3 i_96;
  i_96 = -(lightDirection_5);
  tmpvar_95 = (i_96 - (2.0 * (dot (normalDir_4, i_96) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_91 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_95, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_92 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_7;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 451
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 442
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 446
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 451
#line 451
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 455
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 459
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 462
lowp vec4 frag( in v2f IN ) {
    #line 464
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 468
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 472
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 476
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 480
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 484
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 488
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 492
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 496
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 500
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 504
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 508
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 512
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_24;
  tmpvar_24 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_25;
  tmpvar_25 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_26;
  if ((tmpvar_25 < tmpvar_24)) {
    tmpvar_26 = _LightShadowData.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  tmpvar_27 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * (tmpvar_23.w * tmpvar_26)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_27)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_27 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = (tmpvar_88.w * tmpvar_93);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = (tmpvar_88.w * tmpvar_93);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 456
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 447
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 451
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 489
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 493
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 497
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 501
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 505
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 509
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 513
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 517
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_24;
  tmpvar_24 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_25;
  tmpvar_25 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_26;
  tmpvar_26 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_27;
  if ((tmpvar_26 < tmpvar_25)) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * ((tmpvar_23.w * tmpvar_24.w) * tmpvar_27)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_28)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_28 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  tmpvar_90 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_94;
  if ((tmpvar_93 < tmpvar_90)) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  tmpvar_95 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_94);
  atten_4 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  mediump vec3 i_100;
  i_100 = -(lightDirection_6);
  tmpvar_99 = (i_100 - (2.0 * (dot (normalDir_5, i_100) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_99, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_96 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  tmpvar_90 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_94;
  if ((tmpvar_93 < tmpvar_90)) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  tmpvar_95 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_94);
  atten_4 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  mediump vec3 i_100;
  i_100 = -(lightDirection_6);
  tmpvar_99 = (i_100 - (2.0 * (dot (normalDir_5, i_100) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_99, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_96 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 457
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 448
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 490
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 494
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 498
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 502
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 506
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 510
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 514
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 518
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_25;
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_25.x = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_25.y = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_25.z = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_25.w = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_27;
  tmpvar_27 = lessThan (shadowVals_25, tmpvar_26.zzzz);
  vec4 tmpvar_28;
  tmpvar_28 = _LightShadowData.xxxx;
  float tmpvar_29;
  if (tmpvar_27.x) {
    tmpvar_29 = tmpvar_28.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_27.y) {
    tmpvar_30 = tmpvar_28.y;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_27.z) {
    tmpvar_31 = tmpvar_28.z;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_27.w) {
    tmpvar_32 = tmpvar_28.w;
  } else {
    tmpvar_32 = 1.0;
  };
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_29;
  tmpvar_33.y = tmpvar_30;
  tmpvar_33.z = tmpvar_31;
  tmpvar_33.w = tmpvar_32;
  float tmpvar_34;
  tmpvar_34 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_23.w) * tmpvar_24.w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_34)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_34 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump vec4 shadows_92;
  highp vec4 shadowVals_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_95;
  P_95 = (tmpvar_94.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_96;
  tmpvar_96 = texture2D (_ShadowMapTexture, P_95).x;
  shadowVals_93.x = tmpvar_96;
  highp vec2 P_97;
  P_97 = (tmpvar_94.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_98;
  tmpvar_98 = texture2D (_ShadowMapTexture, P_97).x;
  shadowVals_93.y = tmpvar_98;
  highp vec2 P_99;
  P_99 = (tmpvar_94.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_ShadowMapTexture, P_99).x;
  shadowVals_93.z = tmpvar_100;
  highp vec2 P_101;
  P_101 = (tmpvar_94.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_102;
  tmpvar_102 = texture2D (_ShadowMapTexture, P_101).x;
  shadowVals_93.w = tmpvar_102;
  bvec4 tmpvar_103;
  tmpvar_103 = lessThan (shadowVals_93, tmpvar_94.zzzz);
  highp vec4 tmpvar_104;
  tmpvar_104 = _LightShadowData.xxxx;
  highp float tmpvar_105;
  if (tmpvar_103.x) {
    tmpvar_105 = tmpvar_104.x;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_103.y) {
    tmpvar_106 = tmpvar_104.y;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_103.z) {
    tmpvar_107 = tmpvar_104.z;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_103.w) {
    tmpvar_108 = tmpvar_104.w;
  } else {
    tmpvar_108 = 1.0;
  };
  highp vec4 tmpvar_109;
  tmpvar_109.x = tmpvar_105;
  tmpvar_109.y = tmpvar_106;
  tmpvar_109.z = tmpvar_107;
  tmpvar_109.w = tmpvar_108;
  shadows_92 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = dot (shadows_92, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_91 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_4 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_113;
  tmpvar_113 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_112)), 0.0, 1.0);
  light_3 = tmpvar_113;
  mediump vec3 tmpvar_114;
  tmpvar_114 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_114;
  mediump vec3 tmpvar_115;
  mediump vec3 i_116;
  i_116 = -(lightDirection_6);
  tmpvar_115 = (i_116 - (2.0 * (dot (normalDir_5, i_116) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_115, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_112 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump vec4 shadows_92;
  highp vec4 shadowVals_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_95;
  P_95 = (tmpvar_94.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_96;
  tmpvar_96 = texture2D (_ShadowMapTexture, P_95).x;
  shadowVals_93.x = tmpvar_96;
  highp vec2 P_97;
  P_97 = (tmpvar_94.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_98;
  tmpvar_98 = texture2D (_ShadowMapTexture, P_97).x;
  shadowVals_93.y = tmpvar_98;
  highp vec2 P_99;
  P_99 = (tmpvar_94.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_ShadowMapTexture, P_99).x;
  shadowVals_93.z = tmpvar_100;
  highp vec2 P_101;
  P_101 = (tmpvar_94.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_102;
  tmpvar_102 = texture2D (_ShadowMapTexture, P_101).x;
  shadowVals_93.w = tmpvar_102;
  bvec4 tmpvar_103;
  tmpvar_103 = lessThan (shadowVals_93, tmpvar_94.zzzz);
  highp vec4 tmpvar_104;
  tmpvar_104 = _LightShadowData.xxxx;
  highp float tmpvar_105;
  if (tmpvar_103.x) {
    tmpvar_105 = tmpvar_104.x;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_103.y) {
    tmpvar_106 = tmpvar_104.y;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_103.z) {
    tmpvar_107 = tmpvar_104.z;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_103.w) {
    tmpvar_108 = tmpvar_104.w;
  } else {
    tmpvar_108 = 1.0;
  };
  highp vec4 tmpvar_109;
  tmpvar_109.x = tmpvar_105;
  tmpvar_109.y = tmpvar_106;
  tmpvar_109.z = tmpvar_107;
  tmpvar_109.w = tmpvar_108;
  shadows_92 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = dot (shadows_92, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_91 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_4 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_113;
  tmpvar_113 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_112)), 0.0, 1.0);
  light_3 = tmpvar_113;
  mediump vec3 tmpvar_114;
  tmpvar_114 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_114;
  mediump vec3 tmpvar_115;
  mediump vec3 i_116;
  i_116 = -(lightDirection_6);
  tmpvar_115 = (i_116 - (2.0 * (dot (normalDir_5, i_116) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_115, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_112 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 466
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 457
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 461
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 466
#line 466
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 470
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 474
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 477
lowp vec4 frag( in v2f IN ) {
    #line 479
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 483
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 487
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 491
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 495
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 503
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 507
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 511
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 515
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 519
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 523
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 527
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  vec4 shadows_22;
  vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_22.x = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[0].xyz)).x;
  shadows_22.y = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[1].xyz)).x;
  shadows_22.z = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[2].xyz)).x;
  shadows_22.w = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_24;
  tmpvar_24 = (_LightShadowData.xxxx + (shadows_22 * (1.0 - _LightShadowData.xxxx)));
  shadows_22 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_24, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_25)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_25 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_93;
  coord_93 = (tmpvar_92 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_94;
  tmpvar_94 = shadow2DEXT (_ShadowMapTexture, coord_93);
  shadows_91.x = tmpvar_94;
  highp vec3 coord_95;
  coord_95 = (tmpvar_92 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_96;
  tmpvar_96 = shadow2DEXT (_ShadowMapTexture, coord_95);
  shadows_91.y = tmpvar_96;
  highp vec3 coord_97;
  coord_97 = (tmpvar_92 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_98;
  tmpvar_98 = shadow2DEXT (_ShadowMapTexture, coord_97);
  shadows_91.z = tmpvar_98;
  highp vec3 coord_99;
  coord_99 = (tmpvar_92 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_100;
  tmpvar_100 = shadow2DEXT (_ShadowMapTexture, coord_99);
  shadows_91.w = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (_LightShadowData.xxxx + (shadows_91 * (1.0 - _LightShadowData.xxxx)));
  shadows_91 = tmpvar_101;
  mediump float tmpvar_102;
  tmpvar_102 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_102;
  highp float tmpvar_103;
  tmpvar_103 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_103;
  mediump float tmpvar_104;
  tmpvar_104 = clamp ((((_LightColor0.w * ((tmpvar_85 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_105;
  tmpvar_105 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_104)), 0.0, 1.0);
  light_3 = tmpvar_105;
  mediump vec3 tmpvar_106;
  tmpvar_106 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_106;
  mediump vec3 tmpvar_107;
  mediump vec3 i_108;
  i_108 = -(lightDirection_6);
  tmpvar_107 = (i_108 - (2.0 * (dot (normalDir_5, i_108) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_107, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_104 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 466
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 457
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 461
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 466
#line 466
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 470
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 474
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 477
lowp vec4 frag( in v2f IN ) {
    #line 479
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 483
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 487
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 491
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 495
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 503
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 507
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 511
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 515
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 519
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 523
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 527
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_24;
  shadowVals_24.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_25;
  tmpvar_25 = lessThan (shadowVals_24, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_26;
  tmpvar_26 = _LightShadowData.xxxx;
  float tmpvar_27;
  if (tmpvar_25.x) {
    tmpvar_27 = tmpvar_26.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_25.y) {
    tmpvar_28 = tmpvar_26.y;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_25.z) {
    tmpvar_29 = tmpvar_26.z;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_25.w) {
    tmpvar_30 = tmpvar_26.w;
  } else {
    tmpvar_30 = 1.0;
  };
  vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_27;
  tmpvar_31.y = tmpvar_28;
  tmpvar_31.z = tmpvar_29;
  tmpvar_31.w = tmpvar_30;
  float tmpvar_32;
  tmpvar_32 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * (tmpvar_23.w * dot (tmpvar_31, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_32)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_32 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (tmpvar_88.w * tmpvar_89);
  atten_4 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_3 = tmpvar_115;
  mediump vec3 tmpvar_116;
  tmpvar_116 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_116;
  mediump vec3 tmpvar_117;
  mediump vec3 i_118;
  i_118 = -(lightDirection_6);
  tmpvar_117 = (i_118 - (2.0 * (dot (normalDir_5, i_118) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_117, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_114 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (tmpvar_88.w * tmpvar_89);
  atten_4 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_3 = tmpvar_115;
  mediump vec3 tmpvar_116;
  tmpvar_116 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_116;
  mediump vec3 tmpvar_117;
  mediump vec3 i_118;
  i_118 = -(lightDirection_6);
  tmpvar_117 = (i_118 - (2.0 * (dot (normalDir_5, i_118) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_117, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_114 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 462
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 453
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 457
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 462
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 466
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 470
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 473
lowp vec4 frag( in v2f IN ) {
    #line 475
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 479
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 483
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 487
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 491
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 495
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 499
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 503
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 507
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 511
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 515
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 519
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 523
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_24;
  tmpvar_24 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_25;
  shadowVals_25.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_25, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * ((tmpvar_23.w * tmpvar_24.w) * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_33)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_33 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp float tmpvar_93;
  tmpvar_93 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_94;
  vec_94 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_95;
  lowp vec4 tmpvar_96;
  tmpvar_96 = textureCube (_ShadowMapTexture, vec_94);
  packDist_95 = tmpvar_96;
  shadowVals_92.x = dot (packDist_95, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_97;
  vec_97 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_98;
  lowp vec4 tmpvar_99;
  tmpvar_99 = textureCube (_ShadowMapTexture, vec_97);
  packDist_98 = tmpvar_99;
  shadowVals_92.y = dot (packDist_98, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_100;
  vec_100 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = textureCube (_ShadowMapTexture, vec_100);
  packDist_101 = tmpvar_102;
  shadowVals_92.z = dot (packDist_101, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_92.w = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_106;
  tmpvar_106 = lessThan (shadowVals_92, vec4(tmpvar_93));
  highp vec4 tmpvar_107;
  tmpvar_107 = _LightShadowData.xxxx;
  highp float tmpvar_108;
  if (tmpvar_106.x) {
    tmpvar_108 = tmpvar_107.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_106.y) {
    tmpvar_109 = tmpvar_107.y;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_106.z) {
    tmpvar_110 = tmpvar_107.z;
  } else {
    tmpvar_110 = 1.0;
  };
  highp float tmpvar_111;
  if (tmpvar_106.w) {
    tmpvar_111 = tmpvar_107.w;
  } else {
    tmpvar_111 = 1.0;
  };
  highp vec4 tmpvar_112;
  tmpvar_112.x = tmpvar_108;
  tmpvar_112.y = tmpvar_109;
  tmpvar_112.z = tmpvar_110;
  tmpvar_112.w = tmpvar_111;
  shadows_91 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_113;
  highp float tmpvar_114;
  tmpvar_114 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_116;
  tmpvar_116 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_115)), 0.0, 1.0);
  light_3 = tmpvar_116;
  mediump vec3 tmpvar_117;
  tmpvar_117 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_117;
  mediump vec3 tmpvar_118;
  mediump vec3 i_119;
  i_119 = -(lightDirection_6);
  tmpvar_118 = (i_119 - (2.0 * (dot (normalDir_5, i_119) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_118, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_115 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp float tmpvar_93;
  tmpvar_93 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_94;
  vec_94 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_95;
  lowp vec4 tmpvar_96;
  tmpvar_96 = textureCube (_ShadowMapTexture, vec_94);
  packDist_95 = tmpvar_96;
  shadowVals_92.x = dot (packDist_95, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_97;
  vec_97 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_98;
  lowp vec4 tmpvar_99;
  tmpvar_99 = textureCube (_ShadowMapTexture, vec_97);
  packDist_98 = tmpvar_99;
  shadowVals_92.y = dot (packDist_98, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_100;
  vec_100 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = textureCube (_ShadowMapTexture, vec_100);
  packDist_101 = tmpvar_102;
  shadowVals_92.z = dot (packDist_101, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_92.w = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_106;
  tmpvar_106 = lessThan (shadowVals_92, vec4(tmpvar_93));
  highp vec4 tmpvar_107;
  tmpvar_107 = _LightShadowData.xxxx;
  highp float tmpvar_108;
  if (tmpvar_106.x) {
    tmpvar_108 = tmpvar_107.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_106.y) {
    tmpvar_109 = tmpvar_107.y;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_106.z) {
    tmpvar_110 = tmpvar_107.z;
  } else {
    tmpvar_110 = 1.0;
  };
  highp float tmpvar_111;
  if (tmpvar_106.w) {
    tmpvar_111 = tmpvar_107.w;
  } else {
    tmpvar_111 = 1.0;
  };
  highp vec4 tmpvar_112;
  tmpvar_112.x = tmpvar_108;
  tmpvar_112.y = tmpvar_109;
  tmpvar_112.z = tmpvar_110;
  tmpvar_112.w = tmpvar_111;
  shadows_91 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_113;
  highp float tmpvar_114;
  tmpvar_114 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_116;
  tmpvar_116 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_115)), 0.0, 1.0);
  light_3 = tmpvar_116;
  mediump vec3 tmpvar_117;
  tmpvar_117 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_117;
  mediump vec3 tmpvar_118;
  mediump vec3 i_119;
  i_119 = -(lightDirection_6);
  tmpvar_118 = (i_119 - (2.0 * (dot (normalDir_5, i_119) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_118, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_115 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 463
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 454
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 458
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 463
#line 463
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 467
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 471
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 474
lowp vec4 frag( in v2f IN ) {
    #line 476
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 480
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 484
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 488
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 492
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 496
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 500
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 504
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 508
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 512
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 516
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 520
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 524
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, vec2(tmpvar_85)).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_5);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_4, i_91) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_86 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_87 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = texture2D (_LightTexture0, vec2(tmpvar_85)).w;
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_5);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_4, i_91) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_86 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_87 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 441
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 433
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 437
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 441
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 445
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 449
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    #line 454
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 458
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 462
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 466
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 470
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 474
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 478
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 482
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 486
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 490
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 494
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 498
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 502
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp (((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 26 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_texcoord7 o6
def c9, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r2.xyz, r0.x, v2
mov r0.xyz, r2
mov r0.w, c9.x
dp4 o4.z, r0, c6
dp4 o4.y, r0, c5
dp4 o4.x, r0, c4
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o6.xyz, r0.x, r1
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v0
mov o2, v1
mov o3.xyz, r2
mov o5.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = clamp (((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = clamp (((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 422
#line 448
#line 422
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 426
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 430
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 435
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 411
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 422
#line 448
#line 437
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 439
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 443
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 448
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 452
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 456
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 460
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 464
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 468
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 472
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 476
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 480
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 484
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 488
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 492
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 496
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    #line 500
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  highp float tmpvar_90;
  tmpvar_90 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w);
  atten_4 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * ((tmpvar_85 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_3 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_93;
  mediump vec3 tmpvar_94;
  mediump vec3 i_95;
  i_95 = -(lightDirection_6);
  tmpvar_94 = (i_95 - (2.0 * (dot (normalDir_5, i_95) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_94, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_91 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  highp float tmpvar_90;
  tmpvar_90 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w);
  atten_4 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * ((tmpvar_85 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_3 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_93;
  mediump vec3 tmpvar_94;
  mediump vec3 i_95;
  i_95 = -(lightDirection_6);
  tmpvar_94 = (i_95 - (2.0 * (dot (normalDir_5, i_95) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_94, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_91 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 450
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 442
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 446
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 450
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 454
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 458
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 461
lowp vec4 frag( in v2f IN ) {
    #line 463
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 467
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 471
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 475
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 479
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 483
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 487
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 491
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 495
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 499
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 503
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 507
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 511
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.xyz, r2
mov r1.w, c13.x
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = (texture2D (_LightTextureB0, vec2(tmpvar_85)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_5);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_4, i_91) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_86 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_87 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_85;
  tmpvar_85 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_86;
  tmpvar_86 = (texture2D (_LightTextureB0, vec2(tmpvar_85)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_87;
  tmpvar_87 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_86), 0.0, 1.0);
  highp vec3 tmpvar_88;
  tmpvar_88 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_87)), 0.0, 1.0);
  light_3 = tmpvar_88;
  mediump vec3 tmpvar_89;
  tmpvar_89 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_89;
  mediump vec3 tmpvar_90;
  mediump vec3 i_91;
  i_91 = -(lightDirection_5);
  tmpvar_90 = (i_91 - (2.0 * (dot (normalDir_4, i_91) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_86 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_90, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_87 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 442
#line 426
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 430
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 434
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 438
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 426
#line 442
#line 442
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 446
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 450
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 453
lowp vec4 frag( in v2f IN ) {
    #line 455
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 459
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 463
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 467
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 471
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 475
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 479
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 483
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 487
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 491
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 495
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 499
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 503
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2D (_LightTexture0, xlv_TEXCOORD3).w), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c13, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
mov r1.xyz, r2
mov r1.w, c13.x
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o7.xyz, r0.w, r0
dp4 o5.z, r1, c6
dp4 o5.y, r1, c5
dp4 o5.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o6.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 441
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 433
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 437
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 425
#line 441
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 445
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 449
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    #line 454
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 458
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 462
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 466
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 470
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 474
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 478
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 482
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 486
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 490
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 494
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 498
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 502
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_26;
  if ((tmpvar_25.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_26 = _LightShadowData.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  tmpvar_27 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_23.w) * tmpvar_24.w) * tmpvar_26)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_27)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_27 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump float shadow_92;
  lowp vec4 tmpvar_93;
  tmpvar_93 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_94;
  if ((tmpvar_93.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  shadow_92 = tmpvar_94;
  tmpvar_91 = shadow_92;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_4 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  mediump vec3 i_100;
  i_100 = -(lightDirection_6);
  tmpvar_99 = (i_100 - (2.0 * (dot (normalDir_5, i_100) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_99, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_96 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump float shadow_92;
  lowp vec4 tmpvar_93;
  tmpvar_93 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_94;
  if ((tmpvar_93.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  shadow_92 = tmpvar_94;
  tmpvar_91 = shadow_92;
  highp float tmpvar_95;
  tmpvar_95 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_4 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  mediump vec3 i_100;
  i_100 = -(lightDirection_6);
  tmpvar_99 = (i_100 - (2.0 * (dot (normalDir_5, i_100) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_99, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_96 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 458
#line 441
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 445
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 449
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 453
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 441
#line 458
#line 458
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 462
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 466
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 469
lowp vec4 frag( in v2f IN ) {
    #line 471
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 475
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 479
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 483
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 487
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 491
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 495
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 499
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 503
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 507
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 511
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 515
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 519
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))))), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp float tmpvar_92;
  tmpvar_92 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = (_LightShadowData.x + (shadow_91 * (1.0 - _LightShadowData.x)));
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * ((tmpvar_85 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 459
#line 442
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 446
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 450
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 454
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 429
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 442
#line 459
#line 459
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 463
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 467
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 470
lowp vec4 frag( in v2f IN ) {
    #line 472
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 476
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 480
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 484
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 488
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 492
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 496
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 500
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 504
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 508
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 512
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 516
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 520
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(gl_Normal);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_3;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = o_5;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_texcoord7 o7
def c11, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp4 r0.w, v0, c3
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r1.xyz, r0.xyww, c11.y
mov o0, r0
mul r1.y, r1, c9.x
mad o4.xy, r1.z, c10.zwzw, r1
mov o4.zw, r0
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r2.xyz, r0.x, v2
mov r0.xyz, r2
mov r0.w, c11.x
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r0.x, r1.w
mul o7.xyz, r0.x, r1
rsq r0.y, r0.y
rcp o1.x, r0.x
mul r0.xyz, r0.y, v0
mov o2, v1
mov o3.xyz, r2
mov o6.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_85;
  mediump float lightShadowDataX_86;
  highp float dist_87;
  lowp float tmpvar_88;
  tmpvar_88 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_87 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = _LightShadowData.x;
  lightShadowDataX_86 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = max (float((dist_87 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_86);
  tmpvar_85 = tmpvar_90;
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_3 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_93;
  mediump vec3 tmpvar_94;
  mediump vec3 i_95;
  i_95 = -(lightDirection_5);
  tmpvar_94 = (i_95 - (2.0 * (dot (normalDir_4, i_95) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_94, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_91 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  tmpvar_85 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_85.x), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_85.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 431
#line 447
#line 431
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 435
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 439
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 443
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 419
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 431
#line 447
#line 447
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 451
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 455
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 458
lowp vec4 frag( in v2f IN ) {
    #line 460
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 464
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 468
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 472
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 476
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 480
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 484
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 488
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 492
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 496
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 500
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 504
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 508
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 p_2;
  p_2 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(gl_Normal);
  vec4 tmpvar_4;
  tmpvar_4.w = 0.0;
  tmpvar_4.xyz = tmpvar_3;
  vec4 o_5;
  vec4 tmpvar_6;
  tmpvar_6 = (tmpvar_1 * 0.5);
  vec2 tmpvar_7;
  tmpvar_7.x = tmpvar_6.x;
  tmpvar_7.y = (tmpvar_6.y * _ProjectionParams.x);
  o_5.xy = (tmpvar_7 + tmpvar_6.w);
  o_5.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_3;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_5;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_4).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  float tmpvar_22;
  tmpvar_22 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_22)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_22 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 34 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c15, 0.00000000, 0.50000000, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp4 r1.w, v0, c3
dp4 r1.z, v0, c2
dp4 r1.x, v0, c0
dp4 r1.y, v0, c1
mul r0.xyz, r1.xyww, c15.y
mov o0, r1
mul r0.y, r0, c13.x
mad o5.xy, r0.z, c14.zwzw, r0
mov o5.zw, r1
dp4 r0.w, v0, c7
dp4 r0.z, v0, c6
dp4 r0.x, v0, c4
dp4 r0.y, v0, c5
mov r1.w, c15.x
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r1.x, v2, v2
rsq r0.w, r1.x
mul r2.xyz, r0.w, v2
mov r1.xyz, r2
add r0.xyz, -r0, c12
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c6
dp4 o6.y, r1, c5
dp4 o6.x, r1, c4
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_85;
  mediump float lightShadowDataX_86;
  highp float dist_87;
  lowp float tmpvar_88;
  tmpvar_88 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_87 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = _LightShadowData.x;
  lightShadowDataX_86 = tmpvar_89;
  highp float tmpvar_90;
  tmpvar_90 = max (float((dist_87 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_86);
  tmpvar_85 = tmpvar_90;
  lowp float tmpvar_91;
  tmpvar_91 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_85);
  mediump float tmpvar_92;
  tmpvar_92 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_91), 0.0, 1.0);
  highp vec3 tmpvar_93;
  tmpvar_93 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_92)), 0.0, 1.0);
  light_3 = tmpvar_93;
  mediump vec3 tmpvar_94;
  tmpvar_94 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_94;
  mediump vec3 tmpvar_95;
  mediump vec3 i_96;
  i_96 = -(lightDirection_5);
  tmpvar_95 = (i_96 - (2.0 * (dot (normalDir_4, i_96) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_91 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_95, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_92 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 p_4;
  p_4 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  mediump vec4 tmpvar_6;
  tmpvar_6.w = 0.0;
  tmpvar_6.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_7;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8));
  highp vec4 tmpvar_74;
  tmpvar_74 = ((main_24 * tmpvar_73) * xlv_TEXCOORD1);
  color_26 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (color_26, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_26.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_82;
  lowp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_83;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  specularReflection_2 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_26.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 451
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 442
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 446
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 434
#line 451
#line 451
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 455
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 459
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 462
lowp vec4 frag( in v2f IN ) {
    #line 464
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 468
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 472
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 476
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 480
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 484
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 488
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 492
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 496
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 500
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 504
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 508
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 512
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_24;
  tmpvar_24 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_25;
  tmpvar_25 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_26;
  if ((tmpvar_25 < tmpvar_24)) {
    tmpvar_26 = _LightShadowData.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  tmpvar_27 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * (tmpvar_23.w * tmpvar_26)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_27)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_27 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = (tmpvar_88.w * tmpvar_93);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = (tmpvar_88.w * tmpvar_93);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 456
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 447
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 451
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 489
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 493
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 497
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 501
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 505
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 509
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 513
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 517
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_24;
  tmpvar_24 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_25;
  tmpvar_25 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_26;
  tmpvar_26 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_27;
  if ((tmpvar_26 < tmpvar_25)) {
    tmpvar_27 = _LightShadowData.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  tmpvar_28 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * ((tmpvar_23.w * tmpvar_24.w) * tmpvar_27)), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_28)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_28 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  tmpvar_90 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_94;
  if ((tmpvar_93 < tmpvar_90)) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  tmpvar_95 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_94);
  atten_4 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  mediump vec3 i_100;
  i_100 = -(lightDirection_6);
  tmpvar_99 = (i_100 - (2.0 * (dot (normalDir_5, i_100) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_99, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_96 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  tmpvar_90 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_91 = tmpvar_92;
  highp float tmpvar_93;
  tmpvar_93 = dot (packDist_91, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_94;
  if ((tmpvar_93 < tmpvar_90)) {
    tmpvar_94 = _LightShadowData.x;
  } else {
    tmpvar_94 = 1.0;
  };
  highp float tmpvar_95;
  tmpvar_95 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_94);
  atten_4 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_97;
  tmpvar_97 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_96)), 0.0, 1.0);
  light_3 = tmpvar_97;
  mediump vec3 tmpvar_98;
  tmpvar_98 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_98;
  mediump vec3 tmpvar_99;
  mediump vec3 i_100;
  i_100 = -(lightDirection_6);
  tmpvar_99 = (i_100 - (2.0 * (dot (normalDir_5, i_100) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_99, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_96 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 457
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 448
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 490
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 494
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 498
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 502
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 506
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 510
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 514
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 518
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_25;
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_25.x = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_25.y = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_25.z = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_25.w = texture2D (_ShadowMapTexture, (tmpvar_26.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_27;
  tmpvar_27 = lessThan (shadowVals_25, tmpvar_26.zzzz);
  vec4 tmpvar_28;
  tmpvar_28 = _LightShadowData.xxxx;
  float tmpvar_29;
  if (tmpvar_27.x) {
    tmpvar_29 = tmpvar_28.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_27.y) {
    tmpvar_30 = tmpvar_28.y;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_27.z) {
    tmpvar_31 = tmpvar_28.z;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_27.w) {
    tmpvar_32 = tmpvar_28.w;
  } else {
    tmpvar_32 = 1.0;
  };
  vec4 tmpvar_33;
  tmpvar_33.x = tmpvar_29;
  tmpvar_33.y = tmpvar_30;
  tmpvar_33.z = tmpvar_31;
  tmpvar_33.w = tmpvar_32;
  float tmpvar_34;
  tmpvar_34 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_23.w) * tmpvar_24.w) * dot (tmpvar_33, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_34)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_34 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump vec4 shadows_92;
  highp vec4 shadowVals_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_95;
  P_95 = (tmpvar_94.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_96;
  tmpvar_96 = texture2D (_ShadowMapTexture, P_95).x;
  shadowVals_93.x = tmpvar_96;
  highp vec2 P_97;
  P_97 = (tmpvar_94.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_98;
  tmpvar_98 = texture2D (_ShadowMapTexture, P_97).x;
  shadowVals_93.y = tmpvar_98;
  highp vec2 P_99;
  P_99 = (tmpvar_94.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_ShadowMapTexture, P_99).x;
  shadowVals_93.z = tmpvar_100;
  highp vec2 P_101;
  P_101 = (tmpvar_94.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_102;
  tmpvar_102 = texture2D (_ShadowMapTexture, P_101).x;
  shadowVals_93.w = tmpvar_102;
  bvec4 tmpvar_103;
  tmpvar_103 = lessThan (shadowVals_93, tmpvar_94.zzzz);
  highp vec4 tmpvar_104;
  tmpvar_104 = _LightShadowData.xxxx;
  highp float tmpvar_105;
  if (tmpvar_103.x) {
    tmpvar_105 = tmpvar_104.x;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_103.y) {
    tmpvar_106 = tmpvar_104.y;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_103.z) {
    tmpvar_107 = tmpvar_104.z;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_103.w) {
    tmpvar_108 = tmpvar_104.w;
  } else {
    tmpvar_108 = 1.0;
  };
  highp vec4 tmpvar_109;
  tmpvar_109.x = tmpvar_105;
  tmpvar_109.y = tmpvar_106;
  tmpvar_109.z = tmpvar_107;
  tmpvar_109.w = tmpvar_108;
  shadows_92 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = dot (shadows_92, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_91 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_4 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_113;
  tmpvar_113 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_112)), 0.0, 1.0);
  light_3 = tmpvar_113;
  mediump vec3 tmpvar_114;
  tmpvar_114 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_114;
  mediump vec3 tmpvar_115;
  mediump vec3 i_116;
  i_116 = -(lightDirection_6);
  tmpvar_115 = (i_116 - (2.0 * (dot (normalDir_5, i_116) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_115, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_112 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  lowp vec4 tmpvar_87;
  highp vec2 P_88;
  P_88 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_87 = texture2D (_LightTexture0, P_88);
  highp float tmpvar_89;
  tmpvar_89 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_90;
  tmpvar_90 = texture2D (_LightTextureB0, vec2(tmpvar_89));
  lowp float tmpvar_91;
  mediump vec4 shadows_92;
  highp vec4 shadowVals_93;
  highp vec3 tmpvar_94;
  tmpvar_94 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_95;
  P_95 = (tmpvar_94.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_96;
  tmpvar_96 = texture2D (_ShadowMapTexture, P_95).x;
  shadowVals_93.x = tmpvar_96;
  highp vec2 P_97;
  P_97 = (tmpvar_94.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_98;
  tmpvar_98 = texture2D (_ShadowMapTexture, P_97).x;
  shadowVals_93.y = tmpvar_98;
  highp vec2 P_99;
  P_99 = (tmpvar_94.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_100;
  tmpvar_100 = texture2D (_ShadowMapTexture, P_99).x;
  shadowVals_93.z = tmpvar_100;
  highp vec2 P_101;
  P_101 = (tmpvar_94.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_102;
  tmpvar_102 = texture2D (_ShadowMapTexture, P_101).x;
  shadowVals_93.w = tmpvar_102;
  bvec4 tmpvar_103;
  tmpvar_103 = lessThan (shadowVals_93, tmpvar_94.zzzz);
  highp vec4 tmpvar_104;
  tmpvar_104 = _LightShadowData.xxxx;
  highp float tmpvar_105;
  if (tmpvar_103.x) {
    tmpvar_105 = tmpvar_104.x;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_103.y) {
    tmpvar_106 = tmpvar_104.y;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_103.z) {
    tmpvar_107 = tmpvar_104.z;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_103.w) {
    tmpvar_108 = tmpvar_104.w;
  } else {
    tmpvar_108 = 1.0;
  };
  highp vec4 tmpvar_109;
  tmpvar_109.x = tmpvar_105;
  tmpvar_109.y = tmpvar_106;
  tmpvar_109.z = tmpvar_107;
  tmpvar_109.w = tmpvar_108;
  shadows_92 = tmpvar_109;
  mediump float tmpvar_110;
  tmpvar_110 = dot (shadows_92, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_91 = tmpvar_110;
  highp float tmpvar_111;
  tmpvar_111 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_87.w) * tmpvar_90.w) * tmpvar_91);
  atten_4 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_113;
  tmpvar_113 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_112)), 0.0, 1.0);
  light_3 = tmpvar_113;
  mediump vec3 tmpvar_114;
  tmpvar_114 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_114;
  mediump vec3 tmpvar_115;
  mediump vec3 i_116;
  i_116 = -(lightDirection_6);
  tmpvar_115 = (i_116 - (2.0 * (dot (normalDir_5, i_116) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_115, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_112 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 466
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 457
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 461
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 466
#line 466
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 470
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 474
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 477
lowp vec4 frag( in v2f IN ) {
    #line 479
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 483
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 487
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 491
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 495
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 503
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 507
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 511
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 515
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 519
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 523
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 527
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1.xyz = tmpvar_19.xyz;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3.w = tmpvar_21.w;
  vec4 shadows_22;
  vec3 tmpvar_23;
  tmpvar_23 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_22.x = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[0].xyz)).x;
  shadows_22.y = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[1].xyz)).x;
  shadows_22.z = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[2].xyz)).x;
  shadows_22.w = shadow2D (_ShadowMapTexture, (tmpvar_23 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_24;
  tmpvar_24 = (_LightShadowData.xxxx + (shadows_22 * (1.0 - _LightShadowData.xxxx)));
  shadows_22 = tmpvar_24;
  float tmpvar_25;
  tmpvar_25 = clamp ((((_LightColor0.w * ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99)) * 4.0) * (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_24, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_25)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_25 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c17, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r1.x, v2, v2
rsq r1.x, r1.x
mul r2.xyz, r1.x, v2
dp4 r0.w, v0, c11
dp4 r0.z, v0, c10
dp4 r0.x, v0, c8
dp4 r0.y, v0, c9
mov r1.xyz, r2
mov r1.w, c17.x
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
add r0.xyz, -r0, c16
dp3 r0.w, r0, r0
rsq r0.w, r0.w
mul o8.xyz, r0.w, r0
dp4 o6.z, r1, c10
dp4 o6.y, r1, c9
dp4 o6.x, r1, c8
dp4 r1.x, v0, v0
rsq r0.x, r1.x
mul r0.xyz, r0.x, v0
mov o2, v1
rcp o1.x, r0.w
mov o3.xyz, r2
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_78.xyz;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27.w = tmpvar_82.w;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_93;
  coord_93 = (tmpvar_92 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_94;
  tmpvar_94 = shadow2DEXT (_ShadowMapTexture, coord_93);
  shadows_91.x = tmpvar_94;
  highp vec3 coord_95;
  coord_95 = (tmpvar_92 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_96;
  tmpvar_96 = shadow2DEXT (_ShadowMapTexture, coord_95);
  shadows_91.y = tmpvar_96;
  highp vec3 coord_97;
  coord_97 = (tmpvar_92 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_98;
  tmpvar_98 = shadow2DEXT (_ShadowMapTexture, coord_97);
  shadows_91.z = tmpvar_98;
  highp vec3 coord_99;
  coord_99 = (tmpvar_92 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_100;
  tmpvar_100 = shadow2DEXT (_ShadowMapTexture, coord_99);
  shadows_91.w = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (_LightShadowData.xxxx + (shadows_91 * (1.0 - _LightShadowData.xxxx)));
  shadows_91 = tmpvar_101;
  mediump float tmpvar_102;
  tmpvar_102 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_102;
  highp float tmpvar_103;
  tmpvar_103 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_103;
  mediump float tmpvar_104;
  tmpvar_104 = clamp ((((_LightColor0.w * ((tmpvar_85 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_105;
  tmpvar_105 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_104)), 0.0, 1.0);
  light_3 = tmpvar_105;
  mediump vec3 tmpvar_106;
  tmpvar_106 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_106;
  mediump vec3 tmpvar_107;
  mediump vec3 i_108;
  i_108 = -(lightDirection_6);
  tmpvar_107 = (i_108 - (2.0 * (dot (normalDir_5, i_108) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_107, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_104 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 466
#line 449
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 453
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 457
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 461
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 436
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 449
#line 466
#line 466
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 470
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 474
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 477
lowp vec4 frag( in v2f IN ) {
    #line 479
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 483
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 487
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 491
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 495
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 499
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 503
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 507
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 511
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 515
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 519
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 523
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 527
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_24;
  shadowVals_24.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_25;
  tmpvar_25 = lessThan (shadowVals_24, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_26;
  tmpvar_26 = _LightShadowData.xxxx;
  float tmpvar_27;
  if (tmpvar_25.x) {
    tmpvar_27 = tmpvar_26.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_25.y) {
    tmpvar_28 = tmpvar_26.y;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_25.z) {
    tmpvar_29 = tmpvar_26.z;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_25.w) {
    tmpvar_30 = tmpvar_26.w;
  } else {
    tmpvar_30 = 1.0;
  };
  vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_27;
  tmpvar_31.y = tmpvar_28;
  tmpvar_31.z = tmpvar_29;
  tmpvar_31.w = tmpvar_30;
  float tmpvar_32;
  tmpvar_32 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * (tmpvar_23.w * dot (tmpvar_31, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_32)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_32 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (tmpvar_88.w * tmpvar_89);
  atten_4 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_3 = tmpvar_115;
  mediump vec3 tmpvar_116;
  tmpvar_116 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_116;
  mediump vec3 tmpvar_117;
  mediump vec3 i_118;
  i_118 = -(lightDirection_6);
  tmpvar_117 = (i_118 - (2.0 * (dot (normalDir_5, i_118) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_117, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_114 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTexture0, vec2(tmpvar_87));
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = (tmpvar_88.w * tmpvar_89);
  atten_4 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_3 = tmpvar_115;
  mediump vec3 tmpvar_116;
  tmpvar_116 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_116;
  mediump vec3 tmpvar_117;
  mediump vec3 i_118;
  i_118 = -(lightDirection_6);
  tmpvar_117 = (i_118 - (2.0 * (dot (normalDir_5, i_118) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_117, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_114 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 462
#line 445
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 449
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 453
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 457
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 445
#line 462
#line 462
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 466
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 470
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 473
lowp vec4 frag( in v2f IN ) {
    #line 475
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 479
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 483
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 487
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 491
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 495
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 499
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 503
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 507
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 511
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 515
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 519
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 523
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD7;
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 p_1;
  p_1 = ((_Object2World * gl_Vertex).xyz - _WorldSpaceCameraPos);
  vec3 tmpvar_2;
  tmpvar_2 = normalize(gl_Normal);
  vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = tmpvar_2;
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_1, p_1));
  xlv_TEXCOORD1 = gl_Color;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_3).xyz;
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec4 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform vec4 _Color;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_17;
  tmpvar_17 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_18;
  tmpvar_18 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_19;
  tmpvar_19 = (tmpvar_17 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  citydarkoverlay_1 = tmpvar_19;
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_17 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_18.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_18.yyyy));
  vec4 tmpvar_21;
  tmpvar_21 = (mix (((texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw) * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_18.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * xlv_TEXCOORD1), tmpvar_20, tmpvar_20.wwww) * _Color);
  color_3 = tmpvar_21;
  float tmpvar_22;
  tmpvar_22 = ((clamp (dot (xlv_TEXCOORD5, normalize(_WorldSpaceLightPos0).xyz), 0.0, 1.0) - 0.01) / 0.99);
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_24;
  tmpvar_24 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_25;
  shadowVals_25.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_25.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_25, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = clamp ((((_LightColor0.w * tmpvar_22) * 4.0) * ((tmpvar_23.w * tmpvar_24.w) * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)))), 0.0, 1.0);
  color_3.xyz = (tmpvar_21.xyz * clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_33)), 0.0, 1.0));
  citydarkoverlay_1.w = (tmpvar_19.w * (1.0 - clamp ((tmpvar_33 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "color" Color
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_texcoord7 o8
def c14, 0.00000000, 0, 0, 0
dcl_position0 v0
dcl_color0 v1
dcl_normal0 v2
dp3 r0.x, v2, v2
rsq r0.x, r0.x
mul r3.xyz, r0.x, v2
dp4 r1.z, v0, c6
dp4 r1.x, v0, c4
dp4 r1.y, v0, c5
dp4 r1.w, v0, c7
mov r0.xyz, r3
mov r0.w, c14.x
add r2.xyz, -r1, c12
dp4 o6.z, r0, c6
dp4 o6.y, r0, c5
dp4 o6.x, r0, c4
dp4 r0.x, v0, v0
rsq r0.x, r0.x
mul r0.xyz, r0.x, v0
dp4 o4.z, r1, c10
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
dp3 r1.w, r2, r2
rsq r1.w, r1.w
mov o2, v1
mul o8.xyz, r1.w, r2
rcp o1.x, r1.w
mov o3.xyz, r3
add o5.xyz, r1, -c13
mov o7.xyz, -r0
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp float tmpvar_93;
  tmpvar_93 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_94;
  vec_94 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_95;
  lowp vec4 tmpvar_96;
  tmpvar_96 = textureCube (_ShadowMapTexture, vec_94);
  packDist_95 = tmpvar_96;
  shadowVals_92.x = dot (packDist_95, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_97;
  vec_97 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_98;
  lowp vec4 tmpvar_99;
  tmpvar_99 = textureCube (_ShadowMapTexture, vec_97);
  packDist_98 = tmpvar_99;
  shadowVals_92.y = dot (packDist_98, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_100;
  vec_100 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = textureCube (_ShadowMapTexture, vec_100);
  packDist_101 = tmpvar_102;
  shadowVals_92.z = dot (packDist_101, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_92.w = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_106;
  tmpvar_106 = lessThan (shadowVals_92, vec4(tmpvar_93));
  highp vec4 tmpvar_107;
  tmpvar_107 = _LightShadowData.xxxx;
  highp float tmpvar_108;
  if (tmpvar_106.x) {
    tmpvar_108 = tmpvar_107.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_106.y) {
    tmpvar_109 = tmpvar_107.y;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_106.z) {
    tmpvar_110 = tmpvar_107.z;
  } else {
    tmpvar_110 = 1.0;
  };
  highp float tmpvar_111;
  if (tmpvar_106.w) {
    tmpvar_111 = tmpvar_107.w;
  } else {
    tmpvar_111 = 1.0;
  };
  highp vec4 tmpvar_112;
  tmpvar_112.x = tmpvar_108;
  tmpvar_112.y = tmpvar_109;
  tmpvar_112.z = tmpvar_110;
  tmpvar_112.w = tmpvar_111;
  shadows_91 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_113;
  highp float tmpvar_114;
  tmpvar_114 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_116;
  tmpvar_116 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_115)), 0.0, 1.0);
  light_3 = tmpvar_116;
  mediump vec3 tmpvar_117;
  tmpvar_117 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_117;
  mediump vec3 tmpvar_118;
  mediump vec3 i_119;
  i_119 = -(lightDirection_6);
  tmpvar_118 = (i_119 - (2.0 * (dot (normalDir_5, i_119) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_118, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_115 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesColor;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 p_3;
  p_3 = ((_Object2World * _glesVertex).xyz - _WorldSpaceCameraPos);
  highp vec3 tmpvar_4;
  tmpvar_4 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_4;
  mediump vec4 tmpvar_5;
  tmpvar_5.w = 0.0;
  tmpvar_5.xyz = nrm_1;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = _glesColor;
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
  xlv_TEXCOORD7 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD7;
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9));
  highp vec4 tmpvar_75;
  tmpvar_75 = ((main_25 * tmpvar_74) * xlv_TEXCOORD1);
  color_27 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_82;
  tmpvar_82 = (mix (color_27, tmpvar_81, tmpvar_81.wwww) * _Color);
  color_27 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_83;
  highp vec3 tmpvar_84;
  tmpvar_84 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_84;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_85;
  tmpvar_85 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_86;
  tmpvar_86 = ((tmpvar_85 - 0.01) / 0.99);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp vec4 tmpvar_89;
  tmpvar_89 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp float tmpvar_93;
  tmpvar_93 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_94;
  vec_94 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_95;
  lowp vec4 tmpvar_96;
  tmpvar_96 = textureCube (_ShadowMapTexture, vec_94);
  packDist_95 = tmpvar_96;
  shadowVals_92.x = dot (packDist_95, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_97;
  vec_97 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_98;
  lowp vec4 tmpvar_99;
  tmpvar_99 = textureCube (_ShadowMapTexture, vec_97);
  packDist_98 = tmpvar_99;
  shadowVals_92.y = dot (packDist_98, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_100;
  vec_100 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_101;
  lowp vec4 tmpvar_102;
  tmpvar_102 = textureCube (_ShadowMapTexture, vec_100);
  packDist_101 = tmpvar_102;
  shadowVals_92.z = dot (packDist_101, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_103;
  vec_103 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_104;
  lowp vec4 tmpvar_105;
  tmpvar_105 = textureCube (_ShadowMapTexture, vec_103);
  packDist_104 = tmpvar_105;
  shadowVals_92.w = dot (packDist_104, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_106;
  tmpvar_106 = lessThan (shadowVals_92, vec4(tmpvar_93));
  highp vec4 tmpvar_107;
  tmpvar_107 = _LightShadowData.xxxx;
  highp float tmpvar_108;
  if (tmpvar_106.x) {
    tmpvar_108 = tmpvar_107.x;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_106.y) {
    tmpvar_109 = tmpvar_107.y;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_106.z) {
    tmpvar_110 = tmpvar_107.z;
  } else {
    tmpvar_110 = 1.0;
  };
  highp float tmpvar_111;
  if (tmpvar_106.w) {
    tmpvar_111 = tmpvar_107.w;
  } else {
    tmpvar_111 = 1.0;
  };
  highp vec4 tmpvar_112;
  tmpvar_112.x = tmpvar_108;
  tmpvar_112.y = tmpvar_109;
  tmpvar_112.z = tmpvar_110;
  tmpvar_112.w = tmpvar_111;
  shadows_91 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_113;
  highp float tmpvar_114;
  tmpvar_114 = ((tmpvar_88.w * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_114;
  mediump float tmpvar_115;
  tmpvar_115 = clamp ((((_LightColor0.w * tmpvar_86) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_116;
  tmpvar_116 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_115)), 0.0, 1.0);
  light_3 = tmpvar_116;
  mediump vec3 tmpvar_117;
  tmpvar_117 = vec3(clamp (floor((1.0 + tmpvar_85)), 0.0, 1.0));
  specularReflection_2 = tmpvar_117;
  mediump vec3 tmpvar_118;
  mediump vec3 i_119;
  i_119 = -(lightDirection_6);
  tmpvar_118 = (i_119 - (2.0 * (dot (normalDir_5, i_119) * normalDir_5)));
  specularReflection_2 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_118, xlv_TEXCOORD7), 0.0, 1.0), _Shininess)));
  color_27.xyz = (tmpvar_82.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_78.w * (1.0 - clamp ((tmpvar_115 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Color _glesColor
in vec4 _glesColor;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 463
#line 446
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 450
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    o.worldNormal = (_Object2World * vec4( nrm, 0.0)).xyz;
    #line 454
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.color = v.color;
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 458
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
out highp vec3 xlv_TEXCOORD7;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.color = vec4(gl_Color);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec4(xl_retval.color);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
    xlv_TEXCOORD7 = vec3(xl_retval.viewDir);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 433
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec4 color;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
    highp vec3 viewDir;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    lowp vec4 color;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 446
#line 463
#line 463
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 467
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 471
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 474
lowp vec4 frag( in v2f IN ) {
    #line 476
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 480
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 484
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 488
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 492
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 496
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 500
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 504
    color = ((main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel))) * IN.color);
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 508
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 512
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 516
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 520
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    color.xyz *= light;
    #line 524
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
in highp vec3 xlv_TEXCOORD7;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.color = vec4(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD7);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 60
//   d3d9 - ALU: 102 to 142, TEX: 9 to 24
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 104 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v5.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dp4 r0.w, c1, c1
dsx r2.y, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, c1
dp3_pp_sat r0.y, v4, r0
mul r1.xyz, r1, v1
dp3 r0.x, v3, v3
add_pp r0.y, r0, c13.x
texld r0.x, r0.x, s3
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mov r0.xyz, v4
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v4, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v4.zyzw, c5.x
mul r1.xy, v4.zyzw, c4.x
abs r0.w, v4.z
abs r2.xy, v4
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v4, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v4.zxzw, c5.x
mul r3.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v4.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v4.z, r1.w, r2
cmp r0.x, v4, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v4.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v4.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v4.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v4.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v1
dp3_pp_sat r0.w, v3, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 109 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v5.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
dsx r2.y, r1.x
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dp4 r0.w, c1, c1
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, c1
dp3_pp_sat r0.x, v4, r0
add_pp r0.y, r0.x, c13.x
dp3 r0.x, v3, v3
mul r2.xyz, r1, v1
rcp r0.z, v3.w
mad r1.xy, v3, r0.z, c12.y
texld r0.w, r1, s3
cmp r0.z, -v3, c8.x, c8.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.z, r0, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r2, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 105 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v5.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
dsx r2.y, r1.x
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4 r2.z, c1, c1
rsq r0.w, r2.z
mul r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v4, r2
add_pp r0.y, r0.w, c13.x
dp3 r0.x, v3, v3
texld r0.w, v3, s4
texld r0.x, r0.x, s3
mul r0.z, r0.x, r0.w
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 103 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v5.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
dsx r2.y, r1.x
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v4, r2
add_pp r0.x, r0.w, c13
texld r0.w, v3, s3
mul_pp r0.x, r0, c2.w
mul_pp r0.y, r0.x, r0.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 114 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c6.x
mul r0.xy, v6, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c7
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v6.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v6
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4 r2.z, c1, c1
rsq r0.w, r2.z
mul r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v5, r2
add_pp r0.y, r0.w, c14.x
texldp r0.x, v4, s5
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
cmp r1.w, r0.z, c9.y, r0
rcp r0.x, v3.w
mad r2.xy, v3, r0.x, c13.y
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r0.z, -v3, c9.x, c9.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c14.y
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 113 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c6.x
mul r0.xy, v6, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c7
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v6.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v6
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4 r2.z, c1, c1
rsq r0.w, r2.z
mul r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v5, r2
rcp r0.z, v3.w
mad r2.xy, v3, r0.z, c13.y
add_pp r0.y, r0.w, c14.x
mov r0.x, c2
add r0.w, c9.y, -r0.x
texldp r0.x, v4, s5
mad r1.w, r0.x, r0, c2.x
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r0.z, -v3, c9.x, c9.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c14.y
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 103 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v5.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
dsx r2.y, r1.x
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v4, r2
add_pp r0.y, r0.w, c13.x
texldp r0.x, v3, s3
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 104 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v6.zyzw, c5.x
mul r1.xy, v6.zyzw, c4.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c5.x
mul r0.xy, v6, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c5.x
mul r0.xy, v6.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v6.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
dsx r2.y, r1.x
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v6
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v5, r2
add_pp r0.y, r0.w, c13.x
texldp r0.x, v4, s3
texld r0.w, v3, s4
mul r0.z, r0.w, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 113 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 0.97000003, 4.03944778, 0
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c14, c14.y
abs r1.w, v6.y
add r1.z, -r0.w, c10.y
mad r1.y, r0.w, c10.z, c10.w
mad r1.y, r0.w, r1, c11.x
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c11.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c10.x, c10.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c11, r1.y
mad r1.z, r0.w, c11.w, r1
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c11.z, r2.x
mad r0.w, r1, c11, r1.y
mul r1.z, r1, c12.x
dsx r1.w, r1.z
mul r1.y, r0.w, c12.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
rcp r0.w, r0.w
mul r1.z, r0.w, c14.x
mul r2.x, r2, c14
texldd r1.xyz, r1, s0, r1.zwzw, r2
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
texld r0, v4, s3
dp4 r0.z, r0, c16
dp3 r1.w, v4, v4
rsq r1.w, r1.w
rcp r0.y, r1.w
mul r0.y, r0, c2.w
dp4 r0.x, c1, c1
mad r0.w, -r0.y, c15.y, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_pp_sat r0.y, v5, r0
mov r1.w, c3.x
dp3 r0.x, v3, v3
cmp r0.w, r0, c10.y, r1
texld r0.x, r0.x, s4
mul r0.z, r0.x, r0.w
add_pp r0.y, r0, c15.x
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.z
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 114 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 0.97000003, 4.03944778, 0
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c14, c14.y
abs r1.w, v6.y
add r1.z, -r0.w, c10.y
mad r1.y, r0.w, c10.z, c10.w
mad r1.y, r0.w, r1, c11.x
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c11.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c10.x, c10.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c11, r1.y
mad r1.z, r0.w, c11.w, r1
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c11.z, r2.x
mad r0.w, r1, c11, r1.y
mul r1.z, r1, c12.x
dsx r1.w, r1.z
mul r1.y, r0.w, c12.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
rcp r0.w, r0.w
mul r1.z, r0.w, c14.x
mul r2.x, r2, c14
texldd r1.xyz, r1, s0, r1.zwzw, r2
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
texld r0, v4, s3
dp4 r0.z, r0, c16
dp3 r1.w, v4, v4
rsq r0.y, r1.w
dp4 r0.x, c1, c1
rcp r0.y, r0.y
mul r0.y, r0, c2.w
mad r0.w, -r0.y, c15.y, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_pp_sat r0.x, v5, r0
add_pp r0.y, r0.x, c15.x
mov r1.w, c3.x
cmp r0.z, r0.w, c10.y, r1.w
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.z
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c17.z
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c15.y, c15.z
mad r3.w, r3, r2, c15
mad r3.w, r3, r2, c16.x
mad r3.w, r3, r2, c16.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c17.w, c17.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c10.x
mul r0.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c16.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c16.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c14.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c11
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c13.y
mul_sat r2.x, r2, c14.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c17, c17.y
abs r1.w, v6.y
add r1.z, -r0.w, c13.y
mad r1.y, r0.w, c13.z, c13.w
mad r1.y, r0.w, r1, c14.x
add r2.y, -r1.w, c13
mad r2.x, r1.w, c13.z, c13.w
mad r2.x, r2, r1.w, c14
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c14.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c13.x, c13.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c14, r1.y
mad r1.z, r0.w, c14.w, r1
mad r1.w, r2.x, r1, c14.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c13.x, c13.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c14.z, r2.x
mad r0.w, r1, c14, r1.y
mul r1.z, r1, c15.x
dsx r1.w, r1.z
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
mul r1.y, r0.w, c15.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r1.z, r0.w, c17.x
mul r2.x, r2, c17
texldd r1.xyz, r1, s0, r1.zwzw, r2
mul_pp r1.xyz, r1, r0
rcp r0.z, v4.w
mul r2.xyz, r1, v1
mad r0.xy, v4, r0.z, c6
mad r1.xy, v4, r0.z, c5
texld r0.x, r0, s5
texld r1.x, r1, s5
mov r1.z, r1.x
mad r1.xy, v4, r0.z, c3
mov r1.w, r0.x
mad r0.xy, v4, r0.z, c4
texld r1.x, r1, s5
texld r0.x, r0, s5
mov r1.y, r0.x
mad r0, -v4.z, r0.z, r1
mov r1.y, c2.x
cmp r0, r0, c13.y, r1.y
dp4_pp r0.y, r0, c18.y
dp4 r1.x, c1, c1
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_pp_sat r0.x, v5, r1
add_pp r0.z, r0.x, c18.x
rcp r0.w, v3.w
mad r1.xy, v3, r0.w, c17.y
texld r0.w, r1, s3
cmp r1.x, -v3.z, c13, c13.y
mul_pp r0.w, r1.x, r0
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r0.z, c7.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.w, r0.y, c18.z
mov r0.x, c12
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r2, c8
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c17.z
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c15.y, c15.z
mad r3.w, r3, r2, c15
mad r3.w, r3, r2, c16.x
mad r3.w, r3, r2, c16.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c17.w, c17.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c10.x
mul r0.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c16.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c16.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c14.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c11
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c13.y
mul_sat r2.x, r2, c14.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c17, c17.y
abs r1.w, v6.y
add r1.z, -r0.w, c13.y
mad r1.y, r0.w, c13.z, c13.w
mad r1.y, r0.w, r1, c14.x
add r2.y, -r1.w, c13
mad r2.x, r1.w, c13.z, c13.w
mad r2.x, r2, r1.w, c14
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c14.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c13.x, c13.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c14, r1.y
mad r1.z, r0.w, c14.w, r1
mad r1.w, r2.x, r1, c14.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c13.x, c13.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c14.z, r2.x
mad r0.w, r1, c14, r1.y
mul r1.z, r1, c15.x
dsx r1.w, r1.z
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
mul r1.y, r0.w, c15.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r1.z, r0.w, c17.x
mul r2.x, r2, c17
texldd r1.xyz, r1, s0, r1.zwzw, r2
rcp r1.w, v4.w
mul_pp r1.xyz, r1, r0
mad r0.xyz, v4, r1.w, c6
texld r0.x, r0, s5
mul r1.xyz, r1, v1
mad r2.xyz, v4, r1.w, c5
mov_pp r0.w, r0.x
texld r0.x, r2, s5
mad r2.xyz, v4, r1.w, c4
mov_pp r0.z, r0.x
texld r0.x, r2, s5
mad r2.xyz, v4, r1.w, c3
mov_pp r0.y, r0.x
texld r0.x, r2, s5
mov r2.x, c2
add r2.x, c13.y, -r2
mad r0, r0, r2.x, c2.x
dp4_pp r0.y, r0, c18.y
dp4 r1.w, c1, c1
rsq r1.w, r1.w
mul r2.xyz, r1.w, c1
dp3_pp_sat r0.x, v5, r2
add_pp r0.z, r0.x, c18.x
rcp r0.w, v3.w
mad r2.xy, v3, r0.w, c17.y
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r1.w, -v3.z, c13.x, c13.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r0.z, c7.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.w, r0.y, c18.z
mov r0.x, c12
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c8
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 121 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
mul r3.xy, r3, r3
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r0.x, r1.w, c14, c14.y
abs r1.w, v6.y
add r0.z, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.z, r0.z
rsq r2.y, r2.y
mad r0.y, r0.w, r0, c11
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.z, -r2.y, c11, r2.x
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
rcp r1.w, r1.w
dsx r0.w, r0.z
dsy r2.y, r0.z
mul r2.zw, r2, r2
add r0.z, r2, r2.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r2.x, r1.w, c14
mul r0.y, r0, c12.x
mul r0.z, r0, c14.x
texldd r0.xyz, r0, s0, r0.zwzw, r2
mul_pp r1.xyz, r0, r1
add r2.xyz, v4, c15.yzzw
texld r0, r2, s3
dp4 r3.w, r0, c16
mul r2.xyz, r1, v1
add r0.xyz, v4, c15.zyzw
texld r0, r0, s3
dp4 r3.z, r0, c16
add r1.xyz, v4, c15.zzyw
texld r1, r1, s3
dp4 r3.y, r1, c16
dp3 r0.w, v4, v4
rsq r1.x, r0.w
add r0.xyz, v4, c15.y
texld r0, r0, s3
rcp r1.x, r1.x
dp4 r3.x, r0, c16
mul r0.x, r1, c2.w
dp4 r1.x, c1, c1
mov r1.y, c3.x
mad r0, -r0.x, c15.w, r3
cmp r0, r0, c10.y, r1.y
dp4_pp r0.z, r0, c17.x
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_pp_sat r0.y, v5, r1
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul r0.z, r0.x, r0
add_pp r0.y, r0, c15.x
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c17.y
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r2, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
mul r3.xy, r3, r3
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r0.x, r1.w, c14, c14.y
abs r1.w, v6.y
add r0.z, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.z, r0.z
rsq r2.y, r2.y
mad r0.y, r0.w, r0, c11
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.z, -r2.y, c11, r2.x
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
rcp r1.w, r1.w
dsx r0.w, r0.z
dsy r2.y, r0.z
mul r2.zw, r2, r2
add r0.z, r2, r2.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r2.x, r1.w, c14
mul r0.y, r0, c12.x
mul r0.z, r0, c14.x
texldd r0.xyz, r0, s0, r0.zwzw, r2
mul_pp r1.xyz, r0, r1
add r2.xyz, v4, c15.yzzw
texld r0, r2, s3
dp4 r3.w, r0, c16
mul r2.xyz, r1, v1
add r0.xyz, v4, c15.zyzw
texld r0, r0, s3
dp4 r3.z, r0, c16
add r1.xyz, v4, c15.zzyw
texld r1, r1, s3
dp4 r3.y, r1, c16
add r0.xyz, v4, c15.y
texld r0, r0, s3
dp3 r1.x, v4, v4
rsq r1.x, r1.x
dp4 r3.x, r0, c16
rcp r0.x, r1.x
dp4 r1.x, c1, c1
mul r0.x, r0, c2.w
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_pp_sat r1.x, v5, r1
mad r0, -r0.x, c15.w, r3
mov r1.w, c3.x
cmp r0, r0, c10.y, r1.w
dp4_pp r0.z, r0, c17.x
add_pp r0.y, r1.x, c15.x
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c17.y
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r2, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 104 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v5.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dp4 r0.w, c1, c1
dsx r2.y, r1.x
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, c1
dp3_pp_sat r0.y, v4, r0
mul r1.xyz, r1, v1
dp3 r0.x, v3, v3
add_pp r0.y, r0, c13.x
texld r0.x, r0.x, s3
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 102 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mov r0.xyz, v4
dp3_sat r0.x, v2, -r0
add r0.w, r0.x, c12.z
mad_sat r3.w, r0, c12, c12.y
mul r2.xy, v4, c4.x
texld r3.xyz, r2, s2
mul r0.xy, v4.zyzw, c5.x
mul r1.xy, v4.zyzw, c4.x
abs r0.w, v4.z
abs r2.xy, v4
max r1.w, r2.x, r0
rcp r2.z, r1.w
min r1.w, r2.x, r0
mul r1.w, r1, r2.z
mul r2.z, r1.w, r1.w
mad r2.w, r2.z, c10.y, c10.z
mad r2.w, r2, r2.z, c10
mad r2.w, r2, r2.z, c11.x
mad r2.w, r2, r2.z, c11.y
mad r2.z, r2.w, r2, c11
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad r0.xyz, r3.w, r1, r0
mul r1.xy, v4, c5.x
texld r1.xyz, r1, s1
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r0.xyz, r0, -r1
mad_pp r0.xyz, r2.x, r0, r1
mul r1.xy, v4.zxzw, c5.x
mul r3.xy, v4.zxzw, c4.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r1.xyz, r3.w, r3, r1
add_pp r1.xyz, r1, -r0
mad_pp r0.xyz, r2.y, r1, r0
mul r2.y, r2.z, r1.w
dsy r3.zw, v4.xyxy
add_pp r1.xyz, -r0, c8.y
add r2.z, -r2.y, c11.w
add r1.w, r2.x, -r0
cmp r1.w, -r1, r2.y, r2.z
mul r2.y, v0.x, c6.x
mul_sat r2.y, r2, c9.z
mad_pp r1.xyz, r2.y, r1, r0
add r2.x, -r1.w, c9.w
cmp r0.x, v4.z, r1.w, r2
cmp r0.x, v4, r0, -r0
mad r3.x, r0, c12, c12.y
mad r0.x, r0.w, c8.z, c8.w
mad r0.x, r0.w, r0, c9
dp4_pp r0.y, c1, c1
rsq_pp r0.y, r0.y
mul_pp r2.xyz, r0.y, c1
add r0.y, -r0.w, c8
mad r0.x, r0.w, r0, c9.y
abs r0.w, v4.y
add r2.w, -r0, c8.y
mad r1.w, r0, c8.z, c8
mad r1.w, r1, r0, c9.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v4.z, c8, c8.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c9, r0.y
rsq r2.w, r2.w
mad r0.w, r1, r0, c9.y
rcp r2.w, r2.w
mul r1.w, r0, r2
cmp r0.w, v4.y, c8.x, c8.y
mul r2.w, r0, r1
mad r0.y, -r2.w, c9.z, r1.w
mad r0.z, r0.x, c9.w, r0
mad r0.x, r0.w, c9.w, r0.y
mul r0.y, r0.z, c10.x
dsx r0.w, r0.y
mul r3.y, r0.x, c10.x
dsx r0.xz, v4.xyyw
mul r0.xz, r0, r0
add r0.x, r0, r0.z
mul r3.zw, r3, r3
add r0.z, r3, r3.w
rsq r0.z, r0.z
rsq r0.x, r0.x
rcp r0.x, r0.x
rcp r1.w, r0.z
mul r0.z, r0.x, c12.x
dsy r0.y, r0
mul r0.x, r1.w, c12
texldd r0.xyz, r3, s0, r0.zwzw, r0
mul_pp r0.xyz, r0, r1
mul r1.xyz, r0, v1
dp3_pp_sat r0.w, v3, r2
add_pp r0.w, r0, c13.x
mul_pp r0.y, r0.w, c2.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 109 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
dsy r3.xy, v5
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v5.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
dsx r2.y, r1.x
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dp4 r0.w, c1, c1
dsy r1.y, r1.x
mul r3.xy, r3, r3
add r1.x, r3, r3.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r1, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r1.xyz, r1, r0
rsq r0.w, r0.w
mul r0.xyz, r0.w, c1
dp3_pp_sat r0.x, v4, r0
add_pp r0.y, r0.x, c13.x
dp3 r0.x, v3, v3
mul r2.xyz, r1, v1
rcp r0.z, v3.w
mad r1.xy, v3, r0.z, c12.y
texld r0.w, r1, s3
cmp r0.z, -v3, c8.x, c8.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.z, r0, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r2, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 105 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v5.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
dsx r2.y, r1.x
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4 r2.z, c1, c1
rsq r0.w, r2.z
mul r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v4, r2
add_pp r0.y, r0.w, c13.x
dp3 r0.x, v3, v3
texld r0.w, v3, s4
texld r0.x, r0.x, s3
mul r0.z, r0.x, r0.w
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 103 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v5.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
dsx r2.y, r1.x
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v4, r2
add_pp r0.x, r0.w, c13
texld r0.w, v3, s3
mul_pp r0.x, r0, c2.w
mul_pp r0.y, r0.x, r0.w
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 114 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c6.x
mul r0.xy, v6, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c7
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v6.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v6
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4 r2.z, c1, c1
rsq r0.w, r2.z
mul r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v5, r2
add_pp r0.y, r0.w, c14.x
texldp r0.x, v4, s5
rcp r0.z, v4.w
mad r0.z, -v4, r0, r0.x
mov r0.w, c2.x
cmp r1.w, r0.z, c9.y, r0
rcp r0.x, v3.w
mad r2.xy, v3, r0.x, c13.y
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r0.z, -v3, c9.x, c9.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c14.y
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 113 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c14, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c13.z
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c11.y, c11.z
mad r3.w, r3, r2, c11
mad r3.w, r3, r2, c12.x
mad r3.w, r3, r2, c12.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c13.w, c13.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c6.x
mul r0.xy, v6, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c6.x
mul r0.xy, v6.zxzw, c5.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c12.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c12.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c10.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c7
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c9.y
mul_sat r2.x, r2, c10.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c13.x, c13.y
abs r1.w, v6.y
add r1.y, -r0.w, c9
mad r1.x, r0.w, c9.z, c9.w
mad r1.x, r0.w, r1, c10
add r2.y, -r1.w, c9
mad r2.x, r1.w, c9.z, c9.w
mad r2.x, r2, r1.w, c10
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c10.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c9.x, c9.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c10.z, r1.x
mad r1.w, r2.x, r1, c10.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c9.x, c9.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c10.z, r2
mad r1.y, r0.w, c10.w, r1
mad r0.w, r1, c10, r1.x
mul r1.x, r1.y, c11
mul r1.w, r0, c11.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v6
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.y, r1.x
mul r2.x, r0.w, c13
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c13
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4 r2.z, c1, c1
rsq r0.w, r2.z
mul r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v5, r2
rcp r0.z, v3.w
mad r2.xy, v3, r0.z, c13.y
add_pp r0.y, r0.w, c14.x
mov r0.x, c2
add r0.w, c9.y, -r0.x
texldp r0.x, v4, s5
mad r1.w, r0.x, r0, c2.x
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r0.z, -v3, c9.x, c9.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r0.z, r0.x, r1.w
mul_pp r0.x, r0.y, c3.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c14.y
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 103 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r2.xyz, v5
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
abs r3.xy, v5
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v5, c5.x
mul r0.xy, v5, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v5.zxzw, c5.x
mul r0.xy, v5.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v5.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v5.xyxy
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v5.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v5.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v5.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v5.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
dsx r2.y, r1.x
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v5
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v4, r2
add_pp r0.y, r0.w, c13.x
texldp r0.x, v3, s3
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 104 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c8, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c9, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c10, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c11, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c12, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c13, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c12.z
mul r0.xy, v6.zyzw, c5.x
mul r1.xy, v6.zyzw, c4.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c10.y, c10.z
mad r3.w, r3, r2, c10
mad r3.w, r3, r2, c11.x
mad r3.w, r3, r2, c11.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c12.w, c12.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c5.x
mul r0.xy, v6, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c5.x
mul r0.xy, v6.zxzw, c4.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c11.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c11.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c9.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c6
dsx r2.zw, v6.xyxy
add_pp r1.xyz, -r0, c8.y
mul_sat r2.x, r2, c9.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.z, r1.w, c12.x, c12.y
abs r1.w, v6.y
add r1.y, -r0.w, c8
mad r1.x, r0.w, c8.z, c8.w
mad r1.x, r0.w, r1, c9
add r2.y, -r1.w, c8
mad r2.x, r1.w, c8.z, c8.w
mad r2.x, r2, r1.w, c9
rsq r1.y, r1.y
rsq r2.y, r2.y
mad r0.w, r0, r1.x, c9.y
rcp r1.y, r1.y
mul r1.x, r0.w, r1.y
cmp r0.w, v6.z, c8.x, c8.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c9.z, r1.x
mad r1.w, r2.x, r1, c9.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c8.x, c8.y
mul r2.y, r1.w, r2.x
mad r1.x, -r2.y, c9.z, r2
mad r1.y, r0.w, c9.w, r1
mad r0.w, r1, c9, r1.x
mul r1.x, r1.y, c10
dsx r2.y, r1.x
mul r1.w, r0, c10.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
dsy r3.xy, v6
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.x, r0.w, c12
dsy r1.y, r1.x
mul r2.zw, r3.xyxy, r3.xyxy
add r1.x, r2.z, r2.w
rsq r1.x, r1.x
rcp r0.w, r1.x
mul r1.x, r0.w, c12
texldd r1.xyz, r1.zwzw, s0, r2, r1
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
dp4_pp r2.z, c1, c1
rsq_pp r0.w, r2.z
mul_pp r2.xyz, r0.w, c1
dp3_pp_sat r0.w, v5, r2
add_pp r0.y, r0.w, c13.x
texldp r0.x, v4, s3
texld r0.w, v3, s4
mul r0.z, r0.w, r0.x
mul_pp r0.x, r0.y, c2.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c13.y
mov r0.x, c7
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c3
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c8.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 113 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 0.97000003, 4.03944778, 0
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c14, c14.y
abs r1.w, v6.y
add r1.z, -r0.w, c10.y
mad r1.y, r0.w, c10.z, c10.w
mad r1.y, r0.w, r1, c11.x
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c11.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c10.x, c10.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c11, r1.y
mad r1.z, r0.w, c11.w, r1
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c11.z, r2.x
mad r0.w, r1, c11, r1.y
mul r1.z, r1, c12.x
dsx r1.w, r1.z
mul r1.y, r0.w, c12.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
rcp r0.w, r0.w
mul r1.z, r0.w, c14.x
mul r2.x, r2, c14
texldd r1.xyz, r1, s0, r1.zwzw, r2
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
texld r0, v4, s3
dp4 r0.z, r0, c16
dp3 r1.w, v4, v4
rsq r1.w, r1.w
rcp r0.y, r1.w
mul r0.y, r0, c2.w
dp4 r0.x, c1, c1
mad r0.w, -r0.y, c15.y, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_pp_sat r0.y, v5, r0
mov r1.w, c3.x
dp3 r0.x, v3, v3
cmp r0.w, r0, c10.y, r1
texld r0.x, r0.x, s4
mul r0.z, r0.x, r0.w
add_pp r0.y, r0, c15.x
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.z
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 114 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 0.97000003, 4.03944778, 0
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c14, c14.y
abs r1.w, v6.y
add r1.z, -r0.w, c10.y
mad r1.y, r0.w, c10.z, c10.w
mad r1.y, r0.w, r1, c11.x
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c11.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c10.x, c10.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c11, r1.y
mad r1.z, r0.w, c11.w, r1
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c11.z, r2.x
mad r0.w, r1, c11, r1.y
mul r1.z, r1, c12.x
dsx r1.w, r1.z
mul r1.y, r0.w, c12.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
rcp r0.w, r0.w
mul r1.z, r0.w, c14.x
mul r2.x, r2, c14
texldd r1.xyz, r1, s0, r1.zwzw, r2
mul_pp r0.xyz, r1, r0
mul r1.xyz, r0, v1
texld r0, v4, s3
dp4 r0.z, r0, c16
dp3 r1.w, v4, v4
rsq r0.y, r1.w
dp4 r0.x, c1, c1
rcp r0.y, r0.y
mul r0.y, r0, c2.w
mad r0.w, -r0.y, c15.y, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_pp_sat r0.x, v5, r0
add_pp r0.y, r0.x, c15.x
mov r1.w, c3.x
cmp r0.z, r0.w, c10.y, r1.w
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c15.z
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c17.z
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c15.y, c15.z
mad r3.w, r3, r2, c15
mad r3.w, r3, r2, c16.x
mad r3.w, r3, r2, c16.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c17.w, c17.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c10.x
mul r0.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c16.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c16.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c14.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c11
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c13.y
mul_sat r2.x, r2, c14.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c17, c17.y
abs r1.w, v6.y
add r1.z, -r0.w, c13.y
mad r1.y, r0.w, c13.z, c13.w
mad r1.y, r0.w, r1, c14.x
add r2.y, -r1.w, c13
mad r2.x, r1.w, c13.z, c13.w
mad r2.x, r2, r1.w, c14
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c14.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c13.x, c13.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c14, r1.y
mad r1.z, r0.w, c14.w, r1
mad r1.w, r2.x, r1, c14.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c13.x, c13.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c14.z, r2.x
mad r0.w, r1, c14, r1.y
mul r1.z, r1, c15.x
dsx r1.w, r1.z
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
mul r1.y, r0.w, c15.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r1.z, r0.w, c17.x
mul r2.x, r2, c17
texldd r1.xyz, r1, s0, r1.zwzw, r2
mul_pp r1.xyz, r1, r0
rcp r0.z, v4.w
mul r2.xyz, r1, v1
mad r0.xy, v4, r0.z, c6
mad r1.xy, v4, r0.z, c5
texld r0.x, r0, s5
texld r1.x, r1, s5
mov r1.z, r1.x
mad r1.xy, v4, r0.z, c3
mov r1.w, r0.x
mad r0.xy, v4, r0.z, c4
texld r1.x, r1, s5
texld r0.x, r0, s5
mov r1.y, r0.x
mad r0, -v4.z, r0.z, r1
mov r1.y, c2.x
cmp r0, r0, c13.y, r1.y
dp4_pp r0.y, r0, c18.y
dp4 r1.x, c1, c1
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_pp_sat r0.x, v5, r1
add_pp r0.z, r0.x, c18.x
rcp r0.w, v3.w
mad r1.xy, v3, r0.w, c17.y
texld r0.w, r1, s3
cmp r1.x, -v3.z, c13, c13.y
mul_pp r0.w, r1.x, r0
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r0.z, c7.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.w, r0.y, c18.z
mov r0.x, c12
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r2, c8
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c18, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c17.z
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c15.y, c15.z
mad r3.w, r3, r2, c15
mad r3.w, r3, r2, c16.x
mad r3.w, r3, r2, c16.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c17.w, c17.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c10.x
mul r0.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c10.x
mul r0.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c16.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c16.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c14.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c11
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
add_pp r1.xyz, -r0, c13.y
mul_sat r2.x, r2, c14.z
mad_pp r0.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c17, c17.y
abs r1.w, v6.y
add r1.z, -r0.w, c13.y
mad r1.y, r0.w, c13.z, c13.w
mad r1.y, r0.w, r1, c14.x
add r2.y, -r1.w, c13
mad r2.x, r1.w, c13.z, c13.w
mad r2.x, r2, r1.w, c14
rsq r1.z, r1.z
rsq r2.y, r2.y
mad r0.w, r0, r1.y, c14.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c13.x, c13.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c14, r1.y
mad r1.z, r0.w, c14.w, r1
mad r1.w, r2.x, r1, c14.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c13.x, c13.y
mul r2.y, r1.w, r2.x
mad r1.y, -r2, c14.z, r2.x
mad r0.w, r1, c14, r1.y
mul r1.z, r1, c15.x
dsx r1.w, r1.z
dsy r2.y, r1.z
mul r3.xy, r3, r3
add r1.z, r3.x, r3.y
rsq r1.z, r1.z
rcp r2.x, r1.z
mul r1.y, r0.w, c15.x
mul r2.zw, r2, r2
add r0.w, r2.z, r2
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r1.z, r0.w, c17.x
mul r2.x, r2, c17
texldd r1.xyz, r1, s0, r1.zwzw, r2
rcp r1.w, v4.w
mul_pp r1.xyz, r1, r0
mad r0.xyz, v4, r1.w, c6
texld r0.x, r0, s5
mul r1.xyz, r1, v1
mad r2.xyz, v4, r1.w, c5
mov_pp r0.w, r0.x
texld r0.x, r2, s5
mad r2.xyz, v4, r1.w, c4
mov_pp r0.z, r0.x
texld r0.x, r2, s5
mad r2.xyz, v4, r1.w, c3
mov_pp r0.y, r0.x
texld r0.x, r2, s5
mov r2.x, c2
add r2.x, c13.y, -r2
mad r0, r0, r2.x, c2.x
dp4_pp r0.y, r0, c18.y
dp4 r1.w, c1, c1
rsq r1.w, r1.w
mul r2.xyz, r1.w, c1
dp3_pp_sat r0.x, v5, r2
add_pp r0.z, r0.x, c18.x
rcp r0.w, v3.w
mad r2.xy, v3, r0.w, c17.y
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r1.w, -v3.z, c13.x, c13.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.y, r0.x, r0
mul_pp r0.x, r0.z, c7.w
mul_pp r0.y, r0.x, r0
mul_pp_sat r0.w, r0.y, c18.z
mov r0.x, c12
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r1, c8
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 121 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
mul r3.xy, r3, r3
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r0.x, r1.w, c14, c14.y
abs r1.w, v6.y
add r0.z, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.z, r0.z
rsq r2.y, r2.y
mad r0.y, r0.w, r0, c11
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.z, -r2.y, c11, r2.x
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
rcp r1.w, r1.w
dsx r0.w, r0.z
dsy r2.y, r0.z
mul r2.zw, r2, r2
add r0.z, r2, r2.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r2.x, r1.w, c14
mul r0.y, r0, c12.x
mul r0.z, r0, c14.x
texldd r0.xyz, r0, s0, r0.zwzw, r2
mul_pp r1.xyz, r0, r1
add r2.xyz, v4, c15.yzzw
texld r0, r2, s3
dp4 r3.w, r0, c16
mul r2.xyz, r1, v1
add r0.xyz, v4, c15.zyzw
texld r0, r0, s3
dp4 r3.z, r0, c16
add r1.xyz, v4, c15.zzyw
texld r1, r1, s3
dp4 r3.y, r1, c16
dp3 r0.w, v4, v4
rsq r1.x, r0.w
add r0.xyz, v4, c15.y
texld r0, r0, s3
rcp r1.x, r1.x
dp4 r3.x, r0, c16
mul r0.x, r1, c2.w
dp4 r1.x, c1, c1
mov r1.y, c3.x
mad r0, -r0.x, c15.w, r3
cmp r0, r0, c10.y, r1.y
dp4_pp r0.z, r0, c17.x
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_pp_sat r0.y, v5, r1
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul r0.z, r0.x, r0
add_pp r0.y, r0, c15.x
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c17.y
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r2, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 122 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c14.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c12.y, c12.z
mad r3.w, r3, r2, c12
mad r3.w, r3, r2, c13.x
mad r3.w, r3, r2, c13.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c14.w, c14.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c13.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c13.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c11.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c8
dsx r2.zw, v6.xyxy
dsy r3.xy, v6
mul r3.xy, r3, r3
add_pp r1.xyz, -r0, c10.y
mul_sat r2.x, r2, c11.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r0.x, r1.w, c14, c14.y
abs r1.w, v6.y
add r0.z, -r0.w, c10.y
mad r0.y, r0.w, c10.z, c10.w
mad r0.y, r0.w, r0, c11.x
add r2.y, -r1.w, c10
mad r2.x, r1.w, c10.z, c10.w
mad r2.x, r2, r1.w, c11
rsq r0.z, r0.z
rsq r2.y, r2.y
mad r0.y, r0.w, r0, c11
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
mad r1.w, r2.x, r1, c11.y
rcp r2.y, r2.y
mul r2.x, r1.w, r2.y
cmp r1.w, v6.y, c10.x, c10.y
mul r2.y, r1.w, r2.x
mad r0.z, -r2.y, c11, r2.x
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
add r1.w, r3.x, r3.y
rsq r1.w, r1.w
rcp r1.w, r1.w
dsx r0.w, r0.z
dsy r2.y, r0.z
mul r2.zw, r2, r2
add r0.z, r2, r2.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r2.x, r1.w, c14
mul r0.y, r0, c12.x
mul r0.z, r0, c14.x
texldd r0.xyz, r0, s0, r0.zwzw, r2
mul_pp r1.xyz, r0, r1
add r2.xyz, v4, c15.yzzw
texld r0, r2, s3
dp4 r3.w, r0, c16
mul r2.xyz, r1, v1
add r0.xyz, v4, c15.zyzw
texld r0, r0, s3
dp4 r3.z, r0, c16
add r1.xyz, v4, c15.zzyw
texld r1, r1, s3
dp4 r3.y, r1, c16
add r0.xyz, v4, c15.y
texld r0, r0, s3
dp3 r1.x, v4, v4
rsq r1.x, r1.x
dp4 r3.x, r0, c16
rcp r0.x, r1.x
dp4 r1.x, c1, c1
mul r0.x, r0, c2.w
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_pp_sat r1.x, v5, r1
mad r0, -r0.x, c15.w, r3
mov r1.w, c3.x
cmp r0, r0, c10.y, r1.w
dp4_pp r0.z, r0, c17.x
add_pp r0.y, r1.x, c15.x
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.y, r0.x, r0.z
mul_pp_sat r0.w, r0.y, c17.y
mov r0.x, c9
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul_pp r1.xyz, r2, c5
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 124 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v5.xyxy
mov r3.xyz, v5
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v5, c5.x
mul r3.xy, v5, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mul r0.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c12.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v5.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v5.y
cmp r1.y, v5.x, r1, -r1
mad r0.z, r1.y, c13.x, c13.y
add r0.x, -r0.w, c9.y
mad r0.y, r0.w, c9.z, c9.w
mad r0.y, r0.w, r0, c10.x
mad r0.y, r0.w, r0, c10
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.y, r0, r0.x
cmp r0.w, v5.z, c9.x, c9.y
mul r0.x, r0.w, r0.y
mad r0.x, -r0, c10.z, r0.y
mad r0.x, r0.w, c10.w, r0
mul r0.x, r0, c11
mul r1.y, r1, r1.x
cmp r2.x, v5.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.y, -r1.x, c10.z, r1
mad r0.y, r2.x, c10.w, r0
mul r0.w, r0.y, c11.x
dsx r2.xy, v5
mul r2.xy, r2, r2
dsy r1.xy, v5
mul r1.xy, r1, r1
dsy r2.w, r0.x
dsx r0.y, r0.x
add r0.x, r1, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v5.zyzw, c8.x
rcp r1.y, r1.x
rsq r0.x, r0.x
rcp r1.x, r0.x
mul r2.z, r1.x, c13.x
mul r0.x, r1.y, c13
texldd r4.xyz, r0.zwzw, s0, r0, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v5, c8.x
texld r5, r3, s5
texld r6, r2, s5
texldd r0, r0.zwzw, s3, r0, r2.zwzw
add_pp r6, r6, -r5
mul r1.xy, v5.zxzw, c8.x
mad_pp r5, r1.z, r6, r5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
add_pp r4, r4, -r3
mul_pp r2.xyz, r5, c3
dp3_pp_sat r2.w, v4, r1
mad_pp r3, r1.w, r4, r3
mul_pp r1, r0, r3
add_pp r0.y, r2.w, c13.z
mul_pp r0.z, r0.y, c2.w
dp3 r0.x, v3, v3
texld r0.x, r0.x, s6
mul_pp r0.w, r0.z, r0.x
mov r0.y, c7.x
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r2, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 122 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mul r0.xy, v4.zyzw, c5.x
mul r1.xy, v4.zyzw, c4.x
abs r0.w, v4.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v4.xyxy
mov r3.xyz, v4
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v4, c5.x
mul r3.xy, v4, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mul r0.xy, v4.zxzw, c5.x
mul r2.xy, v4.zxzw, c4.x
mad r2.w, r3, r2, c12.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v4.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v4.y
cmp r1.y, v4.x, r1, -r1
mad r0.z, r1.y, c13.x, c13.y
add r0.x, -r0.w, c9.y
mad r0.y, r0.w, c9.z, c9.w
mad r0.y, r0.w, r0, c10.x
mad r0.y, r0.w, r0, c10
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.y, r0, r0.x
cmp r0.w, v4.z, c9.x, c9.y
mul r0.x, r0.w, r0.y
mad r0.x, -r0, c10.z, r0.y
mad r0.x, r0.w, c10.w, r0
mul r0.x, r0, c11
mul r1.y, r1, r1.x
cmp r2.x, v4.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.y, -r1.x, c10.z, r1
mad r0.y, r2.x, c10.w, r0
mul r0.w, r0.y, c11.x
dsx r2.xy, v4
mul r2.xy, r2, r2
dsy r1.xy, v4
mul r1.xy, r1, r1
dsy r2.w, r0.x
dsx r0.y, r0.x
add r0.x, r1, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v4.zyzw, c8.x
rcp r1.y, r1.x
rsq r0.x, r0.x
rcp r1.x, r0.x
mul r2.z, r1.x, c13.x
mul r0.x, r1.y, c13
texldd r4.xyz, r0.zwzw, s0, r0, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v4, c8.x
texld r5, r3, s5
texld r6, r2, s5
texldd r0, r0.zwzw, s3, r0, r2.zwzw
add_pp r6, r6, -r5
mul r1.xy, v4.zxzw, c8.x
mad_pp r5, r1.z, r6, r5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
dp4_pp r1.z, c1, c1
rsq_pp r1.x, r1.z
mul_pp r1.xyz, r1.x, c1
add_pp r4, r4, -r3
mul_pp r2.xyz, r5, c3
dp3_pp_sat r2.w, v3, r1
mad_pp r3, r1.w, r4, r3
mul_pp r1, r0, r3
add_pp r0.y, r2.w, c13.z
mul_pp r0.w, r0.y, c2
mov r0.x, c7
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r2, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 129 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v5.xyxy
mov r3.xyz, v5
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v5, c5.x
mul r3.xy, v5, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mul r0.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c12.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v5.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v5.y
cmp r1.y, v5.x, r1, -r1
mad r0.z, r1.y, c13.x, c13.y
add r0.x, -r0.w, c9.y
mad r0.y, r0.w, c9.z, c9.w
mad r0.y, r0.w, r0, c10.x
mad r0.y, r0.w, r0, c10
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.y, r0, r0.x
cmp r0.w, v5.z, c9.x, c9.y
mul r0.x, r0.w, r0.y
mad r0.x, -r0, c10.z, r0.y
mad r0.x, r0.w, c10.w, r0
mul r0.x, r0, c11
mul r1.y, r1, r1.x
cmp r2.x, v5.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.y, -r1.x, c10.z, r1
mad r0.y, r2.x, c10.w, r0
mul r0.w, r0.y, c11.x
dsx r2.xy, v5
mul r2.xy, r2, r2
dsy r1.xy, v5
mul r1.xy, r1, r1
dsy r2.w, r0.x
dsx r0.y, r0.x
add r0.x, r1, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v5.zyzw, c8.x
rcp r1.y, r1.x
rsq r0.x, r0.x
rcp r1.x, r0.x
mul r2.z, r1.x, c13.x
mul r0.x, r1.y, c13
texldd r4.xyz, r0.zwzw, s0, r0, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v5, c8.x
texld r5, r3, s5
texld r6, r2, s5
texldd r0, r0.zwzw, s3, r0, r2.zwzw
add_pp r6, r6, -r5
mul r1.xy, v5.zxzw, c8.x
mad_pp r5, r1.z, r6, r5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
dp3_pp_sat r2.w, v4, r1
mul_pp r1, r0, r3
add_pp r0.y, r2.w, c13.z
mul_pp r0.z, r0.y, c2.w
rcp r0.x, v3.w
mad r3.xy, v3, r0.x, c13.y
dp3 r0.x, v3, v3
mul_pp r2.xyz, r5, c3
texld r0.w, r3, s6
cmp r0.y, -v3.z, c9.x, c9
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.y, r0, r0.x
mul_pp r0.w, r0.z, r0.y
mov r0.x, c7
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r2, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 125 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v5.xyxy
mov r3.xyz, v5
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v5, c5.x
mul r3.xy, v5, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mad r2.w, r3, r2, c12.z
mul r0.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v5.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v5.y
cmp r1.y, v5.x, r1, -r1
mad r0.x, r1.y, c13, c13.y
add r0.y, -r0.w, c9
mad r0.z, r0.w, c9, c9.w
mad r0.z, r0.w, r0, c10.x
mad r0.z, r0.w, r0, c10.y
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v5.z, c9.x, c9.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c10.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v5.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c10, r1.y
mad r0.y, r0.w, c10.w, r0
mad r0.w, r2.x, c10, r0.z
mul r0.z, r0.y, c11.x
mul r0.y, r0.w, c11.x
dsx r2.xy, v5
mul r2.xy, r2, r2
dsy r1.xy, v5
mul r1.xy, r1, r1
dsx r2.w, r0.z
dsy r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
rcp r1.x, r1.x
mul r2.z, r1.x, c13.x
mul r2.xy, v5.zyzw, c8.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c13.x
texldd r4.xyz, r0, s0, r2.zwzw, r0.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v5, c8.x
texld r5, r4, s5
texld r6, r2, s5
texldd r0, r0, s3, r2.zwzw, r0.zwzw
add_pp r6, r6, -r5
mad_pp r5, r1.z, r6, r5
mul r1.xy, v5.zxzw, c8.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r3.xyz, r3, v1
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r2, r2, s4
add_pp r2, r2, -r4
mad_pp r2, r1.z, r2, r4
dp4 r3.w, c1, c1
texld r4, r1, s4
rsq r1.z, r3.w
mul r1.xyz, r1.z, c1
mul_pp r3.xyz, r3, c3
add_pp r4, r4, -r2
dp3_pp_sat r3.w, v4, r1
mad_pp r1, r1.w, r4, r2
mul_pp r1, r0, r1
add_pp r2.x, r3.w, c13.z
dp3 r0.x, v3, v3
mul_pp r0.z, r2.x, c2.w
texld r0.w, v3, s7
texld r0.x, r0.x, s6
mul r0.y, r0.x, r0.w
mul_pp r0.w, r0.z, r0.y
mov r0.x, c7
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r3, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 123 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v5.xyxy
mov r3.xyz, v5
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v5, c5.x
mul r3.xy, v5, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mad r2.w, r3, r2, c12.z
mul r0.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v5.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v5.y
cmp r1.y, v5.x, r1, -r1
mad r0.x, r1.y, c13, c13.y
add r0.y, -r0.w, c9
mad r0.z, r0.w, c9, c9.w
mad r0.z, r0.w, r0, c10.x
mad r0.z, r0.w, r0, c10.y
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v5.z, c9.x, c9.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c10.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v5.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c10, r1.y
mad r0.y, r0.w, c10.w, r0
mad r0.w, r2.x, c10, r0.z
mul r0.z, r0.y, c11.x
mul r0.y, r0.w, c11.x
dsx r2.xy, v5
mul r2.xy, r2, r2
dsy r1.xy, v5
mul r1.xy, r1, r1
dsx r2.w, r0.z
dsy r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
rcp r1.x, r1.x
mul r2.z, r1.x, c13.x
mul r2.xy, v5.zyzw, c8.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c13.x
texldd r4.xyz, r0, s0, r2.zwzw, r0.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v5, c8.x
texld r5, r4, s5
texld r6, r2, s5
texldd r0, r0, s3, r2.zwzw, r0.zwzw
add_pp r6, r6, -r5
mad_pp r5, r1.z, r6, r5
mul r1.xy, v5.zxzw, c8.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r3.xyz, r3, v1
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r2, r2, s4
add_pp r2, r2, -r4
mad_pp r2, r1.z, r2, r4
dp4_pp r3.w, c1, c1
texld r4, r1, s4
rsq_pp r1.z, r3.w
mul_pp r1.xyz, r1.z, c1
mul_pp r3.xyz, r3, c3
add_pp r4, r4, -r2
dp3_pp_sat r3.w, v4, r1
mad_pp r1, r1.w, r4, r2
mul_pp r1, r0, r1
add_pp r2.x, r3.w, c13.z
mul_pp r0.y, r2.x, c2.w
texld r0.w, v3, s6
mul_pp r0.w, r0.y, r0
mov r0.x, c7
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r3, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 134 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c15
max r2.w, r1.z, r0
mad_sat r1.y, r1, c15.z, c15.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c6.x
mul r3.xy, v6, c5.x
mad r3.w, r2, c12.y, c12.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c13.y
mul r0.xy, v6.zxzw, c6.x
mul r2.xy, v6.zxzw, c5.x
mad r2.w, r3, r2, c13.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c13.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c11.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c7
add_pp r2.xyz, -r0, c10.y
mul_sat r1.x, r1, c11.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c14, c14.y
add r0.y, -r0.w, c10
mad r0.z, r0.w, c10, c10.w
mad r0.z, r0.w, r0, c11.x
mad r0.z, r0.w, r0, c11.y
add r1.x, -r2, c10.y
mad r1.y, r2.x, c10.z, c10.w
mad r1.y, r1, r2.x, c11.x
mad r1.y, r1, r2.x, c11
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c10.x, c10.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c11.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c10, c10.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c11, r1.y
mad r0.y, r0.w, c11.w, r0
mad r0.w, r2.x, c11, r0.z
mul r0.z, r0.y, c12.x
mul r0.y, r0.w, c12.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsy r2.w, r0.z
dsx r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v6.zyzw, c9.x
rcp r1.y, r1.x
rsq r0.z, r0.z
rcp r1.x, r0.z
mul r2.z, r1.x, c14.x
mul r0.z, r1.y, c14.x
texldd r4.xyz, r0, s0, r0.zwzw, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v6, c9.x
texld r5, r3, s5
texld r6, r2, s5
texldd r0, r0, s3, r0.zwzw, r2.zwzw
add_pp r6, r6, -r5
mul r1.xy, v6.zxzw, c9.x
mad_pp r5, r1.z, r6, r5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
dp3_pp_sat r2.w, v5, r1
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
mul_pp r1, r0, r3
rcp r0.z, v3.w
mad r3.xy, v3, r0.z, c14.y
mul_pp r2.xyz, r5, c4
add_pp r2.w, r2, c14.z
texldp r0.x, v4, s8
rcp r0.y, v4.w
mad r0.y, -v4.z, r0, r0.x
mov r0.x, c2
cmp r0.y, r0, c10, r0.x
dp3 r0.x, v3, v3
texld r0.w, r3, s6
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r0.x, r0, r0.y
mul_pp r0.y, r2.w, c3.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r2.w, r0.y, c14
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r2.w, r0, c0
mad_pp r1.xyz, -r2, r0, r1
mul_pp_sat r0.w, r2, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 133 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c15
max r2.w, r1.z, r0
mad_sat r1.y, r1, c15.z, c15.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c6.x
mul r3.xy, v6, c5.x
mad r3.w, r2, c12.y, c12.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c13.y
mul r0.xy, v6.zxzw, c6.x
mul r2.xy, v6.zxzw, c5.x
mad r2.w, r3, r2, c13.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c13.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c11.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c7
add_pp r2.xyz, -r0, c10.y
mul_sat r1.x, r1, c11.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c14, c14.y
add r0.y, -r0.w, c10
mad r0.z, r0.w, c10, c10.w
mad r0.z, r0.w, r0, c11.x
mad r0.z, r0.w, r0, c11.y
add r1.x, -r2, c10.y
mad r1.y, r2.x, c10.z, c10.w
mad r1.y, r1, r2.x, c11.x
mad r1.y, r1, r2.x, c11
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c10.x, c10.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c11.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c10, c10.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c11, r1.y
mad r0.y, r0.w, c11.w, r0
mad r0.w, r2.x, c11, r0.z
mul r0.z, r0.y, c12.x
mul r0.y, r0.w, c12.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsy r2.w, r0.z
dsx r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v6.zyzw, c9.x
rcp r1.y, r1.x
rsq r0.z, r0.z
rcp r1.x, r0.z
mul r2.z, r1.x, c14.x
mul r0.z, r1.y, c14.x
texldd r4.xyz, r0, s0, r0.zwzw, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v6, c9.x
texld r5, r3, s5
texld r6, r2, s5
texldd r0, r0, s3, r0.zwzw, r2.zwzw
add_pp r6, r6, -r5
mul r1.xy, v6.zxzw, c9.x
mad_pp r5, r1.z, r6, r5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
dp3_pp_sat r2.w, v5, r1
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
mul_pp r1, r0, r3
mov r0.x, c2
rcp r0.z, v3.w
mad r3.xy, v3, r0.z, c14.y
add r0.y, c10, -r0.x
texldp r0.x, v4, s8
mad r0.y, r0.x, r0, c2.x
dp3 r0.x, v3, v3
mul_pp r2.xyz, r5, c4
add_pp r2.w, r2, c14.z
texld r0.w, r3, s6
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r0.x, r0, r0.y
mul_pp r0.y, r2.w, c3.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r2.w, r0.y, c14
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r2.w, r0, c0
mad_pp r1.xyz, -r2, r0, r1
mul_pp_sat r0.w, r2, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 123 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v5.xyxy
mov r3.xyz, v5
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v5, c5.x
mul r3.xy, v5, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mad r2.w, r3, r2, c12.z
mul r0.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v5.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v5.y
cmp r1.y, v5.x, r1, -r1
mad r0.x, r1.y, c13, c13.y
add r0.y, -r0.w, c9
mad r0.z, r0.w, c9, c9.w
mad r0.z, r0.w, r0, c10.x
mad r0.z, r0.w, r0, c10.y
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v5.z, c9.x, c9.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c10.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v5.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c10, r1.y
mad r0.y, r0.w, c10.w, r0
mad r0.w, r2.x, c10, r0.z
mul r0.z, r0.y, c11.x
mul r0.y, r0.w, c11.x
dsx r2.xy, v5
mul r2.xy, r2, r2
dsy r1.xy, v5
mul r1.xy, r1, r1
dsx r2.w, r0.z
dsy r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
rcp r1.x, r1.x
mul r2.z, r1.x, c13.x
mul r2.xy, v5.zyzw, c8.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c13.x
texldd r4.xyz, r0, s0, r2.zwzw, r0.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v5, c8.x
texld r5, r4, s5
texld r6, r2, s5
texldd r0, r0, s3, r2.zwzw, r0.zwzw
add_pp r6, r6, -r5
mad_pp r5, r1.z, r6, r5
mul r1.xy, v5.zxzw, c8.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r3.xyz, r3, v1
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r2, r2, s4
add_pp r2, r2, -r4
mad_pp r2, r1.z, r2, r4
dp4_pp r3.w, c1, c1
texld r4, r1, s4
rsq_pp r1.z, r3.w
mul_pp r1.xyz, r1.z, c1
mul_pp r3.xyz, r3, c3
add_pp r4, r4, -r2
dp3_pp_sat r3.w, v4, r1
mad_pp r1, r1.w, r4, r2
mul_pp r1, r0, r1
add_pp r2.x, r3.w, c13.z
mul_pp r0.z, r2.x, c2.w
texldp r0.x, v3, s6
mul_pp r0.w, r0.z, r0.x
mov r0.y, c7.x
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r3, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 124 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c5.x
mul r1.xy, v6.zyzw, c4.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c5.x
mul r3.xy, v6, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mad r2.w, r3, r2, c12.z
mul r0.xy, v6.zxzw, c5.x
mul r2.xy, v6.zxzw, c4.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c13, c13.y
add r0.y, -r0.w, c9
mad r0.z, r0.w, c9, c9.w
mad r0.z, r0.w, r0, c10.x
mad r0.z, r0.w, r0, c10.y
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c9.x, c9.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c10.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c10, r1.y
mad r0.y, r0.w, c10.w, r0
mad r0.w, r2.x, c10, r0.z
mul r0.z, r0.y, c11.x
mul r0.y, r0.w, c11.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsx r2.w, r0.z
dsy r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
rcp r1.x, r1.x
mul r2.z, r1.x, c13.x
mul r2.xy, v6.zyzw, c8.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c13.x
texldd r4.xyz, r0, s0, r2.zwzw, r0.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c8.x
texld r5, r4, s5
texld r6, r2, s5
texldd r0, r0, s3, r2.zwzw, r0.zwzw
add_pp r6, r6, -r5
mad_pp r5, r1.z, r6, r5
mul r1.xy, v6.zxzw, c8.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r3.xyz, r3, v1
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r2, r2, s4
add_pp r2, r2, -r4
mad_pp r2, r1.z, r2, r4
dp4_pp r3.w, c1, c1
texld r4, r1, s4
rsq_pp r1.z, r3.w
mul_pp r1.xyz, r1.z, c1
mul_pp r3.xyz, r3, c3
add_pp r4, r4, -r2
dp3_pp_sat r3.w, v5, r1
mad_pp r1, r1.w, r4, r2
mul_pp r1, r0, r1
add_pp r2.x, r3.w, c13.z
mul_pp r0.z, r2.x, c2.w
texldp r0.x, v4, s6
texld r0.w, v3, s7
mul r0.y, r0.w, r0.x
mul_pp r0.w, r0.z, r0.y
mov r0.x, c7
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r3, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 133 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 0.97000003
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 4.03944778, 1.50000000, -0.94999999, 0
def c18, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c17.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r6.xy, v6
abs r0.w, v6.z
max r1.w, r6.x, r0
rcp r2.x, r1.w
min r1.w, r6.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c13, c13.z
mad r3.y, r3, r2.w, c13.w
mad r3.y, r3, r2.w, c14.x
mad r3.y, r3, r2.w, c14
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c18, c18.y
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
mad r2.w, r3.y, r2, c14.z
mul r1.y, r2.w, r1.w
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r6.y, r0, r2
add r1.x, r6, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
cmp r1.w, v6.x, r1, -r1
mul r2.x, v0, c8
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
mad r5.z, r1.w, c15.x, c15.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v6.y
cmp r0.w, v6.z, c11.x, c11.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.w, -r2.x, c12.z, r1
mad r0.z, r0.w, c12.w, r1.w
mul r0.y, r0.z, c13.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mul r5.w, r0.x, c13.x
dsx r4.w, r0.y
dsy r3.w, r0.y
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.x, c15.x
mul r3.z, r0.y, c15.x
texldd r0.xyz, r5.zwzw, s0, r4.zwzw, r3.zwzw
mul_pp r2.xyz, r0, r1
mul r5.xy, v6, c10.x
mul r4.xy, v6.zyzw, c10.x
texld r0, r5, s5
texld r1, r4, s5
add_pp r1, r1, -r0
mad_pp r1, r6.x, r1, r0
mul r3.xy, v6.zxzw, c10.x
texld r0, r3, s5
add_pp r0, r0, -r1
mad_pp r0, r6.y, r0, r1
texldd r1, r5.zwzw, s3, r4.zwzw, r3.zwzw
mul_pp r0, r1, r0
mul r2.xyz, r2, v1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r0.w, r0, r2
texld r5, r5, s4
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r6.x, r4, r5
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r2, r6.y, r3, r4
mul_pp r1, r1, r2
mul_pp r3.xyz, r0, c5
texld r0, v4, s6
dp4 r0.z, r0, c16
dp3 r2.x, v4, v4
rsq r2.x, r2.x
rcp r0.y, r2.x
mul r0.y, r0, c2.w
dp4 r0.x, c1, c1
mad r0.w, -r0.y, c15, r0.z
mov r2.x, c3
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_pp_sat r0.y, v5, r0
dp3 r0.x, v3, v3
cmp r0.w, r0, c11.y, r2.x
texld r0.x, r0.x, s7
mul r0.z, r0.x, r0.w
add_pp r0.y, r0, c15.z
mul_pp r0.x, r0.y, c4.w
mul_pp r0.x, r0, r0.z
mov r0.y, c9.x
mul_pp_sat r0.x, r0, c17
mul_pp_sat r0.w, r0.x, c17.y
add r2.xyz, c4, r0.y
mad_sat r0.xyz, r0.x, r2, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 134 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 0.97000003
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 4.03944778, 1.50000000, -0.94999999, 0
def c18, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c17.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r6.xy, v6
abs r0.w, v6.z
max r1.w, r6.x, r0
rcp r2.x, r1.w
min r1.w, r6.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c13, c13.z
mad r3.y, r3, r2.w, c13.w
mad r3.y, r3, r2.w, c14.x
mad r3.y, r3, r2.w, c14
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c18, c18.y
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
mad r2.w, r3.y, r2, c14.z
mul r1.y, r2.w, r1.w
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r6.y, r0, r2
add r1.x, r6, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
cmp r1.w, v6.x, r1, -r1
mul r2.x, v0, c8
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
mad r5.z, r1.w, c15.x, c15.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v6.y
cmp r0.w, v6.z, c11.x, c11.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.w, -r2.x, c12.z, r1
mad r0.z, r0.w, c12.w, r1.w
mul r0.y, r0.z, c13.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mul r5.w, r0.x, c13.x
dsx r4.w, r0.y
dsy r3.w, r0.y
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.x, c15.x
mul r3.z, r0.y, c15.x
texldd r0.xyz, r5.zwzw, s0, r4.zwzw, r3.zwzw
mul_pp r2.xyz, r0, r1
mul r5.xy, v6, c10.x
mul r4.xy, v6.zyzw, c10.x
texld r0, r5, s5
texld r1, r4, s5
add_pp r1, r1, -r0
mad_pp r1, r6.x, r1, r0
mul r3.xy, v6.zxzw, c10.x
texld r0, r3, s5
add_pp r0, r0, -r1
mad_pp r0, r6.y, r0, r1
texldd r1, r5.zwzw, s3, r4.zwzw, r3.zwzw
mul_pp r0, r1, r0
mul r2.xyz, r2, v1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r0.w, r0, r2
texld r5, r5, s4
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r6.x, r4, r5
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r2, r6.y, r3, r4
mul_pp r1, r1, r2
mul_pp r3.xyz, r0, c5
texld r0, v4, s6
dp4 r0.z, r0, c16
dp3 r2.x, v4, v4
rsq r0.y, r2.x
dp4 r0.x, c1, c1
rcp r0.y, r0.y
mul r0.y, r0, c2.w
mad r0.w, -r0.y, c15, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_pp_sat r0.x, v5, r0
add_pp r0.y, r0.x, c15.z
mov r2.x, c3
cmp r0.z, r0.w, c11.y, r2.x
dp3 r0.x, v3, v3
texld r0.w, v3, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.x, r0, r0.z
mov r0.y, c9.x
mul_pp_sat r0.x, r0, c17
mul_pp_sat r0.w, r0.x, c17.y
add r2.xyz, c4, r0.y
mad_sat r0.xyz, r0.x, r2, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 142 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, -0.01000214, 0.25000000
def c19, 4.03944778, 1.50000000, -0.94999999, 0
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
abs r0.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c19.z
max r2.w, r1.z, r0
mad_sat r1.y, r1, c20.x, c20
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c10.x
mul r3.xy, v6, c9.x
mad r3.w, r2, c16.y, c16.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c16.w
mad r3.w, r3.x, r2, c17.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c17.y
mul r0.xy, v6.zxzw, c10.x
mul r2.xy, v6.zxzw, c9.x
mad r2.w, r3, r2, c17.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c17.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c15.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c11
add_pp r2.xyz, -r0, c14.y
mul_sat r1.x, r1, c15.z
mad_pp r3.xyz, r1.x, r2, r0
cmp r1.y, v6.x, r1, -r1
mad r2.z, r1.y, c18.x, c18.y
abs r1.y, v6
add r0.x, -r0.w, c14.y
mad r0.y, r0.w, c14.z, c14.w
mad r0.y, r0.w, r0, c15.x
mad r0.y, r0.w, r0, c15
add r0.w, -r1.y, c14.y
mad r1.x, r1.y, c14.z, c14.w
mad r1.x, r1, r1.y, c15
mad r1.x, r1, r1.y, c15.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.xy, v6
mul r0.y, r0, r0.x
cmp r0.z, v6, c14.x, c14.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c15.z, r0.y
mad r0.x, r0.z, c15.w, r0
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
mul r2.xy, v6.zyzw, c13.x
mul r1.x, r1, r0.w
cmp r1.y, v6, c14.x, c14
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c15.z, r1.x
mad r0.y, r1, c15.w, r0
mul r0.x, r0, c16
mul r2.w, r0.y, c16.x
dsy r1.xy, v6
mul r1.xy, r1, r1
dsx r0.y, r0.x
dsy r0.w, r0.x
add r0.x, r1, r1.y
rsq r0.z, r0.z
rcp r1.x, r0.z
rsq r0.x, r0.x
rcp r0.z, r0.x
mul r0.x, r1, c18
mul r0.z, r0, c18.x
texldd r4.xyz, r2.zwzw, s0, r0, r0.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c13.x
texld r5, r4, s5
texld r6, r2, s5
texldd r0, r2.zwzw, s3, r0, r0.zwzw
add_pp r6, r6, -r5
mad_pp r5, r1.z, r6, r5
mul r1.xy, v6.zxzw, c13.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r3.xyz, r3, v1
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r2, r2, s4
add_pp r2, r2, -r4
mad_pp r2, r1.z, r2, r4
texld r4, r1, s4
add_pp r4, r4, -r2
mad_pp r2, r1.w, r4, r2
rcp r1.w, v4.w
mul_pp r2, r0, r2
mul_pp r1.xyz, r3, c8
mad r0.xy, v4, r1.w, c6
mad r3.xy, v4, r1.w, c5
texld r0.x, r0, s8
texld r3.x, r3, s8
mov r3.z, r3.x
mad r3.xy, v4, r1.w, c3
mov r3.w, r0.x
mad r0.xy, v4, r1.w, c4
texld r3.x, r3, s8
texld r0.x, r0, s8
mov r3.y, r0.x
mad r0, -v4.z, r1.w, r3
mov r1.w, c2.x
cmp r0, r0, c14.y, r1.w
dp4_pp r0.y, r0, c18.w
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul r3.xyz, r3.x, c1
dp3_pp_sat r0.z, v5, r3
add_pp r1.w, r0.z, c18.z
rcp r0.x, v3.w
mad r3.xy, v3, r0.x, c18.y
dp3 r0.x, v3, v3
texld r0.w, r3, s6
cmp r0.z, -v3, c14.x, c14.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r0.x, r0, r0.y
mul_pp r0.y, r1.w, c7.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r1.w, r0.y, c19.x
mov r0.x, c12
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r1.w, r0, c0
mad_pp r2.xyz, -r1, r0, r2
mul_pp_sat r0.w, r1, c19.y
add_pp r0.w, -r0, c14.y
mul_pp r0.xyz, r1, r0
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 142 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, -0.01000214, 0.25000000
def c19, 4.03944778, 1.50000000, -0.94999999, 0
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c19.z
max r2.w, r1.z, r0
mad_sat r1.y, r1, c20.x, c20
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c10.x
mul r3.xy, v6, c9.x
mad r3.w, r2, c16.y, c16.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c16.w
mad r3.w, r3.x, r2, c17.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c17.y
mul r0.xy, v6.zxzw, c10.x
mul r2.xy, v6.zxzw, c9.x
mad r2.w, r3, r2, c17.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c17.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c15.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c11
add_pp r2.xyz, -r0, c14.y
mul_sat r1.x, r1, c15.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c18, c18.y
add r0.y, -r0.w, c14
mad r0.z, r0.w, c14, c14.w
mad r0.z, r0.w, r0, c15.x
mad r0.z, r0.w, r0, c15.y
add r1.x, -r2, c14.y
mad r1.y, r2.x, c14.z, c14.w
mad r1.y, r1, r2.x, c15.x
mad r1.y, r1, r2.x, c15
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c14.x, c14.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c15.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c14, c14.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c15, r1.y
mad r0.y, r0.w, c15.w, r0
mad r0.w, r2.x, c15, r0.z
mul r0.z, r0.y, c16.x
mul r0.y, r0.w, c16.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsx r2.w, r0.z
dsy r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
rcp r1.x, r1.x
mul r2.z, r1.x, c18.x
mul r2.xy, v6.zyzw, c13.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c18.x
texldd r4.xyz, r0, s0, r2.zwzw, r0.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v6, c13.x
texld r5, r3, s5
texld r6, r2, s5
add_pp r6, r6, -r5
texldd r0, r0, s3, r2.zwzw, r0.zwzw
mad_pp r5, r1.z, r6, r5
mul r1.xy, v6.zxzw, c13.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
rcp r2.w, v4.w
mad r1.xyz, v4, r2.w, c6
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
mul_pp r0, r0, r3
texld r1.x, r1, s8
mad r3.xyz, v4, r2.w, c5
mov_pp r1.w, r1.x
texld r1.x, r3, s8
mad r3.xyz, v4, r2.w, c4
mov_pp r1.z, r1.x
texld r1.x, r3, s8
mad r3.xyz, v4, r2.w, c3
mov_pp r1.y, r1.x
texld r1.x, r3, s8
mov r2.w, c2.x
add r2.w, c14.y, -r2
mad r1, r1, r2.w, c2.x
dp4_pp r1.y, r1, c18.w
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul r3.xyz, r3.x, c1
dp3_pp_sat r1.z, v5, r3
add_pp r2.w, r1.z, c18.z
rcp r1.x, v3.w
mad r3.xy, v3, r1.x, c18.y
dp3 r1.x, v3, v3
mul_pp r2.xyz, r5, c8
texld r1.w, r3, s6
cmp r1.z, -v3, c14.x, c14.y
mul_pp r1.z, r1, r1.w
texld r1.x, r1.x, s7
mul_pp r1.x, r1.z, r1
mul_pp r1.x, r1, r1.y
mul_pp r1.y, r2.w, c7.w
mul_pp r1.y, r1, r1.x
mul_pp_sat r2.w, r1.y, c19.x
mov r1.x, c12
add r1.xyz, c7, r1.x
mad_sat r1.xyz, r2.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r2, c19.y
add_pp r1.w, -r1, c14.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 141 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 0.00781250
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.03944778, 1.50000000, -0.94999999, 0
def c19, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c18.z
max r2.w, r1.z, r0
mad_sat r1.y, r1, c19.x, c19
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c7.x
mul r3.xy, v6, c6.x
mad r3.w, r2, c13.y, c13.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c13.w
mad r3.w, r3.x, r2, c14.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c14.y
mul r0.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
mad r2.w, r3, r2, c14.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c14.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c12.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c8
add_pp r2.xyz, -r0, c11.y
mul_sat r1.x, r1, c12.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c15, c15.y
add r0.y, -r0.w, c11
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
add r1.x, -r2, c11.y
mad r1.y, r2.x, c11.z, c11.w
mad r1.y, r1, r2.x, c12.x
mad r1.y, r1, r2.x, c12
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c11.x, c11.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c12.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c11, c11.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c12, r1.y
mad r0.y, r0.w, c12.w, r0
mad r0.w, r2.x, c12, r0.z
mul r0.z, r0.y, c13.x
mul r0.y, r0.w, c13.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsy r2.w, r0.z
dsx r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v6.zyzw, c10.x
rcp r1.y, r1.x
rsq r0.z, r0.z
rcp r1.x, r0.z
mul r2.z, r1.x, c15.x
mul r0.z, r1.y, c15.x
texldd r4.xyz, r0, s0, r0.zwzw, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v6, c10.x
texld r5, r3, s5
texld r6, r2, s5
add_pp r6, r6, -r5
texldd r0, r0, s3, r0.zwzw, r2.zwzw
mad_pp r5, r1.z, r6, r5
mul r1.xy, v6.zxzw, c10.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
mul_pp r0, r0, r3
add r1.xyz, v4, c16.xyyw
texld r1, r1, s6
dp4 r1.w, r1, c17
add r1.xyz, v4, c16.yyxw
texld r4, r1, s6
add r3.xyz, v4, c16.yxyw
texld r3, r3, s6
dp4 r1.z, r3, c17
dp3 r1.x, v4, v4
rsq r1.x, r1.x
rcp r2.w, r1.x
add r3.xyz, v4, c15.w
texld r3, r3, s6
dp4 r1.x, r3, c17
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul_pp r2.xyz, r5, c5
mul r2.w, r2, c2
dp4 r1.y, r4, c17
mad r1, -r2.w, c16.z, r1
mov r2.w, c3.x
cmp r1, r1, c11.y, r2.w
dp4_pp r1.y, r1, c16.w
mul r3.xyz, r3.x, c1
dp3_pp_sat r1.z, v5, r3
dp3 r1.x, v3, v3
texld r1.x, r1.x, s7
mul r1.x, r1, r1.y
add_pp r1.z, r1, c15
mul_pp r1.y, r1.z, c4.w
mul_pp r1.y, r1, r1.x
mul_pp_sat r2.w, r1.y, c18.x
mov r1.x, c9
add r1.xyz, c4, r1.x
mad_sat r1.xyz, r2.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r2, c18.y
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 142 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 0.00781250
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.03944778, 1.50000000, -0.94999999, 0
def c19, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c18.z
max r2.w, r1.z, r0
mad_sat r1.y, r1, c19.x, c19
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c7.x
mul r3.xy, v6, c6.x
mad r3.w, r2, c13.y, c13.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c13.w
mad r3.w, r3.x, r2, c14.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c14.y
mul r0.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
mad r2.w, r3, r2, c14.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c14.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c12.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c8
add_pp r2.xyz, -r0, c11.y
mul_sat r1.x, r1, c12.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c15, c15.y
add r0.y, -r0.w, c11
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
add r1.x, -r2, c11.y
mad r1.y, r2.x, c11.z, c11.w
mad r1.y, r1, r2.x, c12.x
mad r1.y, r1, r2.x, c12
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c11.x, c11.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c12.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c11, c11.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c12, r1.y
mad r0.y, r0.w, c12.w, r0
mad r0.w, r2.x, c12, r0.z
mul r0.z, r0.y, c13.x
mul r0.y, r0.w, c13.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsy r2.w, r0.z
dsx r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v6.zyzw, c10.x
rcp r1.y, r1.x
rsq r0.z, r0.z
rcp r1.x, r0.z
mul r2.z, r1.x, c15.x
mul r0.z, r1.y, c15.x
texldd r4.xyz, r0, s0, r0.zwzw, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v6, c10.x
texld r5, r3, s5
texld r6, r2, s5
add_pp r6, r6, -r5
texldd r0, r0, s3, r0.zwzw, r2.zwzw
mad_pp r5, r1.z, r6, r5
mul r1.xy, v6.zxzw, c10.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
mul_pp r0, r0, r3
add r1.xyz, v4, c16.xyyw
texld r1, r1, s6
dp4 r1.w, r1, c17
add r1.xyz, v4, c16.yyxw
texld r4, r1, s6
dp3 r1.x, v4, v4
rsq r2.w, r1.x
add r3.xyz, v4, c16.yxyw
texld r3, r3, s6
dp4 r1.z, r3, c17
add r3.xyz, v4, c15.w
texld r3, r3, s6
dp4 r1.x, r3, c17
rcp r2.w, r2.w
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul_pp r2.xyz, r5, c5
mul r2.w, r2, c2
dp4 r1.y, r4, c17
mad r1, -r2.w, c16.z, r1
mov r2.w, c3.x
cmp r1, r1, c11.y, r2.w
dp4_pp r1.y, r1, c16.w
mul r3.xyz, r3.x, c1
dp3_pp_sat r2.w, v5, r3
dp3 r1.x, v3, v3
add_pp r1.z, r2.w, c15
texld r1.w, v3, s8
texld r1.x, r1.x, s7
mul r1.x, r1, r1.w
mul r1.x, r1, r1.y
mul_pp r1.y, r1.z, c4.w
mul_pp r1.y, r1, r1.x
mul_pp_sat r2.w, r1.y, c18.x
mov r1.x, c9
add r1.xyz, c4, r1.x
mad_sat r1.xyz, r2.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r2, c18.y
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 124 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v5.xyxy
mov r3.xyz, v5
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v5, c5.x
mul r3.xy, v5, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mul r0.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c12.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v5.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v5.y
cmp r1.y, v5.x, r1, -r1
mad r0.z, r1.y, c13.x, c13.y
add r0.x, -r0.w, c9.y
mad r0.y, r0.w, c9.z, c9.w
mad r0.y, r0.w, r0, c10.x
mad r0.y, r0.w, r0, c10
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.y, r0, r0.x
cmp r0.w, v5.z, c9.x, c9.y
mul r0.x, r0.w, r0.y
mad r0.x, -r0, c10.z, r0.y
mad r0.x, r0.w, c10.w, r0
mul r0.x, r0, c11
mul r1.y, r1, r1.x
cmp r2.x, v5.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.y, -r1.x, c10.z, r1
mad r0.y, r2.x, c10.w, r0
mul r0.w, r0.y, c11.x
dsx r2.xy, v5
mul r2.xy, r2, r2
dsy r1.xy, v5
mul r1.xy, r1, r1
dsy r2.w, r0.x
dsx r0.y, r0.x
add r0.x, r1, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v5.zyzw, c8.x
rcp r1.y, r1.x
rsq r0.x, r0.x
rcp r1.x, r0.x
mul r2.z, r1.x, c13.x
mul r0.x, r1.y, c13
texldd r4.xyz, r0.zwzw, s0, r0, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v5, c8.x
texld r5, r3, s5
texld r6, r2, s5
texldd r0, r0.zwzw, s3, r0, r2.zwzw
add_pp r6, r6, -r5
mul r1.xy, v5.zxzw, c8.x
mad_pp r5, r1.z, r6, r5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
add_pp r4, r4, -r3
mul_pp r2.xyz, r5, c3
dp3_pp_sat r2.w, v4, r1
mad_pp r3, r1.w, r4, r3
mul_pp r1, r0, r3
add_pp r0.y, r2.w, c13.z
mul_pp r0.z, r0.y, c2.w
dp3 r0.x, v3, v3
texld r0.x, r0.x, s6
mul_pp r0.w, r0.z, r0.x
mov r0.y, c7.x
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r2, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 122 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mul r0.xy, v4.zyzw, c5.x
mul r1.xy, v4.zyzw, c4.x
abs r0.w, v4.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v4.xyxy
mov r3.xyz, v4
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v4, c5.x
mul r3.xy, v4, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mul r0.xy, v4.zxzw, c5.x
mul r2.xy, v4.zxzw, c4.x
mad r2.w, r3, r2, c12.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v4.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v4.y
cmp r1.y, v4.x, r1, -r1
mad r0.z, r1.y, c13.x, c13.y
add r0.x, -r0.w, c9.y
mad r0.y, r0.w, c9.z, c9.w
mad r0.y, r0.w, r0, c10.x
mad r0.y, r0.w, r0, c10
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.y, r0, r0.x
cmp r0.w, v4.z, c9.x, c9.y
mul r0.x, r0.w, r0.y
mad r0.x, -r0, c10.z, r0.y
mad r0.x, r0.w, c10.w, r0
mul r0.x, r0, c11
mul r1.y, r1, r1.x
cmp r2.x, v4.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.y, -r1.x, c10.z, r1
mad r0.y, r2.x, c10.w, r0
mul r0.w, r0.y, c11.x
dsx r2.xy, v4
mul r2.xy, r2, r2
dsy r1.xy, v4
mul r1.xy, r1, r1
dsy r2.w, r0.x
dsx r0.y, r0.x
add r0.x, r1, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v4.zyzw, c8.x
rcp r1.y, r1.x
rsq r0.x, r0.x
rcp r1.x, r0.x
mul r2.z, r1.x, c13.x
mul r0.x, r1.y, c13
texldd r4.xyz, r0.zwzw, s0, r0, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v4, c8.x
texld r5, r3, s5
texld r6, r2, s5
texldd r0, r0.zwzw, s3, r0, r2.zwzw
add_pp r6, r6, -r5
mul r1.xy, v4.zxzw, c8.x
mad_pp r5, r1.z, r6, r5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
dp4_pp r1.z, c1, c1
rsq_pp r1.x, r1.z
mul_pp r1.xyz, r1.x, c1
add_pp r4, r4, -r3
mul_pp r2.xyz, r5, c3
dp3_pp_sat r2.w, v3, r1
mad_pp r3, r1.w, r4, r3
mul_pp r1, r0, r3
add_pp r0.y, r2.w, c13.z
mul_pp r0.w, r0.y, c2
mov r0.x, c7
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r2, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 129 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v5.xyxy
mov r3.xyz, v5
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v5, c5.x
mul r3.xy, v5, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mul r0.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
mad r2.w, r3, r2, c12.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v5.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v5.y
cmp r1.y, v5.x, r1, -r1
mad r0.z, r1.y, c13.x, c13.y
add r0.x, -r0.w, c9.y
mad r0.y, r0.w, c9.z, c9.w
mad r0.y, r0.w, r0, c10.x
mad r0.y, r0.w, r0, c10
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.y, r0, r0.x
cmp r0.w, v5.z, c9.x, c9.y
mul r0.x, r0.w, r0.y
mad r0.x, -r0, c10.z, r0.y
mad r0.x, r0.w, c10.w, r0
mul r0.x, r0, c11
mul r1.y, r1, r1.x
cmp r2.x, v5.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.y, -r1.x, c10.z, r1
mad r0.y, r2.x, c10.w, r0
mul r0.w, r0.y, c11.x
dsx r2.xy, v5
mul r2.xy, r2, r2
dsy r1.xy, v5
mul r1.xy, r1, r1
dsy r2.w, r0.x
dsx r0.y, r0.x
add r0.x, r1, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v5.zyzw, c8.x
rcp r1.y, r1.x
rsq r0.x, r0.x
rcp r1.x, r0.x
mul r2.z, r1.x, c13.x
mul r0.x, r1.y, c13
texldd r4.xyz, r0.zwzw, s0, r0, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v5, c8.x
texld r5, r3, s5
texld r6, r2, s5
texldd r0, r0.zwzw, s3, r0, r2.zwzw
add_pp r6, r6, -r5
mul r1.xy, v5.zxzw, c8.x
mad_pp r5, r1.z, r6, r5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
dp3_pp_sat r2.w, v4, r1
mul_pp r1, r0, r3
add_pp r0.y, r2.w, c13.z
mul_pp r0.z, r0.y, c2.w
rcp r0.x, v3.w
mad r3.xy, v3, r0.x, c13.y
dp3 r0.x, v3, v3
mul_pp r2.xyz, r5, c3
texld r0.w, r3, s6
cmp r0.y, -v3.z, c9.x, c9
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.y, r0, r0.x
mul_pp r0.w, r0.z, r0.y
mov r0.x, c7
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r2, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 125 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v5.xyxy
mov r3.xyz, v5
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v5, c5.x
mul r3.xy, v5, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mad r2.w, r3, r2, c12.z
mul r0.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v5.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v5.y
cmp r1.y, v5.x, r1, -r1
mad r0.x, r1.y, c13, c13.y
add r0.y, -r0.w, c9
mad r0.z, r0.w, c9, c9.w
mad r0.z, r0.w, r0, c10.x
mad r0.z, r0.w, r0, c10.y
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v5.z, c9.x, c9.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c10.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v5.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c10, r1.y
mad r0.y, r0.w, c10.w, r0
mad r0.w, r2.x, c10, r0.z
mul r0.z, r0.y, c11.x
mul r0.y, r0.w, c11.x
dsx r2.xy, v5
mul r2.xy, r2, r2
dsy r1.xy, v5
mul r1.xy, r1, r1
dsx r2.w, r0.z
dsy r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
rcp r1.x, r1.x
mul r2.z, r1.x, c13.x
mul r2.xy, v5.zyzw, c8.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c13.x
texldd r4.xyz, r0, s0, r2.zwzw, r0.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v5, c8.x
texld r5, r4, s5
texld r6, r2, s5
texldd r0, r0, s3, r2.zwzw, r0.zwzw
add_pp r6, r6, -r5
mad_pp r5, r1.z, r6, r5
mul r1.xy, v5.zxzw, c8.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r3.xyz, r3, v1
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r2, r2, s4
add_pp r2, r2, -r4
mad_pp r2, r1.z, r2, r4
dp4 r3.w, c1, c1
texld r4, r1, s4
rsq r1.z, r3.w
mul r1.xyz, r1.z, c1
mul_pp r3.xyz, r3, c3
add_pp r4, r4, -r2
dp3_pp_sat r3.w, v4, r1
mad_pp r1, r1.w, r4, r2
mul_pp r1, r0, r1
add_pp r2.x, r3.w, c13.z
dp3 r0.x, v3, v3
mul_pp r0.z, r2.x, c2.w
texld r0.w, v3, s7
texld r0.x, r0.x, s6
mul r0.y, r0.x, r0.w
mul_pp r0.w, r0.z, r0.y
mov r0.x, c7
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r3, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 123 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v5.xyxy
mov r3.xyz, v5
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v5, c5.x
mul r3.xy, v5, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mad r2.w, r3, r2, c12.z
mul r0.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v5.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v5.y
cmp r1.y, v5.x, r1, -r1
mad r0.x, r1.y, c13, c13.y
add r0.y, -r0.w, c9
mad r0.z, r0.w, c9, c9.w
mad r0.z, r0.w, r0, c10.x
mad r0.z, r0.w, r0, c10.y
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v5.z, c9.x, c9.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c10.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v5.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c10, r1.y
mad r0.y, r0.w, c10.w, r0
mad r0.w, r2.x, c10, r0.z
mul r0.z, r0.y, c11.x
mul r0.y, r0.w, c11.x
dsx r2.xy, v5
mul r2.xy, r2, r2
dsy r1.xy, v5
mul r1.xy, r1, r1
dsx r2.w, r0.z
dsy r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
rcp r1.x, r1.x
mul r2.z, r1.x, c13.x
mul r2.xy, v5.zyzw, c8.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c13.x
texldd r4.xyz, r0, s0, r2.zwzw, r0.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v5, c8.x
texld r5, r4, s5
texld r6, r2, s5
texldd r0, r0, s3, r2.zwzw, r0.zwzw
add_pp r6, r6, -r5
mad_pp r5, r1.z, r6, r5
mul r1.xy, v5.zxzw, c8.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r3.xyz, r3, v1
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r2, r2, s4
add_pp r2, r2, -r4
mad_pp r2, r1.z, r2, r4
dp4_pp r3.w, c1, c1
texld r4, r1, s4
rsq_pp r1.z, r3.w
mul_pp r1.xyz, r1.z, c1
mul_pp r3.xyz, r3, c3
add_pp r4, r4, -r2
dp3_pp_sat r3.w, v4, r1
mad_pp r1, r1.w, r4, r2
mul_pp r1, r0, r1
add_pp r2.x, r3.w, c13.z
mul_pp r0.y, r2.x, c2.w
texld r0.w, v3, s6
mul_pp r0.w, r0.y, r0
mov r0.x, c7
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r3, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 134 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c15
max r2.w, r1.z, r0
mad_sat r1.y, r1, c15.z, c15.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c6.x
mul r3.xy, v6, c5.x
mad r3.w, r2, c12.y, c12.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c13.y
mul r0.xy, v6.zxzw, c6.x
mul r2.xy, v6.zxzw, c5.x
mad r2.w, r3, r2, c13.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c13.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c11.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c7
add_pp r2.xyz, -r0, c10.y
mul_sat r1.x, r1, c11.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c14, c14.y
add r0.y, -r0.w, c10
mad r0.z, r0.w, c10, c10.w
mad r0.z, r0.w, r0, c11.x
mad r0.z, r0.w, r0, c11.y
add r1.x, -r2, c10.y
mad r1.y, r2.x, c10.z, c10.w
mad r1.y, r1, r2.x, c11.x
mad r1.y, r1, r2.x, c11
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c10.x, c10.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c11.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c10, c10.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c11, r1.y
mad r0.y, r0.w, c11.w, r0
mad r0.w, r2.x, c11, r0.z
mul r0.z, r0.y, c12.x
mul r0.y, r0.w, c12.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsy r2.w, r0.z
dsx r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v6.zyzw, c9.x
rcp r1.y, r1.x
rsq r0.z, r0.z
rcp r1.x, r0.z
mul r2.z, r1.x, c14.x
mul r0.z, r1.y, c14.x
texldd r4.xyz, r0, s0, r0.zwzw, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v6, c9.x
texld r5, r3, s5
texld r6, r2, s5
texldd r0, r0, s3, r0.zwzw, r2.zwzw
add_pp r6, r6, -r5
mul r1.xy, v6.zxzw, c9.x
mad_pp r5, r1.z, r6, r5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
dp3_pp_sat r2.w, v5, r1
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
mul_pp r1, r0, r3
rcp r0.z, v3.w
mad r3.xy, v3, r0.z, c14.y
mul_pp r2.xyz, r5, c4
add_pp r2.w, r2, c14.z
texldp r0.x, v4, s8
rcp r0.y, v4.w
mad r0.y, -v4.z, r0, r0.x
mov r0.x, c2
cmp r0.y, r0, c10, r0.x
dp3 r0.x, v3, v3
texld r0.w, r3, s6
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r0.x, r0, r0.y
mul_pp r0.y, r2.w, c3.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r2.w, r0.y, c14
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r2.w, r0, c0
mad_pp r1.xyz, -r2, r0, r1
mul_pp_sat r0.w, r2, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_Color]
Float 5 [_DetailScale]
Float 6 [_DetailVertScale]
Float 7 [_DetailDist]
Float 8 [_MinLight]
Float 9 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 133 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c15, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c6.x
mul r1.xy, v6.zyzw, c5.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c15
max r2.w, r1.z, r0
mad_sat r1.y, r1, c15.z, c15.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c6.x
mul r3.xy, v6, c5.x
mad r3.w, r2, c12.y, c12.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c12.w
mad r3.w, r3.x, r2, c13.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c13.y
mul r0.xy, v6.zxzw, c6.x
mul r2.xy, v6.zxzw, c5.x
mad r2.w, r3, r2, c13.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c13.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c11.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c7
add_pp r2.xyz, -r0, c10.y
mul_sat r1.x, r1, c11.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c14, c14.y
add r0.y, -r0.w, c10
mad r0.z, r0.w, c10, c10.w
mad r0.z, r0.w, r0, c11.x
mad r0.z, r0.w, r0, c11.y
add r1.x, -r2, c10.y
mad r1.y, r2.x, c10.z, c10.w
mad r1.y, r1, r2.x, c11.x
mad r1.y, r1, r2.x, c11
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c10.x, c10.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c11.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c10, c10.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c11, r1.y
mad r0.y, r0.w, c11.w, r0
mad r0.w, r2.x, c11, r0.z
mul r0.z, r0.y, c12.x
mul r0.y, r0.w, c12.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsy r2.w, r0.z
dsx r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v6.zyzw, c9.x
rcp r1.y, r1.x
rsq r0.z, r0.z
rcp r1.x, r0.z
mul r2.z, r1.x, c14.x
mul r0.z, r1.y, c14.x
texldd r4.xyz, r0, s0, r0.zwzw, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v6, c9.x
texld r5, r3, s5
texld r6, r2, s5
texldd r0, r0, s3, r0.zwzw, r2.zwzw
add_pp r6, r6, -r5
mul r1.xy, v6.zxzw, c9.x
mad_pp r5, r1.z, r6, r5
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
dp4 r1.z, c1, c1
rsq r1.x, r1.z
mul r1.xyz, r1.x, c1
dp3_pp_sat r2.w, v5, r1
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
mul_pp r1, r0, r3
mov r0.x, c2
rcp r0.z, v3.w
mad r3.xy, v3, r0.z, c14.y
add r0.y, c10, -r0.x
texldp r0.x, v4, s8
mad r0.y, r0.x, r0, c2.x
dp3 r0.x, v3, v3
mul_pp r2.xyz, r5, c4
add_pp r2.w, r2, c14.z
texld r0.w, r3, s6
cmp r0.z, -v3, c10.x, c10.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r0.x, r0, r0.y
mul_pp r0.y, r2.w, c3.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r2.w, r0.y, c14
mov r0.x, c8
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r2.w, r0, c0
mad_pp r1.xyz, -r2, r0, r1
mul_pp_sat r0.w, r2, c15.x
add_pp r0.w, -r0, c10.y
mul_pp r0.xyz, r2, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 123 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mul r0.xy, v5.zyzw, c5.x
mul r1.xy, v5.zyzw, c4.x
abs r0.w, v5.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v5.xyxy
mov r3.xyz, v5
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v5, c5.x
mul r3.xy, v5, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mad r2.w, r3, r2, c12.z
mul r0.xy, v5.zxzw, c5.x
mul r2.xy, v5.zxzw, c4.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v5.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v5.y
cmp r1.y, v5.x, r1, -r1
mad r0.x, r1.y, c13, c13.y
add r0.y, -r0.w, c9
mad r0.z, r0.w, c9, c9.w
mad r0.z, r0.w, r0, c10.x
mad r0.z, r0.w, r0, c10.y
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v5.z, c9.x, c9.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c10.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v5.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c10, r1.y
mad r0.y, r0.w, c10.w, r0
mad r0.w, r2.x, c10, r0.z
mul r0.z, r0.y, c11.x
mul r0.y, r0.w, c11.x
dsx r2.xy, v5
mul r2.xy, r2, r2
dsy r1.xy, v5
mul r1.xy, r1, r1
dsx r2.w, r0.z
dsy r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
rcp r1.x, r1.x
mul r2.z, r1.x, c13.x
mul r2.xy, v5.zyzw, c8.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c13.x
texldd r4.xyz, r0, s0, r2.zwzw, r0.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v5, c8.x
texld r5, r4, s5
texld r6, r2, s5
texldd r0, r0, s3, r2.zwzw, r0.zwzw
add_pp r6, r6, -r5
mad_pp r5, r1.z, r6, r5
mul r1.xy, v5.zxzw, c8.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r3.xyz, r3, v1
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r2, r2, s4
add_pp r2, r2, -r4
mad_pp r2, r1.z, r2, r4
dp4_pp r3.w, c1, c1
texld r4, r1, s4
rsq_pp r1.z, r3.w
mul_pp r1.xyz, r1.z, c1
mul_pp r3.xyz, r3, c3
add_pp r4, r4, -r2
dp3_pp_sat r3.w, v4, r1
mad_pp r1, r1.w, r4, r2
mul_pp r1, r0, r1
add_pp r2.x, r3.w, c13.z
mul_pp r0.z, r2.x, c2.w
texldp r0.x, v3, s6
mul_pp r0.w, r0.z, r0.x
mov r0.y, c7.x
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.y
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r3, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_Color]
Float 4 [_DetailScale]
Float 5 [_DetailVertScale]
Float 6 [_DetailDist]
Float 7 [_MinLight]
Float 8 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 124 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c9, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c10, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c11, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c12, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c13, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c14, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c5.x
mul r1.xy, v6.zyzw, c4.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c14
max r2.w, r1.z, r0
mad_sat r1.y, r1, c14.z, c14.w
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c5.x
mul r3.xy, v6, c4.x
mad r3.w, r2, c11.y, c11.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c11.w
mad r3.w, r3.x, r2, c12.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c12.y
mad r2.w, r3, r2, c12.z
mul r0.xy, v6.zxzw, c5.x
mul r2.xy, v6.zxzw, c4.x
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c12.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c10.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c6
add_pp r2.xyz, -r0, c9.y
mul_sat r1.x, r1, c10.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c13, c13.y
add r0.y, -r0.w, c9
mad r0.z, r0.w, c9, c9.w
mad r0.z, r0.w, r0, c10.x
mad r0.z, r0.w, r0, c10.y
add r1.x, -r2, c9.y
mad r1.y, r2.x, c9.z, c9.w
mad r1.y, r1, r2.x, c10.x
mad r1.y, r1, r2.x, c10
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c9.x, c9.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c10.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c9, c9.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c10, r1.y
mad r0.y, r0.w, c10.w, r0
mad r0.w, r2.x, c10, r0.z
mul r0.z, r0.y, c11.x
mul r0.y, r0.w, c11.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsx r2.w, r0.z
dsy r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
rcp r1.x, r1.x
mul r2.z, r1.x, c13.x
mul r2.xy, v6.zyzw, c8.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c13.x
texldd r4.xyz, r0, s0, r2.zwzw, r0.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c8.x
texld r5, r4, s5
texld r6, r2, s5
texldd r0, r0, s3, r2.zwzw, r0.zwzw
add_pp r6, r6, -r5
mad_pp r5, r1.z, r6, r5
mul r1.xy, v6.zxzw, c8.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r3.xyz, r3, v1
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r2, r2, s4
add_pp r2, r2, -r4
mad_pp r2, r1.z, r2, r4
dp4_pp r3.w, c1, c1
texld r4, r1, s4
rsq_pp r1.z, r3.w
mul_pp r1.xyz, r1.z, c1
mul_pp r3.xyz, r3, c3
add_pp r4, r4, -r2
dp3_pp_sat r3.w, v5, r1
mad_pp r1, r1.w, r4, r2
mul_pp r1, r0, r1
add_pp r2.x, r3.w, c13.z
mul_pp r0.z, r2.x, c2.w
texldp r0.x, v4, s6
texld r0.w, v3, s7
mul r0.y, r0.w, r0.x
mul_pp r0.w, r0.z, r0.y
mov r0.x, c7
mul_pp_sat r0.w, r0, c13
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0.w, r0, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp_sat r0.w, r0, c14.x
add_pp r0.w, -r0, c9.y
mul_pp r0.xyz, r3, r0
mul_pp r0.w, r1, r0
mad_pp oC0.xyz, r0.w, r1, r0
mov_pp oC0.w, c9.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 133 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 0.97000003
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 4.03944778, 1.50000000, -0.94999999, 0
def c18, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c17.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r6.xy, v6
abs r0.w, v6.z
max r1.w, r6.x, r0
rcp r2.x, r1.w
min r1.w, r6.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c13, c13.z
mad r3.y, r3, r2.w, c13.w
mad r3.y, r3, r2.w, c14.x
mad r3.y, r3, r2.w, c14
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c18, c18.y
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
mad r2.w, r3.y, r2, c14.z
mul r1.y, r2.w, r1.w
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r6.y, r0, r2
add r1.x, r6, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
cmp r1.w, v6.x, r1, -r1
mul r2.x, v0, c8
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
mad r5.z, r1.w, c15.x, c15.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v6.y
cmp r0.w, v6.z, c11.x, c11.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.w, -r2.x, c12.z, r1
mad r0.z, r0.w, c12.w, r1.w
mul r0.y, r0.z, c13.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mul r5.w, r0.x, c13.x
dsx r4.w, r0.y
dsy r3.w, r0.y
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.x, c15.x
mul r3.z, r0.y, c15.x
texldd r0.xyz, r5.zwzw, s0, r4.zwzw, r3.zwzw
mul_pp r2.xyz, r0, r1
mul r5.xy, v6, c10.x
mul r4.xy, v6.zyzw, c10.x
texld r0, r5, s5
texld r1, r4, s5
add_pp r1, r1, -r0
mad_pp r1, r6.x, r1, r0
mul r3.xy, v6.zxzw, c10.x
texld r0, r3, s5
add_pp r0, r0, -r1
mad_pp r0, r6.y, r0, r1
texldd r1, r5.zwzw, s3, r4.zwzw, r3.zwzw
mul_pp r0, r1, r0
mul r2.xyz, r2, v1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r0.w, r0, r2
texld r5, r5, s4
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r6.x, r4, r5
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r2, r6.y, r3, r4
mul_pp r1, r1, r2
mul_pp r3.xyz, r0, c5
texld r0, v4, s6
dp4 r0.z, r0, c16
dp3 r2.x, v4, v4
rsq r2.x, r2.x
rcp r0.y, r2.x
mul r0.y, r0, c2.w
dp4 r0.x, c1, c1
mad r0.w, -r0.y, c15, r0.z
mov r2.x, c3
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_pp_sat r0.y, v5, r0
dp3 r0.x, v3, v3
cmp r0.w, r0, c11.y, r2.x
texld r0.x, r0.x, s7
mul r0.z, r0.x, r0.w
add_pp r0.y, r0, c15.z
mul_pp r0.x, r0.y, c4.w
mul_pp r0.x, r0, r0.z
mov r0.y, c9.x
mul_pp_sat r0.x, r0, c17
mul_pp_sat r0.w, r0.x, c17.y
add r2.xyz, c4, r0.y
mad_sat r0.xyz, r0.x, r2, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 134 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 0.97000003
def c16, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c17, 4.03944778, 1.50000000, -0.94999999, 0
def c18, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c17.z
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r6.xy, v6
abs r0.w, v6.z
max r1.w, r6.x, r0
rcp r2.x, r1.w
min r1.w, r6.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.y, r2.w, c13, c13.z
mad r3.y, r3, r2.w, c13.w
mad r3.y, r3, r2.w, c14.x
mad r3.y, r3, r2.w, c14
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.x, r2.y, c18, c18.y
mad r2.xyz, r3.x, r1, r0
mul r1.xy, v6, c7.x
mul r0.xy, v6, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r6.x, r1, r0
mul r1.xy, v6.zxzw, c7.x
mul r0.xy, v6.zxzw, c6.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.x, r0, r1
mad r2.w, r3.y, r2, c14.z
mul r1.y, r2.w, r1.w
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r6.y, r0, r2
add r1.x, r6, -r0.w
add r1.z, -r1.y, c14.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c12.w
cmp r1.w, v6.z, r1, r2.x
cmp r1.w, v6.x, r1, -r1
mul r2.x, v0, c8
add_pp r1.xyz, -r0, c11.y
mul_sat r2.x, r2, c12.z
mad_pp r1.xyz, r2.x, r1, r0
add r0.y, -r0.w, c11
mad r0.x, r0.w, c11.z, c11.w
mad r0.x, r0.w, r0, c12
mad r0.x, r0.w, r0, c12.y
rsq r0.y, r0.y
mad r5.z, r1.w, c15.x, c15.y
rcp r0.y, r0.y
mul r1.w, r0.x, r0.y
abs r0.x, v6.y
cmp r0.w, v6.z, c11.x, c11.y
mul r2.x, r0.w, r1.w
add r0.z, -r0.x, c11.y
mad r0.y, r0.x, c11.z, c11.w
mad r0.y, r0, r0.x, c12.x
rsq r0.z, r0.z
mad r0.x, r0.y, r0, c12.y
rcp r0.z, r0.z
mul r0.y, r0.x, r0.z
cmp r0.x, v6.y, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mad r1.w, -r2.x, c12.z, r1
mad r0.z, r0.w, c12.w, r1.w
mul r0.y, r0.z, c13.x
dsy r0.zw, v6.xyxy
mul r0.zw, r0, r0
mul r5.w, r0.x, c13.x
dsx r4.w, r0.y
dsy r3.w, r0.y
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r4.z, r0.x, c15.x
mul r3.z, r0.y, c15.x
texldd r0.xyz, r5.zwzw, s0, r4.zwzw, r3.zwzw
mul_pp r2.xyz, r0, r1
mul r5.xy, v6, c10.x
mul r4.xy, v6.zyzw, c10.x
texld r0, r5, s5
texld r1, r4, s5
add_pp r1, r1, -r0
mad_pp r1, r6.x, r1, r0
mul r3.xy, v6.zxzw, c10.x
texld r0, r3, s5
add_pp r0, r0, -r1
mad_pp r0, r6.y, r0, r1
texldd r1, r5.zwzw, s3, r4.zwzw, r3.zwzw
mul_pp r0, r1, r0
mul r2.xyz, r2, v1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r0.w, r0, r2
texld r5, r5, s4
texld r4, r4, s4
add_pp r4, r4, -r5
mad_pp r4, r6.x, r4, r5
texld r3, r3, s4
add_pp r3, r3, -r4
mad_pp r2, r6.y, r3, r4
mul_pp r1, r1, r2
mul_pp r3.xyz, r0, c5
texld r0, v4, s6
dp4 r0.z, r0, c16
dp3 r2.x, v4, v4
rsq r0.y, r2.x
dp4 r0.x, c1, c1
rcp r0.y, r0.y
mul r0.y, r0, c2.w
mad r0.w, -r0.y, c15, r0.z
rsq r0.x, r0.x
mul r0.xyz, r0.x, c1
dp3_pp_sat r0.x, v5, r0
add_pp r0.y, r0.x, c15.z
mov r2.x, c3
cmp r0.z, r0.w, c11.y, r2.x
dp3 r0.x, v3, v3
texld r0.w, v3, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r0.z, r0.x, r0
mul_pp r0.x, r0.y, c4.w
mul_pp r0.x, r0, r0.z
mov r0.y, c9.x
mul_pp_sat r0.x, r0, c17
mul_pp_sat r0.w, r0.x, c17.y
add r2.xyz, c4, r0.y
mad_sat r0.xyz, r0.x, r2, c0
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c11.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 142 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, -0.01000214, 0.25000000
def c19, 4.03944778, 1.50000000, -0.94999999, 0
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
abs r0.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c19.z
max r2.w, r1.z, r0
mad_sat r1.y, r1, c20.x, c20
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c10.x
mul r3.xy, v6, c9.x
mad r3.w, r2, c16.y, c16.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c16.w
mad r3.w, r3.x, r2, c17.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c17.y
mul r0.xy, v6.zxzw, c10.x
mul r2.xy, v6.zxzw, c9.x
mad r2.w, r3, r2, c17.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c17.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c15.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c11
add_pp r2.xyz, -r0, c14.y
mul_sat r1.x, r1, c15.z
mad_pp r3.xyz, r1.x, r2, r0
cmp r1.y, v6.x, r1, -r1
mad r2.z, r1.y, c18.x, c18.y
abs r1.y, v6
add r0.x, -r0.w, c14.y
mad r0.y, r0.w, c14.z, c14.w
mad r0.y, r0.w, r0, c15.x
mad r0.y, r0.w, r0, c15
add r0.w, -r1.y, c14.y
mad r1.x, r1.y, c14.z, c14.w
mad r1.x, r1, r1.y, c15
mad r1.x, r1, r1.y, c15.y
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r2.xy, v6
mul r0.y, r0, r0.x
cmp r0.z, v6, c14.x, c14.y
mul r0.x, r0.z, r0.y
mad r0.x, -r0, c15.z, r0.y
mad r0.x, r0.z, c15.w, r0
mul r2.xy, r2, r2
add r0.z, r2.x, r2.y
mul r2.xy, v6.zyzw, c13.x
mul r1.x, r1, r0.w
cmp r1.y, v6, c14.x, c14
mul r0.w, r1.y, r1.x
mad r0.y, -r0.w, c15.z, r1.x
mad r0.y, r1, c15.w, r0
mul r0.x, r0, c16
mul r2.w, r0.y, c16.x
dsy r1.xy, v6
mul r1.xy, r1, r1
dsx r0.y, r0.x
dsy r0.w, r0.x
add r0.x, r1, r1.y
rsq r0.z, r0.z
rcp r1.x, r0.z
rsq r0.x, r0.x
rcp r0.z, r0.x
mul r0.x, r1, c18
mul r0.z, r0, c18.x
texldd r4.xyz, r2.zwzw, s0, r0, r0.zwzw
mul_pp r3.xyz, r4, r3
mul r4.xy, v6, c13.x
texld r5, r4, s5
texld r6, r2, s5
texldd r0, r2.zwzw, s3, r0, r0.zwzw
add_pp r6, r6, -r5
mad_pp r5, r1.z, r6, r5
mul r1.xy, v6.zxzw, c13.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r3.xyz, r3, v1
add_pp r5.xyz, r5, -r3
mad_pp r3.xyz, r5.w, r5, r3
texld r4, r4, s4
texld r2, r2, s4
add_pp r2, r2, -r4
mad_pp r2, r1.z, r2, r4
texld r4, r1, s4
add_pp r4, r4, -r2
mad_pp r2, r1.w, r4, r2
rcp r1.w, v4.w
mul_pp r2, r0, r2
mul_pp r1.xyz, r3, c8
mad r0.xy, v4, r1.w, c6
mad r3.xy, v4, r1.w, c5
texld r0.x, r0, s8
texld r3.x, r3, s8
mov r3.z, r3.x
mad r3.xy, v4, r1.w, c3
mov r3.w, r0.x
mad r0.xy, v4, r1.w, c4
texld r3.x, r3, s8
texld r0.x, r0, s8
mov r3.y, r0.x
mad r0, -v4.z, r1.w, r3
mov r1.w, c2.x
cmp r0, r0, c14.y, r1.w
dp4_pp r0.y, r0, c18.w
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul r3.xyz, r3.x, c1
dp3_pp_sat r0.z, v5, r3
add_pp r1.w, r0.z, c18.z
rcp r0.x, v3.w
mad r3.xy, v3, r0.x, c18.y
dp3 r0.x, v3, v3
texld r0.w, r3, s6
cmp r0.z, -v3, c14.x, c14.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.z, r0
mul_pp r0.x, r0, r0.y
mul_pp r0.y, r1.w, c7.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r1.w, r0.y, c19.x
mov r0.x, c12
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r1.w, r0, c0
mad_pp r2.xyz, -r1, r0, r2
mul_pp_sat r0.w, r1, c19.y
add_pp r0.w, -r0, c14.y
mul_pp r0.xyz, r1, r0
mul_pp r0.w, r2, r0
mad_pp oC0.xyz, r0.w, r2, r0
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_Color]
Float 9 [_DetailScale]
Float 10 [_DetailVertScale]
Float 11 [_DetailDist]
Float 12 [_MinLight]
Float 13 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 142 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c14, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c15, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c16, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c17, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c18, 0.15915494, 0.50000000, -0.01000214, 0.25000000
def c19, 4.03944778, 1.50000000, -0.94999999, 0
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c10.x
mul r1.xy, v6.zyzw, c9.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c19.z
max r2.w, r1.z, r0
mad_sat r1.y, r1, c20.x, c20
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c10.x
mul r3.xy, v6, c9.x
mad r3.w, r2, c16.y, c16.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c16.w
mad r3.w, r3.x, r2, c17.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c17.y
mul r0.xy, v6.zxzw, c10.x
mul r2.xy, v6.zxzw, c9.x
mad r2.w, r3, r2, c17.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c17.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c15.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c11
add_pp r2.xyz, -r0, c14.y
mul_sat r1.x, r1, c15.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c18, c18.y
add r0.y, -r0.w, c14
mad r0.z, r0.w, c14, c14.w
mad r0.z, r0.w, r0, c15.x
mad r0.z, r0.w, r0, c15.y
add r1.x, -r2, c14.y
mad r1.y, r2.x, c14.z, c14.w
mad r1.y, r1, r2.x, c15.x
mad r1.y, r1, r2.x, c15
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c14.x, c14.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c15.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c14, c14.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c15, r1.y
mad r0.y, r0.w, c15.w, r0
mad r0.w, r2.x, c15, r0.z
mul r0.z, r0.y, c16.x
mul r0.y, r0.w, c16.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsx r2.w, r0.z
dsy r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
rcp r1.x, r1.x
mul r2.z, r1.x, c18.x
mul r2.xy, v6.zyzw, c13.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c18.x
texldd r4.xyz, r0, s0, r2.zwzw, r0.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v6, c13.x
texld r5, r3, s5
texld r6, r2, s5
add_pp r6, r6, -r5
texldd r0, r0, s3, r2.zwzw, r0.zwzw
mad_pp r5, r1.z, r6, r5
mul r1.xy, v6.zxzw, c13.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
rcp r2.w, v4.w
mad r1.xyz, v4, r2.w, c6
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
mul_pp r0, r0, r3
texld r1.x, r1, s8
mad r3.xyz, v4, r2.w, c5
mov_pp r1.w, r1.x
texld r1.x, r3, s8
mad r3.xyz, v4, r2.w, c4
mov_pp r1.z, r1.x
texld r1.x, r3, s8
mad r3.xyz, v4, r2.w, c3
mov_pp r1.y, r1.x
texld r1.x, r3, s8
mov r2.w, c2.x
add r2.w, c14.y, -r2
mad r1, r1, r2.w, c2.x
dp4_pp r1.y, r1, c18.w
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul r3.xyz, r3.x, c1
dp3_pp_sat r1.z, v5, r3
add_pp r2.w, r1.z, c18.z
rcp r1.x, v3.w
mad r3.xy, v3, r1.x, c18.y
dp3 r1.x, v3, v3
mul_pp r2.xyz, r5, c8
texld r1.w, r3, s6
cmp r1.z, -v3, c14.x, c14.y
mul_pp r1.z, r1, r1.w
texld r1.x, r1.x, s7
mul_pp r1.x, r1.z, r1
mul_pp r1.x, r1, r1.y
mul_pp r1.y, r2.w, c7.w
mul_pp r1.y, r1, r1.x
mul_pp_sat r2.w, r1.y, c19.x
mov r1.x, c12
add r1.xyz, c7, r1.x
mad_sat r1.xyz, r2.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r2, c19.y
add_pp r1.w, -r1, c14.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c14.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 141 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 0.00781250
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.03944778, 1.50000000, -0.94999999, 0
def c19, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c18.z
max r2.w, r1.z, r0
mad_sat r1.y, r1, c19.x, c19
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c7.x
mul r3.xy, v6, c6.x
mad r3.w, r2, c13.y, c13.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c13.w
mad r3.w, r3.x, r2, c14.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c14.y
mul r0.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
mad r2.w, r3, r2, c14.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c14.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c12.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c8
add_pp r2.xyz, -r0, c11.y
mul_sat r1.x, r1, c12.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c15, c15.y
add r0.y, -r0.w, c11
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
add r1.x, -r2, c11.y
mad r1.y, r2.x, c11.z, c11.w
mad r1.y, r1, r2.x, c12.x
mad r1.y, r1, r2.x, c12
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c11.x, c11.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c12.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c11, c11.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c12, r1.y
mad r0.y, r0.w, c12.w, r0
mad r0.w, r2.x, c12, r0.z
mul r0.z, r0.y, c13.x
mul r0.y, r0.w, c13.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsy r2.w, r0.z
dsx r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v6.zyzw, c10.x
rcp r1.y, r1.x
rsq r0.z, r0.z
rcp r1.x, r0.z
mul r2.z, r1.x, c15.x
mul r0.z, r1.y, c15.x
texldd r4.xyz, r0, s0, r0.zwzw, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v6, c10.x
texld r5, r3, s5
texld r6, r2, s5
add_pp r6, r6, -r5
texldd r0, r0, s3, r0.zwzw, r2.zwzw
mad_pp r5, r1.z, r6, r5
mul r1.xy, v6.zxzw, c10.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
mul_pp r0, r0, r3
add r1.xyz, v4, c16.xyyw
texld r1, r1, s6
dp4 r1.w, r1, c17
add r1.xyz, v4, c16.yyxw
texld r4, r1, s6
add r3.xyz, v4, c16.yxyw
texld r3, r3, s6
dp4 r1.z, r3, c17
dp3 r1.x, v4, v4
rsq r1.x, r1.x
rcp r2.w, r1.x
add r3.xyz, v4, c15.w
texld r3, r3, s6
dp4 r1.x, r3, c17
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul_pp r2.xyz, r5, c5
mul r2.w, r2, c2
dp4 r1.y, r4, c17
mad r1, -r2.w, c16.z, r1
mov r2.w, c3.x
cmp r1, r1, c11.y, r2.w
dp4_pp r1.y, r1, c16.w
mul r3.xyz, r3.x, c1
dp3_pp_sat r1.z, v5, r3
dp3 r1.x, v3, v3
texld r1.x, r1.x, s7
mul r1.x, r1, r1.y
add_pp r1.z, r1, c15
mul_pp r1.y, r1.z, c4.w
mul_pp r1.y, r1, r1.x
mul_pp_sat r2.w, r1.y, c18.x
mov r1.x, c9
add r1.xyz, c4, r1.x
mad_sat r1.xyz, r2.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r2, c18.y
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_Color]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 142 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 0.00781250
def c16, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c17, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c18, 4.03944778, 1.50000000, -0.94999999, 0
def c19, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
abs r0.w, v6.z
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r2.xyz, r1, -r0
abs r1.zw, v6.xyxy
mov r3.xyz, v6
dp3_sat r1.x, v2, -r3
add r1.y, r1.x, c18.z
max r2.w, r1.z, r0
mad_sat r1.y, r1, c19.x, c19
mad r2.xyz, r1.y, r2, r0
rcp r1.x, r2.w
min r2.w, r1.z, r0
mul r1.x, r2.w, r1
mul r2.w, r1.x, r1.x
mul r0.xy, v6, c7.x
mul r3.xy, v6, c6.x
mad r3.w, r2, c13.y, c13.z
texld r0.xyz, r0, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r0
mad r0.xyz, r1.y, r3, r0
mad r3.x, r3.w, r2.w, c13.w
mad r3.w, r3.x, r2, c14.x
add_pp r2.xyz, r2, -r0
mad_pp r3.xyz, r1.z, r2, r0
mad r3.w, r3, r2, c14.y
mul r0.xy, v6.zxzw, c7.x
mul r2.xy, v6.zxzw, c6.x
mad r2.w, r3, r2, c14.z
texld r0.xyz, r0, s1
texld r2.xyz, r2, s2
add r2.xyz, r2, -r0
mad r0.xyz, r1.y, r2, r0
mul r1.y, r2.w, r1.x
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
add r2.x, r1.z, -r0.w
add r1.x, -r1.y, c14.w
cmp r1.y, -r2.x, r1, r1.x
add r1.x, -r1.y, c12.w
cmp r1.y, v6.z, r1, r1.x
mul r1.x, v0, c8
add_pp r2.xyz, -r0, c11.y
mul_sat r1.x, r1, c12.z
mad_pp r3.xyz, r1.x, r2, r0
abs r2.x, v6.y
cmp r1.y, v6.x, r1, -r1
mad r0.x, r1.y, c15, c15.y
add r0.y, -r0.w, c11
mad r0.z, r0.w, c11, c11.w
mad r0.z, r0.w, r0, c12.x
mad r0.z, r0.w, r0, c12.y
add r1.x, -r2, c11.y
mad r1.y, r2.x, c11.z, c11.w
mad r1.y, r1, r2.x, c12.x
mad r1.y, r1, r2.x, c12
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r0.z, r0, r0.y
cmp r0.w, v6.z, c11.x, c11.y
mul r0.y, r0.w, r0.z
mad r0.y, -r0, c12.z, r0.z
mul r1.y, r1, r1.x
cmp r2.x, v6.y, c11, c11.y
mul r1.x, r2, r1.y
mad r0.z, -r1.x, c12, r1.y
mad r0.y, r0.w, c12.w, r0
mad r0.w, r2.x, c12, r0.z
mul r0.z, r0.y, c13.x
mul r0.y, r0.w, c13.x
dsx r2.xy, v6
mul r2.xy, r2, r2
dsy r1.xy, v6
mul r1.xy, r1, r1
dsy r2.w, r0.z
dsx r0.w, r0.z
add r0.z, r1.x, r1.y
add r2.x, r2, r2.y
rsq r1.x, r2.x
mul r2.xy, v6.zyzw, c10.x
rcp r1.y, r1.x
rsq r0.z, r0.z
rcp r1.x, r0.z
mul r2.z, r1.x, c15.x
mul r0.z, r1.y, c15.x
texldd r4.xyz, r0, s0, r0.zwzw, r2.zwzw
mul_pp r4.xyz, r4, r3
mul r3.xy, v6, c10.x
texld r5, r3, s5
texld r6, r2, s5
add_pp r6, r6, -r5
texldd r0, r0, s3, r0.zwzw, r2.zwzw
mad_pp r5, r1.z, r6, r5
mul r1.xy, v6.zxzw, c10.x
texld r6, r1, s5
add_pp r6, r6, -r5
mad_pp r5, r1.w, r6, r5
mul_pp r5, r0, r5
mul r4.xyz, r4, v1
add_pp r5.xyz, r5, -r4
texld r2, r2, s4
mad_pp r5.xyz, r5.w, r5, r4
texld r3, r3, s4
add_pp r4, r2, -r3
mad_pp r3, r1.z, r4, r3
texld r4, r1, s4
add_pp r4, r4, -r3
mad_pp r3, r1.w, r4, r3
mul_pp r0, r0, r3
add r1.xyz, v4, c16.xyyw
texld r1, r1, s6
dp4 r1.w, r1, c17
add r1.xyz, v4, c16.yyxw
texld r4, r1, s6
dp3 r1.x, v4, v4
rsq r2.w, r1.x
add r3.xyz, v4, c16.yxyw
texld r3, r3, s6
dp4 r1.z, r3, c17
add r3.xyz, v4, c15.w
texld r3, r3, s6
dp4 r1.x, r3, c17
rcp r2.w, r2.w
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul_pp r2.xyz, r5, c5
mul r2.w, r2, c2
dp4 r1.y, r4, c17
mad r1, -r2.w, c16.z, r1
mov r2.w, c3.x
cmp r1, r1, c11.y, r2.w
dp4_pp r1.y, r1, c16.w
mul r3.xyz, r3.x, c1
dp3_pp_sat r2.w, v5, r3
dp3 r1.x, v3, v3
add_pp r1.z, r2.w, c15
texld r1.w, v3, s8
texld r1.x, r1.x, s7
mul r1.x, r1, r1.w
mul r1.x, r1, r1.y
mul_pp r1.y, r1.z, c4.w
mul_pp r1.y, r1, r1.x
mul_pp_sat r2.w, r1.y, c18.x
mov r1.x, c9
add r1.xyz, c4, r1.x
mad_sat r1.xyz, r2.w, r1, c0
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r2, c18.y
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 195

	
		}
		
	} 
	
	FallBack "VertexLit"    // Use VertexLit's shadow caster/receiver passes.
}
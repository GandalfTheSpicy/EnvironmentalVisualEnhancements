Shader "Sphere/Planet" {
	Properties {
		_Color ("Color Tint", Color) = (1,1,1,1)
		_SpecColor ("Specular tint", Color) = (1,1,1,1)
		_Shininess ("Shininess", Float) = 10
		_MainTex ("Main (RGB)", 2D) = "white" {}
		_DetailTex ("Detail (RGB)", 2D) = "white" {}
		_DetailVertTex ("Detail for Vertical Surfaces (RGB)", 2D) = "white" {}
		_DetailScale ("Detail Scale", Range(0,1000)) = 200
		_DetailVertScale ("Detail Scale", Range(0,1000)) = 200
		_DetailDist ("Detail Distance", Range(0,1)) = 0.00875
		_MinLight ("Minimum Light", Range(0,1)) = .5
		_CityOverlayTex ("Overlay (RGB)", 2D) = "white" {}
		_CityOverlayDetailScale ("Overlay Detail Scale", Range(0,1000)) = 80
		_CityDarkOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
		_CityLightOverlayDetailTex ("Overlay Detail (RGB) (A)", 2D) = "white" {}
	}
	
SubShader {

Tags { "Queue"="Geometry" "RenderType"="Opaque" }
	Fog { Mode Global}
	ColorMask RGB
	Cull Back Lighting On ZWrite On
	
	Pass {

		Lighting On
		Tags { "LightMode"="ForwardBase"}
		
		Program "vp" {
// Vertex combos: 60
//   d3d9 - ALU: 26 to 35
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w;
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55)).w;
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  highp vec3 tmpvar_62;
  tmpvar_62 = (specularReflection_2 * (((tmpvar_56 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (light_3 + (main_16.w * tmpvar_62));
  light_3 = tmpvar_63;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55)).w;
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  highp vec3 tmpvar_62;
  tmpvar_62 = (specularReflection_2 * (((tmpvar_56 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (light_3 + (main_16.w * tmpvar_62));
  light_3 = tmpvar_63;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
#line 435
#line 419
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 423
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 427
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 431
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
#line 435
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 439
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 443
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    #line 448
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 452
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 456
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 460
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 464
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 468
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 472
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 476
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 480
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 484
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  vec3 i_20;
  i_20 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_20 - (2.0 * (dot (xlv_TEXCOORD5, i_20) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 26 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_position0 v0
dcl_normal0 v1
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r1.w, r1.w
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o5.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_55;
  tmpvar_55 = clamp (((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  mediump vec3 tmpvar_58;
  mediump vec3 i_59;
  i_59 = -(lightDirection_5);
  tmpvar_58 = (i_59 - (2.0 * (dot (normalDir_4, i_59) * normalDir_4)));
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_58, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_61;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_55;
  tmpvar_55 = clamp (((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  mediump vec3 tmpvar_58;
  mediump vec3 i_59;
  i_59 = -(lightDirection_5);
  tmpvar_58 = (i_59 - (2.0 * (dot (normalDir_4, i_59) * normalDir_4)));
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_58, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_61;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 406
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
#line 442
#line 416
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 420
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 424
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 429
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 406
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
#line 442
#line 431
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 433
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 437
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 442
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 446
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 450
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 454
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 458
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 462
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 466
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 470
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 474
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 478
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w);
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_54;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_55;
  tmpvar_55 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_56 = texture2D (_LightTexture0, P_57);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_56.w) * tmpvar_59.w);
  atten_4 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp ((((_LightColor0.w * ((tmpvar_55 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  light_3 = tmpvar_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = vec3(clamp (floor((1.0 + tmpvar_55)), 0.0, 1.0));
  specularReflection_2 = tmpvar_63;
  mediump vec3 tmpvar_64;
  mediump vec3 i_65;
  i_65 = -(lightDirection_6);
  tmpvar_64 = (i_65 - (2.0 * (dot (normalDir_5, i_65) * normalDir_5)));
  highp vec3 tmpvar_66;
  tmpvar_66 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_64, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (light_3 + (main_17.w * tmpvar_66));
  light_3 = tmpvar_67;
  color_19.xyz = (((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_54;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_55;
  tmpvar_55 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_56 = texture2D (_LightTexture0, P_57);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_56.w) * tmpvar_59.w);
  atten_4 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp ((((_LightColor0.w * ((tmpvar_55 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  light_3 = tmpvar_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = vec3(clamp (floor((1.0 + tmpvar_55)), 0.0, 1.0));
  specularReflection_2 = tmpvar_63;
  mediump vec3 tmpvar_64;
  mediump vec3 i_65;
  i_65 = -(lightDirection_6);
  tmpvar_64 = (i_65 - (2.0 * (dot (normalDir_5, i_65) * normalDir_5)));
  highp vec3 tmpvar_66;
  tmpvar_66 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_64, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (light_3 + (main_17.w * tmpvar_66));
  light_3 = tmpvar_67;
  color_19.xyz = (((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 428
#line 444
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 436
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 440
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 428
#line 444
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 448
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 452
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 455
lowp vec4 frag( in v2f IN ) {
    #line 457
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 461
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 465
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 469
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 473
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 477
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 481
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 485
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 489
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 493
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_56;
  tmpvar_56 = (texture2D (_LightTextureB0, vec2(tmpvar_55)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  highp vec3 tmpvar_62;
  tmpvar_62 = (specularReflection_2 * (((tmpvar_56 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (light_3 + (main_16.w * tmpvar_62));
  light_3 = tmpvar_63;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_56;
  tmpvar_56 = (texture2D (_LightTextureB0, vec2(tmpvar_55)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  highp vec3 tmpvar_62;
  tmpvar_62 = (specularReflection_2 * (((tmpvar_56 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (light_3 + (main_16.w * tmpvar_62));
  light_3 = tmpvar_63;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 436
#line 420
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 424
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 428
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 432
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 436
#line 436
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 440
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 444
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 447
lowp vec4 frag( in v2f IN ) {
    #line 449
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 453
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 457
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 461
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 465
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 469
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 473
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 477
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 481
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 485
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  mediump vec3 tmpvar_59;
  mediump vec3 i_60;
  i_60 = -(lightDirection_5);
  tmpvar_59 = (i_60 - (2.0 * (dot (normalDir_4, i_60) * normalDir_4)));
  highp vec3 tmpvar_61;
  tmpvar_61 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_59, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_61));
  light_3 = tmpvar_62;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  mediump vec3 tmpvar_59;
  mediump vec3 i_60;
  i_60 = -(lightDirection_5);
  tmpvar_59 = (i_60 - (2.0 * (dot (normalDir_4, i_60) * normalDir_4)));
  highp vec3 tmpvar_61;
  tmpvar_61 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_59, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_61));
  light_3 = tmpvar_62;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
#line 435
#line 419
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 423
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 427
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 431
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
#line 435
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 439
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 443
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    #line 448
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 452
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 456
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 460
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 464
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 468
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 472
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 476
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 480
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 484
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_25;
  if ((tmpvar_24.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  tmpvar_26 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_22.w) * tmpvar_23.w) * tmpvar_25);
  vec3 i_27;
  i_27 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_26), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_26 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump float shadow_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_65;
  if ((tmpvar_64.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  shadow_63 = tmpvar_65;
  tmpvar_62 = shadow_63;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  mediump vec3 i_71;
  i_71 = -(lightDirection_6);
  tmpvar_70 = (i_71 - (2.0 * (dot (normalDir_5, i_71) * normalDir_5)));
  highp vec3 tmpvar_72;
  tmpvar_72 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_70, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_17.w * tmpvar_72));
  light_3 = tmpvar_73;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump float shadow_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_65;
  if ((tmpvar_64.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  shadow_63 = tmpvar_65;
  tmpvar_62 = shadow_63;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  mediump vec3 i_71;
  i_71 = -(lightDirection_6);
  tmpvar_70 = (i_71 - (2.0 * (dot (normalDir_5, i_71) * normalDir_5)));
  highp vec3 tmpvar_72;
  tmpvar_72 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_70, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_17.w * tmpvar_72));
  light_3 = tmpvar_73;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 452
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 443
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 447
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 452
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 456
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 460
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 463
lowp vec4 frag( in v2f IN ) {
    #line 465
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 469
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 473
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 477
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 481
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 485
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 489
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 493
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 497
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 501
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))));
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_54;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_55;
  tmpvar_55 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_56 = texture2D (_LightTexture0, P_57);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp float tmpvar_60;
  mediump float shadow_61;
  lowp float tmpvar_62;
  tmpvar_62 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (_LightShadowData.x + (shadow_61 * (1.0 - _LightShadowData.x)));
  shadow_61 = tmpvar_63;
  tmpvar_60 = shadow_61;
  highp float tmpvar_64;
  tmpvar_64 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_56.w) * tmpvar_59.w) * tmpvar_60);
  atten_4 = tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp ((((_LightColor0.w * ((tmpvar_55 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_66;
  tmpvar_66 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_65)), 0.0, 1.0);
  light_3 = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = vec3(clamp (floor((1.0 + tmpvar_55)), 0.0, 1.0));
  specularReflection_2 = tmpvar_67;
  mediump vec3 tmpvar_68;
  mediump vec3 i_69;
  i_69 = -(lightDirection_6);
  tmpvar_68 = (i_69 - (2.0 * (dot (normalDir_5, i_69) * normalDir_5)));
  highp vec3 tmpvar_70;
  tmpvar_70 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_68, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (light_3 + (main_17.w * tmpvar_70));
  light_3 = tmpvar_71;
  color_19.xyz = (((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 453
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 444
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 448
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 474
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 478
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 482
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 486
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 490
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 494
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 498
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 502
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD5 = normalize((tmpvar_2 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20.x), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.50000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dp4 r0.w, v0, c3
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r2.xyz, r1, -r0
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o5.xyz, r0.z, r2
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r3.xyz, r0.xyww, c11.x
mov o0, r0
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mov r2.x, r3
mul r2.y, r3, c9.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mad o4.xy, r3.z, c10.zwzw, r2
mov o4.zw, r0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_55;
  mediump float lightShadowDataX_56;
  highp float dist_57;
  lowp float tmpvar_58;
  tmpvar_58 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = _LightShadowData.x;
  lightShadowDataX_56 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = max (float((dist_57 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_56);
  tmpvar_55 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  light_3 = tmpvar_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_63;
  mediump vec3 tmpvar_64;
  mediump vec3 i_65;
  i_65 = -(lightDirection_5);
  tmpvar_64 = (i_65 - (2.0 * (dot (normalDir_4, i_65) * normalDir_4)));
  highp vec3 tmpvar_66;
  tmpvar_66 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_64, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (light_3 + (main_16.w * tmpvar_66));
  light_3 = tmpvar_67;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_5;
  p_5 = (tmpvar_4 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_6;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD5 = normalize((tmpvar_4 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_55.x), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  mediump vec3 tmpvar_59;
  mediump vec3 i_60;
  i_60 = -(lightDirection_5);
  tmpvar_59 = (i_60 - (2.0 * (dot (normalDir_4, i_60) * normalDir_4)));
  highp vec3 tmpvar_61;
  tmpvar_61 = (specularReflection_2 * (((tmpvar_55.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_59, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_61));
  light_3 = tmpvar_62;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 425
#line 441
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 433
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 437
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 425
#line 441
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 445
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 449
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    #line 454
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 458
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 462
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 466
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 470
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 474
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 478
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 482
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 486
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 490
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_4;
  xlv_TEXCOORD5 = normalize((tmpvar_2 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.50000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
dp4 r0.w, v0, c3
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r2.xyz, r1, -r0
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o6.xyz, r0.z, r2
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r3.xyz, r0.xyww, c15.x
mov o0, r0
dp4 r0.y, v0, v0
mul r2.y, r3, c13.x
mov r2.x, r3
mad o5.xy, r3.z, c14.zwzw, r2
add r2.xyz, -r1, c12
dp3 r1.w, r2, r2
rsq r0.x, r1.w
dp4 r1.w, v0, c7
mul o2.xyz, r0.x, r2
rcp o1.x, r0.x
dp3 r0.x, v1, v1
rsq r0.x, r0.x
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_55;
  mediump float lightShadowDataX_56;
  highp float dist_57;
  lowp float tmpvar_58;
  tmpvar_58 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = _LightShadowData.x;
  lightShadowDataX_56 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = max (float((dist_57 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_56);
  tmpvar_55 = tmpvar_60;
  lowp float tmpvar_61;
  tmpvar_61 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_55);
  mediump float tmpvar_62;
  tmpvar_62 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_61), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_62)), 0.0, 1.0);
  light_3 = tmpvar_63;
  mediump vec3 tmpvar_64;
  tmpvar_64 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_64;
  mediump vec3 tmpvar_65;
  mediump vec3 i_66;
  i_66 = -(lightDirection_5);
  tmpvar_65 = (i_66 - (2.0 * (dot (normalDir_4, i_66) * normalDir_4)));
  highp vec3 tmpvar_67;
  tmpvar_67 = (specularReflection_2 * (((tmpvar_61 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_65, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_3 + (main_16.w * tmpvar_67));
  light_3 = tmpvar_68;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_5;
  p_5 = (tmpvar_4 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_6;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_7;
  xlv_TEXCOORD5 = normalize((tmpvar_4 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_55;
  tmpvar_55 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  mediump vec3 tmpvar_59;
  mediump vec3 i_60;
  i_60 = -(lightDirection_5);
  tmpvar_59 = (i_60 - (2.0 * (dot (normalDir_4, i_60) * normalDir_4)));
  highp vec3 tmpvar_61;
  tmpvar_61 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_59, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_61));
  light_3 = tmpvar_62;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 428
#line 445
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 436
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 440
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 428
#line 445
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 449
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 453
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    #line 458
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 462
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 466
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 470
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 474
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 478
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 482
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 486
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 490
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 494
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_23;
  tmpvar_23 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_24;
  tmpvar_24 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_25;
  if ((tmpvar_24 < tmpvar_23)) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  tmpvar_26 = (tmpvar_22.w * tmpvar_25);
  vec3 i_27;
  i_27 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_26), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_26 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_61;
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = dot (packDist_61, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  tmpvar_65 = (tmpvar_59.w * tmpvar_64);
  atten_4 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  mediump vec3 i_70;
  i_70 = -(lightDirection_6);
  tmpvar_69 = (i_70 - (2.0 * (dot (normalDir_5, i_70) * normalDir_5)));
  highp vec3 tmpvar_71;
  tmpvar_71 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_69, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_3 + (main_17.w * tmpvar_71));
  light_3 = tmpvar_72;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_61;
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = dot (packDist_61, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  tmpvar_65 = (tmpvar_59.w * tmpvar_64);
  atten_4 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  mediump vec3 i_70;
  i_70 = -(lightDirection_6);
  tmpvar_69 = (i_70 - (2.0 * (dot (normalDir_5, i_70) * normalDir_5)));
  highp vec3 tmpvar_71;
  tmpvar_71 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_69, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_3 + (main_17.w * tmpvar_71));
  light_3 = tmpvar_72;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 433
#line 450
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 441
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 445
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 433
#line 450
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 454
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 458
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 461
lowp vec4 frag( in v2f IN ) {
    #line 463
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 467
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 471
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 475
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 479
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 483
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 487
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 491
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 495
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 499
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_23;
  tmpvar_23 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_24;
  tmpvar_24 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_25;
  tmpvar_25 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_26;
  if ((tmpvar_25 < tmpvar_24)) {
    tmpvar_26 = _LightShadowData.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  tmpvar_27 = ((tmpvar_22.w * tmpvar_23.w) * tmpvar_26);
  vec3 i_28;
  i_28 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (xlv_TEXCOORD5, i_28) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_65);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  mediump vec3 i_71;
  i_71 = -(lightDirection_6);
  tmpvar_70 = (i_71 - (2.0 * (dot (normalDir_5, i_71) * normalDir_5)));
  highp vec3 tmpvar_72;
  tmpvar_72 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_70, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_17.w * tmpvar_72));
  light_3 = tmpvar_73;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_65);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  mediump vec3 i_71;
  i_71 = -(lightDirection_6);
  tmpvar_70 = (i_71 - (2.0 * (dot (normalDir_5, i_71) * normalDir_5)));
  highp vec3 tmpvar_72;
  tmpvar_72 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_70, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_17.w * tmpvar_72));
  light_3 = tmpvar_73;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 434
#line 451
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 442
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 446
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 434
#line 451
#line 451
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 455
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 459
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 462
lowp vec4 frag( in v2f IN ) {
    #line 464
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 468
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 472
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 476
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 480
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 484
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 488
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 492
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 496
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 500
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_24;
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_24.x = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_24.y = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_24.z = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_24.w = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_24, tmpvar_25.zzzz);
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_22.w) * tmpvar_23.w) * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_34;
  i_34 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_33), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_33 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_34 - (2.0 * (dot (xlv_TEXCOORD5, i_34) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_66;
  P_66 = (tmpvar_65.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_67;
  tmpvar_67 = texture2D (_ShadowMapTexture, P_66).x;
  shadowVals_64.x = tmpvar_67;
  highp vec2 P_68;
  P_68 = (tmpvar_65.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_64.y = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_65.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_64.z = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_65.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_64.w = tmpvar_73;
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_64, tmpvar_65.zzzz);
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_63 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  mediump vec3 tmpvar_86;
  mediump vec3 i_87;
  i_87 = -(lightDirection_6);
  tmpvar_86 = (i_87 - (2.0 * (dot (normalDir_5, i_87) * normalDir_5)));
  highp vec3 tmpvar_88;
  tmpvar_88 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_86, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 + (main_17.w * tmpvar_88));
  light_3 = tmpvar_89;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_66;
  P_66 = (tmpvar_65.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_67;
  tmpvar_67 = texture2D (_ShadowMapTexture, P_66).x;
  shadowVals_64.x = tmpvar_67;
  highp vec2 P_68;
  P_68 = (tmpvar_65.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_64.y = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_65.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_64.z = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_65.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_64.w = tmpvar_73;
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_64, tmpvar_65.zzzz);
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_63 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  mediump vec3 tmpvar_86;
  mediump vec3 i_87;
  i_87 = -(lightDirection_6);
  tmpvar_86 = (i_87 - (2.0 * (dot (normalDir_5, i_87) * normalDir_5)));
  highp vec3 tmpvar_88;
  tmpvar_88 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_86, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 + (main_17.w * tmpvar_88));
  light_3 = tmpvar_89;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
#line 460
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 451
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 455
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 493
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 497
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 501
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 505
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 509
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  vec4 shadows_20;
  vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_20.x = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[0].xyz)).x;
  shadows_20.y = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[1].xyz)).x;
  shadows_20.z = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[2].xyz)).x;
  shadows_20.w = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_22;
  tmpvar_22 = (_LightShadowData.xxxx + (shadows_20 * (1.0 - _LightShadowData.xxxx)));
  shadows_20 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_22, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_24;
  i_24 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_23), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_23 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_24 - (2.0 * (dot (xlv_TEXCOORD5, i_24) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_54;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_55;
  tmpvar_55 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_56 = texture2D (_LightTexture0, P_57);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp float tmpvar_60;
  mediump vec4 shadows_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_63;
  coord_63 = (tmpvar_62 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_64;
  tmpvar_64 = shadow2DEXT (_ShadowMapTexture, coord_63);
  shadows_61.x = tmpvar_64;
  highp vec3 coord_65;
  coord_65 = (tmpvar_62 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_66;
  tmpvar_66 = shadow2DEXT (_ShadowMapTexture, coord_65);
  shadows_61.y = tmpvar_66;
  highp vec3 coord_67;
  coord_67 = (tmpvar_62 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_68;
  tmpvar_68 = shadow2DEXT (_ShadowMapTexture, coord_67);
  shadows_61.z = tmpvar_68;
  highp vec3 coord_69;
  coord_69 = (tmpvar_62 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_70;
  tmpvar_70 = shadow2DEXT (_ShadowMapTexture, coord_69);
  shadows_61.w = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (_LightShadowData.xxxx + (shadows_61 * (1.0 - _LightShadowData.xxxx)));
  shadows_61 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = dot (shadows_61, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_56.w) * tmpvar_59.w) * tmpvar_60);
  atten_4 = tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * ((tmpvar_55 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + tmpvar_55)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  mediump vec3 tmpvar_77;
  mediump vec3 i_78;
  i_78 = -(lightDirection_6);
  tmpvar_77 = (i_78 - (2.0 * (dot (normalDir_5, i_78) * normalDir_5)));
  highp vec3 tmpvar_79;
  tmpvar_79 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_77, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 + (main_17.w * tmpvar_79));
  light_3 = tmpvar_80;
  color_19.xyz = (((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
#line 460
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 451
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 455
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 493
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 497
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 501
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 505
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 509
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_23;
  shadowVals_23.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_24;
  tmpvar_24 = lessThan (shadowVals_23, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_25;
  tmpvar_25 = _LightShadowData.xxxx;
  float tmpvar_26;
  if (tmpvar_24.x) {
    tmpvar_26 = tmpvar_25.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_24.y) {
    tmpvar_27 = tmpvar_25.y;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_24.z) {
    tmpvar_28 = tmpvar_25.z;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_24.w) {
    tmpvar_29 = tmpvar_25.w;
  } else {
    tmpvar_29 = 1.0;
  };
  vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_26;
  tmpvar_30.y = tmpvar_27;
  tmpvar_30.z = tmpvar_28;
  tmpvar_30.w = tmpvar_29;
  float tmpvar_31;
  tmpvar_31 = (tmpvar_22.w * dot (tmpvar_30, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_32;
  i_32 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (xlv_TEXCOORD5, i_32) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  mediump vec4 shadows_61;
  highp vec4 shadowVals_62;
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_62.x = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_62.y = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_62.z = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_62.w = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_62, vec4(tmpvar_63));
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_61 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_61, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (tmpvar_59.w * tmpvar_60);
  atten_4 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_6);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_5, i_89) * normalDir_5)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_17.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  mediump vec4 shadows_61;
  highp vec4 shadowVals_62;
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_62.x = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_62.y = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_62.z = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_62.w = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_62, vec4(tmpvar_63));
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_61 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_61, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (tmpvar_59.w * tmpvar_60);
  atten_4 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_6);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_5, i_89) * normalDir_5)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_17.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 439
#line 456
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 447
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 451
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 439
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 489
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 493
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 497
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 501
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 505
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_23;
  tmpvar_23 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_24;
  shadowVals_24.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_25;
  tmpvar_25 = lessThan (shadowVals_24, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_26;
  tmpvar_26 = _LightShadowData.xxxx;
  float tmpvar_27;
  if (tmpvar_25.x) {
    tmpvar_27 = tmpvar_26.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_25.y) {
    tmpvar_28 = tmpvar_26.y;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_25.z) {
    tmpvar_29 = tmpvar_26.z;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_25.w) {
    tmpvar_30 = tmpvar_26.w;
  } else {
    tmpvar_30 = 1.0;
  };
  vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_27;
  tmpvar_31.y = tmpvar_28;
  tmpvar_31.z = tmpvar_29;
  tmpvar_31.w = tmpvar_30;
  float tmpvar_32;
  tmpvar_32 = ((tmpvar_22.w * tmpvar_23.w) * dot (tmpvar_31, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_33;
  i_33 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_32), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_32 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_33 - (2.0 * (dot (xlv_TEXCOORD5, i_33) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_61);
  atten_4 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_6);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_5, i_90) * normalDir_5)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_17.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_61);
  atten_4 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_6);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_5, i_90) * normalDir_5)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_17.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 440
#line 457
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 448
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 440
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 490
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 494
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 498
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 502
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 506
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w;
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55)).w;
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  highp vec3 tmpvar_62;
  tmpvar_62 = (specularReflection_2 * (((tmpvar_56 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (light_3 + (main_16.w * tmpvar_62));
  light_3 = tmpvar_63;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_56;
  tmpvar_56 = texture2D (_LightTexture0, vec2(tmpvar_55)).w;
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  highp vec3 tmpvar_62;
  tmpvar_62 = (specularReflection_2 * (((tmpvar_56 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (light_3 + (main_16.w * tmpvar_62));
  light_3 = tmpvar_63;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
#line 435
#line 419
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 423
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 427
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 431
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
#line 435
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 439
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 443
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    #line 448
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 452
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 456
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 460
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 464
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 468
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 472
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 476
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 480
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 484
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  vec3 i_20;
  i_20 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp (((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_20 - (2.0 * (dot (xlv_TEXCOORD5, i_20) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 26 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_position0 v0
dcl_normal0 v1
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r1.w, r1.w
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o5.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_55;
  tmpvar_55 = clamp (((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  mediump vec3 tmpvar_58;
  mediump vec3 i_59;
  i_59 = -(lightDirection_5);
  tmpvar_58 = (i_59 - (2.0 * (dot (normalDir_4, i_59) * normalDir_4)));
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_58, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_61;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_55;
  tmpvar_55 = clamp (((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_56;
  tmpvar_56 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_55)), 0.0, 1.0);
  light_3 = tmpvar_56;
  mediump vec3 tmpvar_57;
  tmpvar_57 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_57;
  mediump vec3 tmpvar_58;
  mediump vec3 i_59;
  i_59 = -(lightDirection_5);
  tmpvar_58 = (i_59 - (2.0 * (dot (normalDir_4, i_59) * normalDir_4)));
  highp vec3 tmpvar_60;
  tmpvar_60 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_58, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_60;
  highp vec3 tmpvar_61;
  tmpvar_61 = (light_3 + (main_16.w * tmpvar_60));
  light_3 = tmpvar_61;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 406
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
#line 442
#line 416
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 420
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 424
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 429
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 406
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 400
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 416
#line 442
#line 431
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 433
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 437
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 442
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 446
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 450
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 454
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 458
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    #line 462
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    #line 466
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 470
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 474
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 478
    color.xyz *= light;
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w);
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_54;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_55;
  tmpvar_55 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_56 = texture2D (_LightTexture0, P_57);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_56.w) * tmpvar_59.w);
  atten_4 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp ((((_LightColor0.w * ((tmpvar_55 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  light_3 = tmpvar_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = vec3(clamp (floor((1.0 + tmpvar_55)), 0.0, 1.0));
  specularReflection_2 = tmpvar_63;
  mediump vec3 tmpvar_64;
  mediump vec3 i_65;
  i_65 = -(lightDirection_6);
  tmpvar_64 = (i_65 - (2.0 * (dot (normalDir_5, i_65) * normalDir_5)));
  highp vec3 tmpvar_66;
  tmpvar_66 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_64, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (light_3 + (main_17.w * tmpvar_66));
  light_3 = tmpvar_67;
  color_19.xyz = (((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_54;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_55;
  tmpvar_55 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_56 = texture2D (_LightTexture0, P_57);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_56.w) * tmpvar_59.w);
  atten_4 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp ((((_LightColor0.w * ((tmpvar_55 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  light_3 = tmpvar_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = vec3(clamp (floor((1.0 + tmpvar_55)), 0.0, 1.0));
  specularReflection_2 = tmpvar_63;
  mediump vec3 tmpvar_64;
  mediump vec3 i_65;
  i_65 = -(lightDirection_6);
  tmpvar_64 = (i_65 - (2.0 * (dot (normalDir_5, i_65) * normalDir_5)));
  highp vec3 tmpvar_66;
  tmpvar_66 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_64, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (light_3 + (main_17.w * tmpvar_66));
  light_3 = tmpvar_67;
  color_19.xyz = (((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 428
#line 444
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 436
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 440
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 417
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 411
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 428
#line 444
#line 444
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 448
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 452
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 455
lowp vec4 frag( in v2f IN ) {
    #line 457
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 461
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 465
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 469
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 473
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 477
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 481
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 485
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 489
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 493
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_56;
  tmpvar_56 = (texture2D (_LightTextureB0, vec2(tmpvar_55)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  highp vec3 tmpvar_62;
  tmpvar_62 = (specularReflection_2 * (((tmpvar_56 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (light_3 + (main_16.w * tmpvar_62));
  light_3 = tmpvar_63;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_55;
  tmpvar_55 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_56;
  tmpvar_56 = (texture2D (_LightTextureB0, vec2(tmpvar_55)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_57;
  tmpvar_57 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_56), 0.0, 1.0);
  highp vec3 tmpvar_58;
  tmpvar_58 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_57)), 0.0, 1.0);
  light_3 = tmpvar_58;
  mediump vec3 tmpvar_59;
  tmpvar_59 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_59;
  mediump vec3 tmpvar_60;
  mediump vec3 i_61;
  i_61 = -(lightDirection_5);
  tmpvar_60 = (i_61 - (2.0 * (dot (normalDir_4, i_61) * normalDir_4)));
  highp vec3 tmpvar_62;
  tmpvar_62 = (specularReflection_2 * (((tmpvar_56 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_60, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_62;
  highp vec3 tmpvar_63;
  tmpvar_63 = (light_3 + (main_16.w * tmpvar_62));
  light_3 = tmpvar_63;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 436
#line 420
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 424
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 428
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 432
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 409
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 403
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 420
#line 436
#line 436
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 440
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 444
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 447
lowp vec4 frag( in v2f IN ) {
    #line 449
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 453
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 457
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 461
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 465
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 469
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 473
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 477
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 481
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 485
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  mediump vec3 tmpvar_59;
  mediump vec3 i_60;
  i_60 = -(lightDirection_5);
  tmpvar_59 = (i_60 - (2.0 * (dot (normalDir_4, i_60) * normalDir_4)));
  highp vec3 tmpvar_61;
  tmpvar_61 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_59, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_61));
  light_3 = tmpvar_62;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_55;
  tmpvar_55 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  mediump vec3 tmpvar_59;
  mediump vec3 i_60;
  i_60 = -(lightDirection_5);
  tmpvar_59 = (i_60 - (2.0 * (dot (normalDir_4, i_60) * normalDir_4)));
  highp vec3 tmpvar_61;
  tmpvar_61 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_59, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_61));
  light_3 = tmpvar_62;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
#line 435
#line 419
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 423
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 427
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 431
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 408
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 402
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 419
#line 435
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 439
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 443
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    #line 448
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 452
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 456
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 460
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 464
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 468
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 472
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 476
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 480
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 484
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_24;
  tmpvar_24 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_25;
  if ((tmpvar_24.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  tmpvar_26 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_22.w) * tmpvar_23.w) * tmpvar_25);
  vec3 i_27;
  i_27 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_26), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_26 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump float shadow_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_65;
  if ((tmpvar_64.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  shadow_63 = tmpvar_65;
  tmpvar_62 = shadow_63;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  mediump vec3 i_71;
  i_71 = -(lightDirection_6);
  tmpvar_70 = (i_71 - (2.0 * (dot (normalDir_5, i_71) * normalDir_5)));
  highp vec3 tmpvar_72;
  tmpvar_72 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_70, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_17.w * tmpvar_72));
  light_3 = tmpvar_73;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump float shadow_63;
  lowp vec4 tmpvar_64;
  tmpvar_64 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_65;
  if ((tmpvar_64.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  shadow_63 = tmpvar_65;
  tmpvar_62 = shadow_63;
  highp float tmpvar_66;
  tmpvar_66 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  mediump vec3 i_71;
  i_71 = -(lightDirection_6);
  tmpvar_70 = (i_71 - (2.0 * (dot (normalDir_5, i_71) * normalDir_5)));
  highp vec3 tmpvar_72;
  tmpvar_72 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_70, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_17.w * tmpvar_72));
  light_3 = tmpvar_73;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 452
#line 435
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 439
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 443
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 447
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 423
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 417
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 435
#line 452
#line 452
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 456
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 460
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 463
lowp vec4 frag( in v2f IN ) {
    #line 465
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 469
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 473
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 477
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 481
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 485
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 489
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 493
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 497
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 501
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))));
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_54;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_55;
  tmpvar_55 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_56 = texture2D (_LightTexture0, P_57);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp float tmpvar_60;
  mediump float shadow_61;
  lowp float tmpvar_62;
  tmpvar_62 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = (_LightShadowData.x + (shadow_61 * (1.0 - _LightShadowData.x)));
  shadow_61 = tmpvar_63;
  tmpvar_60 = shadow_61;
  highp float tmpvar_64;
  tmpvar_64 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_56.w) * tmpvar_59.w) * tmpvar_60);
  atten_4 = tmpvar_64;
  mediump float tmpvar_65;
  tmpvar_65 = clamp ((((_LightColor0.w * ((tmpvar_55 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_66;
  tmpvar_66 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_65)), 0.0, 1.0);
  light_3 = tmpvar_66;
  mediump vec3 tmpvar_67;
  tmpvar_67 = vec3(clamp (floor((1.0 + tmpvar_55)), 0.0, 1.0));
  specularReflection_2 = tmpvar_67;
  mediump vec3 tmpvar_68;
  mediump vec3 i_69;
  i_69 = -(lightDirection_6);
  tmpvar_68 = (i_69 - (2.0 * (dot (normalDir_5, i_69) * normalDir_5)));
  highp vec3 tmpvar_70;
  tmpvar_70 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_68, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = (light_3 + (main_17.w * tmpvar_70));
  light_3 = tmpvar_71;
  color_19.xyz = (((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 453
#line 436
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 440
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 444
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 448
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 424
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 418
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 436
#line 453
#line 453
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 457
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 461
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 464
lowp vec4 frag( in v2f IN ) {
    #line 466
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 470
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 474
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 478
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 482
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 486
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 490
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 494
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 498
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 502
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD5 = normalize((tmpvar_2 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  vec4 tmpvar_20;
  tmpvar_20 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20.x), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.50000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dp4 r0.w, v0, c3
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r2.xyz, r1, -r0
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o5.xyz, r0.z, r2
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r3.xyz, r0.xyww, c11.x
mov o0, r0
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mov r2.x, r3
mul r2.y, r3, c9.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mad o4.xy, r3.z, c10.zwzw, r2
mov o4.zw, r0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_55;
  mediump float lightShadowDataX_56;
  highp float dist_57;
  lowp float tmpvar_58;
  tmpvar_58 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = _LightShadowData.x;
  lightShadowDataX_56 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = max (float((dist_57 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_56);
  tmpvar_55 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_62;
  tmpvar_62 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_61)), 0.0, 1.0);
  light_3 = tmpvar_62;
  mediump vec3 tmpvar_63;
  tmpvar_63 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_63;
  mediump vec3 tmpvar_64;
  mediump vec3 i_65;
  i_65 = -(lightDirection_5);
  tmpvar_64 = (i_65 - (2.0 * (dot (normalDir_4, i_65) * normalDir_4)));
  highp vec3 tmpvar_66;
  tmpvar_66 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_64, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_66;
  highp vec3 tmpvar_67;
  tmpvar_67 = (light_3 + (main_16.w * tmpvar_66));
  light_3 = tmpvar_67;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_5;
  p_5 = (tmpvar_4 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_6;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD5 = normalize((tmpvar_4 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_55.x), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  mediump vec3 tmpvar_59;
  mediump vec3 i_60;
  i_60 = -(lightDirection_5);
  tmpvar_59 = (i_60 - (2.0 * (dot (normalDir_4, i_60) * normalDir_4)));
  highp vec3 tmpvar_61;
  tmpvar_61 = (specularReflection_2 * (((tmpvar_55.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_59, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_61));
  light_3 = tmpvar_62;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 425
#line 441
#line 425
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 429
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 433
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 437
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 414
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 408
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 425
#line 441
#line 441
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 445
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 449
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 452
lowp vec4 frag( in v2f IN ) {
    #line 454
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 458
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 462
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 466
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 470
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 474
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 478
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 482
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 486
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 490
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_4;
  xlv_TEXCOORD5 = normalize((tmpvar_2 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  vec3 i_21;
  i_21 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_20), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_20 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_21 - (2.0 * (dot (xlv_TEXCOORD5, i_21) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.50000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
dp4 r0.w, v0, c3
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r2.xyz, r1, -r0
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o6.xyz, r0.z, r2
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r3.xyz, r0.xyww, c15.x
mov o0, r0
dp4 r0.y, v0, v0
mul r2.y, r3, c13.x
mov r2.x, r3
mad o5.xy, r3.z, c14.zwzw, r2
add r2.xyz, -r1, c12
dp3 r1.w, r2, r2
rsq r0.x, r1.w
dp4 r1.w, v0, c7
mul o2.xyz, r0.x, r2
rcp o1.x, r0.x
dp3 r0.x, v1, v1
rsq r0.x, r0.x
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_55;
  mediump float lightShadowDataX_56;
  highp float dist_57;
  lowp float tmpvar_58;
  tmpvar_58 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_57 = tmpvar_58;
  highp float tmpvar_59;
  tmpvar_59 = _LightShadowData.x;
  lightShadowDataX_56 = tmpvar_59;
  highp float tmpvar_60;
  tmpvar_60 = max (float((dist_57 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_56);
  tmpvar_55 = tmpvar_60;
  lowp float tmpvar_61;
  tmpvar_61 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_55);
  mediump float tmpvar_62;
  tmpvar_62 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_61), 0.0, 1.0);
  highp vec3 tmpvar_63;
  tmpvar_63 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_62)), 0.0, 1.0);
  light_3 = tmpvar_63;
  mediump vec3 tmpvar_64;
  tmpvar_64 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_64;
  mediump vec3 tmpvar_65;
  mediump vec3 i_66;
  i_66 = -(lightDirection_5);
  tmpvar_65 = (i_66 - (2.0 * (dot (normalDir_4, i_66) * normalDir_4)));
  highp vec3 tmpvar_67;
  tmpvar_67 = (specularReflection_2 * (((tmpvar_61 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_65, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_67;
  highp vec3 tmpvar_68;
  tmpvar_68 = (light_3 + (main_16.w * tmpvar_67));
  light_3 = tmpvar_68;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_5;
  p_5 = (tmpvar_4 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_6;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_7;
  xlv_TEXCOORD5 = normalize((tmpvar_4 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump float detailLevel_7;
  mediump vec4 detail_8;
  mediump float vertLerp_9;
  mediump vec2 detailvertnrmxy_10;
  mediump vec2 detailvertnrmzx_11;
  mediump vec2 detailvertnrmzy_12;
  mediump vec2 detailnrmxy_13;
  mediump vec2 detailnrmzx_14;
  mediump vec2 detailnrmzy_15;
  mediump vec4 main_16;
  highp vec2 uv_17;
  mediump vec4 color_18;
  highp float r_19;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_20;
    y_over_x_20 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_21;
    highp float x_22;
    x_22 = (y_over_x_20 * inversesqrt(((y_over_x_20 * y_over_x_20) + 1.0)));
    s_21 = (sign(x_22) * (1.5708 - (sqrt((1.0 - abs(x_22))) * (1.5708 + (abs(x_22) * (-0.214602 + (abs(x_22) * (0.0865667 + (abs(x_22) * -0.0310296)))))))));
    r_19 = s_21;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_19 = (s_21 + 3.14159);
      } else {
        r_19 = (r_19 - 3.14159);
      };
    };
  } else {
    r_19 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_17.x = (0.5 + (0.159155 * r_19));
  uv_17.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_23;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_24;
    y_over_x_24 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_25;
    highp float x_26;
    x_26 = (y_over_x_24 * inversesqrt(((y_over_x_24 * y_over_x_24) + 1.0)));
    s_25 = (sign(x_26) * (1.5708 - (sqrt((1.0 - abs(x_26))) * (1.5708 + (abs(x_26) * (-0.214602 + (abs(x_26) * (0.0865667 + (abs(x_26) * -0.0310296)))))))));
    r_23 = s_25;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_23 = (s_25 + 3.14159);
      } else {
        r_23 = (r_23 - 3.14159);
      };
    };
  } else {
    r_23 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_27;
  tmpvar_27 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_28;
  tmpvar_28 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_30;
  tmpvar_30.x = (0.159155 * sqrt(dot (tmpvar_28, tmpvar_28)));
  tmpvar_30.y = dFdx(tmpvar_27);
  tmpvar_30.z = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_30.w = dFdy(tmpvar_27);
  lowp vec4 tmpvar_31;
  tmpvar_31 = texture2DGradEXT (_MainTex, uv_17, tmpvar_30.xy, tmpvar_30.zw);
  main_16 = tmpvar_31;
  highp vec2 tmpvar_32;
  tmpvar_32 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_15 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_14 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_13 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_12 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_11 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_10 = tmpvar_37;
  highp float tmpvar_38;
  tmpvar_38 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_9 = tmpvar_38;
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_DetailVertTex, detailvertnrmzy_12);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailTex, detailnrmzy_15);
  mediump vec4 tmpvar_41;
  tmpvar_41 = mix (tmpvar_39, tmpvar_40, vec4(vertLerp_9));
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture2D (_DetailVertTex, detailvertnrmzx_11);
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailTex, detailnrmzx_14);
  mediump vec4 tmpvar_44;
  tmpvar_44 = mix (tmpvar_42, tmpvar_43, vec4(vertLerp_9));
  lowp vec4 tmpvar_45;
  tmpvar_45 = texture2D (_DetailVertTex, detailvertnrmxy_10);
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailTex, detailnrmxy_13);
  mediump vec4 tmpvar_47;
  tmpvar_47 = mix (tmpvar_45, tmpvar_46, vec4(vertLerp_9));
  highp vec3 tmpvar_48;
  tmpvar_48 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_41, tmpvar_48.xxxx);
  detail_8 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (detail_8, tmpvar_44, tmpvar_48.yyyy);
  detail_8 = tmpvar_50;
  highp float tmpvar_51;
  tmpvar_51 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_7 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_52;
  lowp vec3 tmpvar_53;
  tmpvar_53 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_53;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_55;
  tmpvar_55 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_56;
  tmpvar_56 = clamp ((((_LightColor0.w * ((tmpvar_54 - 0.01) / 0.99)) * 4.0) * tmpvar_55), 0.0, 1.0);
  highp vec3 tmpvar_57;
  tmpvar_57 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_56)), 0.0, 1.0);
  light_3 = tmpvar_57;
  mediump vec3 tmpvar_58;
  tmpvar_58 = vec3(clamp (floor((1.0 + tmpvar_54)), 0.0, 1.0));
  specularReflection_2 = tmpvar_58;
  mediump vec3 tmpvar_59;
  mediump vec3 i_60;
  i_60 = -(lightDirection_5);
  tmpvar_59 = (i_60 - (2.0 * (dot (normalDir_4, i_60) * normalDir_4)));
  highp vec3 tmpvar_61;
  tmpvar_61 = (specularReflection_2 * (((tmpvar_55 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_59, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (light_3 + (main_16.w * tmpvar_61));
  light_3 = tmpvar_62;
  color_18.xyz = (((main_16 * mix (detail_8, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_7))) * _Color).xyz * light_3);
  color_18.w = 1.0;
  tmpvar_1 = color_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 428
#line 445
#line 428
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 432
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 436
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 440
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 416
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 410
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 428
#line 445
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 449
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 453
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    #line 458
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 462
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 466
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 470
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 474
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 478
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 482
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 486
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 490
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 494
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_23;
  tmpvar_23 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_24;
  tmpvar_24 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_25;
  if ((tmpvar_24 < tmpvar_23)) {
    tmpvar_25 = _LightShadowData.x;
  } else {
    tmpvar_25 = 1.0;
  };
  float tmpvar_26;
  tmpvar_26 = (tmpvar_22.w * tmpvar_25);
  vec3 i_27;
  i_27 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_26), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_26 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_61;
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = dot (packDist_61, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  tmpvar_65 = (tmpvar_59.w * tmpvar_64);
  atten_4 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  mediump vec3 i_70;
  i_70 = -(lightDirection_6);
  tmpvar_69 = (i_70 - (2.0 * (dot (normalDir_5, i_70) * normalDir_5)));
  highp vec3 tmpvar_71;
  tmpvar_71 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_69, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_3 + (main_17.w * tmpvar_71));
  light_3 = tmpvar_72;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  tmpvar_60 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_61;
  lowp vec4 tmpvar_62;
  tmpvar_62 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_61 = tmpvar_62;
  highp float tmpvar_63;
  tmpvar_63 = dot (packDist_61, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_64;
  if ((tmpvar_63 < tmpvar_60)) {
    tmpvar_64 = _LightShadowData.x;
  } else {
    tmpvar_64 = 1.0;
  };
  highp float tmpvar_65;
  tmpvar_65 = (tmpvar_59.w * tmpvar_64);
  atten_4 = tmpvar_65;
  mediump float tmpvar_66;
  tmpvar_66 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_67;
  tmpvar_67 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_66)), 0.0, 1.0);
  light_3 = tmpvar_67;
  mediump vec3 tmpvar_68;
  tmpvar_68 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_68;
  mediump vec3 tmpvar_69;
  mediump vec3 i_70;
  i_70 = -(lightDirection_6);
  tmpvar_69 = (i_70 - (2.0 * (dot (normalDir_5, i_70) * normalDir_5)));
  highp vec3 tmpvar_71;
  tmpvar_71 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_69, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_71;
  highp vec3 tmpvar_72;
  tmpvar_72 = (light_3 + (main_17.w * tmpvar_71));
  light_3 = tmpvar_72;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 433
#line 450
#line 433
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 437
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 441
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 445
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 433
#line 450
#line 450
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 454
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 458
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 461
lowp vec4 frag( in v2f IN ) {
    #line 463
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 467
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 471
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 475
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 479
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 483
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 487
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 491
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 495
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 499
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_23;
  tmpvar_23 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_24;
  tmpvar_24 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_25;
  tmpvar_25 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_26;
  if ((tmpvar_25 < tmpvar_24)) {
    tmpvar_26 = _LightShadowData.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  tmpvar_27 = ((tmpvar_22.w * tmpvar_23.w) * tmpvar_26);
  vec3 i_28;
  i_28 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_27), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_27 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_28 - (2.0 * (dot (xlv_TEXCOORD5, i_28) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_65);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  mediump vec3 i_71;
  i_71 = -(lightDirection_6);
  tmpvar_70 = (i_71 - (2.0 * (dot (normalDir_5, i_71) * normalDir_5)));
  highp vec3 tmpvar_72;
  tmpvar_72 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_70, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_17.w * tmpvar_72));
  light_3 = tmpvar_73;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  tmpvar_61 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_62;
  lowp vec4 tmpvar_63;
  tmpvar_63 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_62 = tmpvar_63;
  highp float tmpvar_64;
  tmpvar_64 = dot (packDist_62, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_65;
  if ((tmpvar_64 < tmpvar_61)) {
    tmpvar_65 = _LightShadowData.x;
  } else {
    tmpvar_65 = 1.0;
  };
  highp float tmpvar_66;
  tmpvar_66 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_65);
  atten_4 = tmpvar_66;
  mediump float tmpvar_67;
  tmpvar_67 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_68;
  tmpvar_68 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_67)), 0.0, 1.0);
  light_3 = tmpvar_68;
  mediump vec3 tmpvar_69;
  tmpvar_69 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_69;
  mediump vec3 tmpvar_70;
  mediump vec3 i_71;
  i_71 = -(lightDirection_6);
  tmpvar_70 = (i_71 - (2.0 * (dot (normalDir_5, i_71) * normalDir_5)));
  highp vec3 tmpvar_72;
  tmpvar_72 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_70, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_72;
  highp vec3 tmpvar_73;
  tmpvar_73 = (light_3 + (main_17.w * tmpvar_72));
  light_3 = tmpvar_73;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 434
#line 451
#line 434
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 438
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 442
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 446
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 422
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 416
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 434
#line 451
#line 451
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 455
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 459
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 462
lowp vec4 frag( in v2f IN ) {
    #line 464
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 468
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 472
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 476
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 480
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 484
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 488
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 492
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 496
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 500
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_23;
  tmpvar_23 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_24;
  vec3 tmpvar_25;
  tmpvar_25 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_24.x = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_24.y = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_24.z = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_24.w = texture2D (_ShadowMapTexture, (tmpvar_25.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_26;
  tmpvar_26 = lessThan (shadowVals_24, tmpvar_25.zzzz);
  vec4 tmpvar_27;
  tmpvar_27 = _LightShadowData.xxxx;
  float tmpvar_28;
  if (tmpvar_26.x) {
    tmpvar_28 = tmpvar_27.x;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_26.y) {
    tmpvar_29 = tmpvar_27.y;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_26.z) {
    tmpvar_30 = tmpvar_27.z;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_26.w) {
    tmpvar_31 = tmpvar_27.w;
  } else {
    tmpvar_31 = 1.0;
  };
  vec4 tmpvar_32;
  tmpvar_32.x = tmpvar_28;
  tmpvar_32.y = tmpvar_29;
  tmpvar_32.z = tmpvar_30;
  tmpvar_32.w = tmpvar_31;
  float tmpvar_33;
  tmpvar_33 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_22.w) * tmpvar_23.w) * dot (tmpvar_32, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_34;
  i_34 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_33), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_33 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_34 - (2.0 * (dot (xlv_TEXCOORD5, i_34) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_66;
  P_66 = (tmpvar_65.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_67;
  tmpvar_67 = texture2D (_ShadowMapTexture, P_66).x;
  shadowVals_64.x = tmpvar_67;
  highp vec2 P_68;
  P_68 = (tmpvar_65.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_64.y = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_65.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_64.z = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_65.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_64.w = tmpvar_73;
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_64, tmpvar_65.zzzz);
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_63 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  mediump vec3 tmpvar_86;
  mediump vec3 i_87;
  i_87 = -(lightDirection_6);
  tmpvar_86 = (i_87 - (2.0 * (dot (normalDir_5, i_87) * normalDir_5)));
  highp vec3 tmpvar_88;
  tmpvar_88 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_86, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 + (main_17.w * tmpvar_88));
  light_3 = tmpvar_89;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_58 = texture2D (_LightTexture0, P_59);
  highp float tmpvar_60;
  tmpvar_60 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_61;
  tmpvar_61 = texture2D (_LightTextureB0, vec2(tmpvar_60));
  lowp float tmpvar_62;
  mediump vec4 shadows_63;
  highp vec4 shadowVals_64;
  highp vec3 tmpvar_65;
  tmpvar_65 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_66;
  P_66 = (tmpvar_65.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_67;
  tmpvar_67 = texture2D (_ShadowMapTexture, P_66).x;
  shadowVals_64.x = tmpvar_67;
  highp vec2 P_68;
  P_68 = (tmpvar_65.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_69;
  tmpvar_69 = texture2D (_ShadowMapTexture, P_68).x;
  shadowVals_64.y = tmpvar_69;
  highp vec2 P_70;
  P_70 = (tmpvar_65.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_71;
  tmpvar_71 = texture2D (_ShadowMapTexture, P_70).x;
  shadowVals_64.z = tmpvar_71;
  highp vec2 P_72;
  P_72 = (tmpvar_65.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_73;
  tmpvar_73 = texture2D (_ShadowMapTexture, P_72).x;
  shadowVals_64.w = tmpvar_73;
  bvec4 tmpvar_74;
  tmpvar_74 = lessThan (shadowVals_64, tmpvar_65.zzzz);
  highp vec4 tmpvar_75;
  tmpvar_75 = _LightShadowData.xxxx;
  highp float tmpvar_76;
  if (tmpvar_74.x) {
    tmpvar_76 = tmpvar_75.x;
  } else {
    tmpvar_76 = 1.0;
  };
  highp float tmpvar_77;
  if (tmpvar_74.y) {
    tmpvar_77 = tmpvar_75.y;
  } else {
    tmpvar_77 = 1.0;
  };
  highp float tmpvar_78;
  if (tmpvar_74.z) {
    tmpvar_78 = tmpvar_75.z;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_74.w) {
    tmpvar_79 = tmpvar_75.w;
  } else {
    tmpvar_79 = 1.0;
  };
  highp vec4 tmpvar_80;
  tmpvar_80.x = tmpvar_76;
  tmpvar_80.y = tmpvar_77;
  tmpvar_80.z = tmpvar_78;
  tmpvar_80.w = tmpvar_79;
  shadows_63 = tmpvar_80;
  mediump float tmpvar_81;
  tmpvar_81 = dot (shadows_63, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_62 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_58.w) * tmpvar_61.w) * tmpvar_62);
  atten_4 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_84;
  tmpvar_84 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_83)), 0.0, 1.0);
  light_3 = tmpvar_84;
  mediump vec3 tmpvar_85;
  tmpvar_85 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_85;
  mediump vec3 tmpvar_86;
  mediump vec3 i_87;
  i_87 = -(lightDirection_6);
  tmpvar_86 = (i_87 - (2.0 * (dot (normalDir_5, i_87) * normalDir_5)));
  highp vec3 tmpvar_88;
  tmpvar_88 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_86, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_88;
  highp vec3 tmpvar_89;
  tmpvar_89 = (light_3 + (main_17.w * tmpvar_88));
  light_3 = tmpvar_89;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
#line 460
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 451
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 455
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 493
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 497
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 501
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 505
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 509
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = normalize(_WorldSpaceLightPos0);
  float tmpvar_19;
  tmpvar_19 = clamp (dot (xlv_TEXCOORD5, tmpvar_18.xyz), 0.0, 1.0);
  vec4 shadows_20;
  vec3 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_20.x = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[0].xyz)).x;
  shadows_20.y = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[1].xyz)).x;
  shadows_20.z = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[2].xyz)).x;
  shadows_20.w = shadow2D (_ShadowMapTexture, (tmpvar_21 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_22;
  tmpvar_22 = (_LightShadowData.xxxx + (shadows_20 * (1.0 - _LightShadowData.xxxx)));
  shadows_20 = tmpvar_22;
  float tmpvar_23;
  tmpvar_23 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_22, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_24;
  i_24 = -(tmpvar_18.xyz);
  color_2.xyz = (((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color).xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * ((tmpvar_19 - 0.01) / 0.99)) * 4.0) * tmpvar_23), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_19)), 0.0, 1.0)) * (((tmpvar_23 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_24 - (2.0 * (dot (xlv_TEXCOORD5, i_24) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_54;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_55;
  tmpvar_55 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_56;
  highp vec2 P_57;
  P_57 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_56 = texture2D (_LightTexture0, P_57);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp float tmpvar_60;
  mediump vec4 shadows_61;
  highp vec3 tmpvar_62;
  tmpvar_62 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_63;
  coord_63 = (tmpvar_62 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_64;
  tmpvar_64 = shadow2DEXT (_ShadowMapTexture, coord_63);
  shadows_61.x = tmpvar_64;
  highp vec3 coord_65;
  coord_65 = (tmpvar_62 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_66;
  tmpvar_66 = shadow2DEXT (_ShadowMapTexture, coord_65);
  shadows_61.y = tmpvar_66;
  highp vec3 coord_67;
  coord_67 = (tmpvar_62 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_68;
  tmpvar_68 = shadow2DEXT (_ShadowMapTexture, coord_67);
  shadows_61.z = tmpvar_68;
  highp vec3 coord_69;
  coord_69 = (tmpvar_62 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_70;
  tmpvar_70 = shadow2DEXT (_ShadowMapTexture, coord_69);
  shadows_61.w = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = (_LightShadowData.xxxx + (shadows_61 * (1.0 - _LightShadowData.xxxx)));
  shadows_61 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = dot (shadows_61, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_56.w) * tmpvar_59.w) * tmpvar_60);
  atten_4 = tmpvar_73;
  mediump float tmpvar_74;
  tmpvar_74 = clamp ((((_LightColor0.w * ((tmpvar_55 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_75;
  tmpvar_75 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_74)), 0.0, 1.0);
  light_3 = tmpvar_75;
  mediump vec3 tmpvar_76;
  tmpvar_76 = vec3(clamp (floor((1.0 + tmpvar_55)), 0.0, 1.0));
  specularReflection_2 = tmpvar_76;
  mediump vec3 tmpvar_77;
  mediump vec3 i_78;
  i_78 = -(lightDirection_6);
  tmpvar_77 = (i_78 - (2.0 * (dot (normalDir_5, i_78) * normalDir_5)));
  highp vec3 tmpvar_79;
  tmpvar_79 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_77, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_79;
  highp vec3 tmpvar_80;
  tmpvar_80 = (light_3 + (main_17.w * tmpvar_79));
  light_3 = tmpvar_80;
  color_19.xyz = (((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color).xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
#line 460
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 451
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 455
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 443
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 493
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 497
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 501
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 505
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 509
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_23;
  shadowVals_23.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_23.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_24;
  tmpvar_24 = lessThan (shadowVals_23, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_25;
  tmpvar_25 = _LightShadowData.xxxx;
  float tmpvar_26;
  if (tmpvar_24.x) {
    tmpvar_26 = tmpvar_25.x;
  } else {
    tmpvar_26 = 1.0;
  };
  float tmpvar_27;
  if (tmpvar_24.y) {
    tmpvar_27 = tmpvar_25.y;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_24.z) {
    tmpvar_28 = tmpvar_25.z;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_24.w) {
    tmpvar_29 = tmpvar_25.w;
  } else {
    tmpvar_29 = 1.0;
  };
  vec4 tmpvar_30;
  tmpvar_30.x = tmpvar_26;
  tmpvar_30.y = tmpvar_27;
  tmpvar_30.z = tmpvar_28;
  tmpvar_30.w = tmpvar_29;
  float tmpvar_31;
  tmpvar_31 = (tmpvar_22.w * dot (tmpvar_30, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_32;
  i_32 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_31), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (xlv_TEXCOORD5, i_32) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  mediump vec4 shadows_61;
  highp vec4 shadowVals_62;
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_62.x = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_62.y = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_62.z = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_62.w = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_62, vec4(tmpvar_63));
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_61 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_61, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (tmpvar_59.w * tmpvar_60);
  atten_4 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_6);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_5, i_89) * normalDir_5)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_17.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTexture0, vec2(tmpvar_58));
  highp float tmpvar_60;
  mediump vec4 shadows_61;
  highp vec4 shadowVals_62;
  highp float tmpvar_63;
  tmpvar_63 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_64;
  vec_64 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_65;
  lowp vec4 tmpvar_66;
  tmpvar_66 = textureCube (_ShadowMapTexture, vec_64);
  packDist_65 = tmpvar_66;
  shadowVals_62.x = dot (packDist_65, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_67;
  vec_67 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_68;
  lowp vec4 tmpvar_69;
  tmpvar_69 = textureCube (_ShadowMapTexture, vec_67);
  packDist_68 = tmpvar_69;
  shadowVals_62.y = dot (packDist_68, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_70;
  vec_70 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_71;
  lowp vec4 tmpvar_72;
  tmpvar_72 = textureCube (_ShadowMapTexture, vec_70);
  packDist_71 = tmpvar_72;
  shadowVals_62.z = dot (packDist_71, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_73;
  vec_73 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = textureCube (_ShadowMapTexture, vec_73);
  packDist_74 = tmpvar_75;
  shadowVals_62.w = dot (packDist_74, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_76;
  tmpvar_76 = lessThan (shadowVals_62, vec4(tmpvar_63));
  highp vec4 tmpvar_77;
  tmpvar_77 = _LightShadowData.xxxx;
  highp float tmpvar_78;
  if (tmpvar_76.x) {
    tmpvar_78 = tmpvar_77.x;
  } else {
    tmpvar_78 = 1.0;
  };
  highp float tmpvar_79;
  if (tmpvar_76.y) {
    tmpvar_79 = tmpvar_77.y;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_76.z) {
    tmpvar_80 = tmpvar_77.z;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_76.w) {
    tmpvar_81 = tmpvar_77.w;
  } else {
    tmpvar_81 = 1.0;
  };
  highp vec4 tmpvar_82;
  tmpvar_82.x = tmpvar_78;
  tmpvar_82.y = tmpvar_79;
  tmpvar_82.z = tmpvar_80;
  tmpvar_82.w = tmpvar_81;
  shadows_61 = tmpvar_82;
  mediump float tmpvar_83;
  tmpvar_83 = dot (shadows_61, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_60 = tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = (tmpvar_59.w * tmpvar_60);
  atten_4 = tmpvar_84;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_6);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_5, i_89) * normalDir_5)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_17.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 439
#line 456
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 447
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 451
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 439
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 489
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 493
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 497
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 501
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 505
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec2 uv_1;
  vec4 color_2;
  float r_3;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_4;
    y_over_x_4 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_5;
    float x_6;
    x_6 = (y_over_x_4 * inversesqrt(((y_over_x_4 * y_over_x_4) + 1.0)));
    s_5 = (sign(x_6) * (1.5708 - (sqrt((1.0 - abs(x_6))) * (1.5708 + (abs(x_6) * (-0.214602 + (abs(x_6) * (0.0865667 + (abs(x_6) * -0.0310296)))))))));
    r_3 = s_5;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_3 = (s_5 + 3.14159);
      } else {
        r_3 = (r_3 - 3.14159);
      };
    };
  } else {
    r_3 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_1.x = (0.5 + (0.159155 * r_3));
  uv_1.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_7;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_8;
    y_over_x_8 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_9;
    float x_10;
    x_10 = (y_over_x_8 * inversesqrt(((y_over_x_8 * y_over_x_8) + 1.0)));
    s_9 = (sign(x_10) * (1.5708 - (sqrt((1.0 - abs(x_10))) * (1.5708 + (abs(x_10) * (-0.214602 + (abs(x_10) * (0.0865667 + (abs(x_10) * -0.0310296)))))))));
    r_7 = s_9;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_7 = (s_9 + 3.14159);
      } else {
        r_7 = (r_7 - 3.14159);
      };
    };
  } else {
    r_7 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_11;
  tmpvar_11 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_12;
  tmpvar_12 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_13;
  tmpvar_13 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_14;
  tmpvar_14.x = (0.159155 * sqrt(dot (tmpvar_12, tmpvar_12)));
  tmpvar_14.y = dFdx(tmpvar_11);
  tmpvar_14.z = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_14.w = dFdy(tmpvar_11);
  vec4 tmpvar_15;
  tmpvar_15 = texture2DGradARB (_MainTex, uv_1, tmpvar_14.xy, tmpvar_14.zw);
  float tmpvar_16;
  tmpvar_16 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec3 tmpvar_17;
  tmpvar_17 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_18;
  tmpvar_18 = ((tmpvar_15 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_16)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_16)), tmpvar_17.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))) * _Color);
  color_2 = tmpvar_18;
  vec4 tmpvar_19;
  tmpvar_19 = normalize(_WorldSpaceLightPos0);
  float tmpvar_20;
  tmpvar_20 = clamp (dot (xlv_TEXCOORD5, tmpvar_19.xyz), 0.0, 1.0);
  float tmpvar_21;
  tmpvar_21 = ((tmpvar_20 - 0.01) / 0.99);
  vec4 tmpvar_22;
  tmpvar_22 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_23;
  tmpvar_23 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_24;
  shadowVals_24.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_24.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_25;
  tmpvar_25 = lessThan (shadowVals_24, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_26;
  tmpvar_26 = _LightShadowData.xxxx;
  float tmpvar_27;
  if (tmpvar_25.x) {
    tmpvar_27 = tmpvar_26.x;
  } else {
    tmpvar_27 = 1.0;
  };
  float tmpvar_28;
  if (tmpvar_25.y) {
    tmpvar_28 = tmpvar_26.y;
  } else {
    tmpvar_28 = 1.0;
  };
  float tmpvar_29;
  if (tmpvar_25.z) {
    tmpvar_29 = tmpvar_26.z;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  if (tmpvar_25.w) {
    tmpvar_30 = tmpvar_26.w;
  } else {
    tmpvar_30 = 1.0;
  };
  vec4 tmpvar_31;
  tmpvar_31.x = tmpvar_27;
  tmpvar_31.y = tmpvar_28;
  tmpvar_31.z = tmpvar_29;
  tmpvar_31.w = tmpvar_30;
  float tmpvar_32;
  tmpvar_32 = ((tmpvar_22.w * tmpvar_23.w) * dot (tmpvar_31, vec4(0.25, 0.25, 0.25, 0.25)));
  vec3 i_33;
  i_33 = -(tmpvar_19.xyz);
  color_2.xyz = (tmpvar_18.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * clamp ((((_LightColor0.w * tmpvar_21) * 4.0) * tmpvar_32), 0.0, 1.0))), 0.0, 1.0) + (tmpvar_15.w * (vec3(clamp (floor((1.0 + tmpvar_20)), 0.0, 1.0)) * (((tmpvar_32 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_33 - (2.0 * (dot (xlv_TEXCOORD5, i_33) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  color_2.w = 1.0;
  gl_FragData[0] = color_2;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_61);
  atten_4 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_6);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_5, i_90) * normalDir_5)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_17.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump float vertLerp_10;
  mediump vec2 detailvertnrmxy_11;
  mediump vec2 detailvertnrmzx_12;
  mediump vec2 detailvertnrmzy_13;
  mediump vec2 detailnrmxy_14;
  mediump vec2 detailnrmzx_15;
  mediump vec2 detailnrmzy_16;
  mediump vec4 main_17;
  highp vec2 uv_18;
  mediump vec4 color_19;
  highp float r_20;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_21;
    y_over_x_21 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_22;
    highp float x_23;
    x_23 = (y_over_x_21 * inversesqrt(((y_over_x_21 * y_over_x_21) + 1.0)));
    s_22 = (sign(x_23) * (1.5708 - (sqrt((1.0 - abs(x_23))) * (1.5708 + (abs(x_23) * (-0.214602 + (abs(x_23) * (0.0865667 + (abs(x_23) * -0.0310296)))))))));
    r_20 = s_22;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_20 = (s_22 + 3.14159);
      } else {
        r_20 = (r_20 - 3.14159);
      };
    };
  } else {
    r_20 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_18.x = (0.5 + (0.159155 * r_20));
  uv_18.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_24;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_25;
    y_over_x_25 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_26;
    highp float x_27;
    x_27 = (y_over_x_25 * inversesqrt(((y_over_x_25 * y_over_x_25) + 1.0)));
    s_26 = (sign(x_27) * (1.5708 - (sqrt((1.0 - abs(x_27))) * (1.5708 + (abs(x_27) * (-0.214602 + (abs(x_27) * (0.0865667 + (abs(x_27) * -0.0310296)))))))));
    r_24 = s_26;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_24 = (s_26 + 3.14159);
      } else {
        r_24 = (r_24 - 3.14159);
      };
    };
  } else {
    r_24 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_28;
  tmpvar_28 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_29;
  tmpvar_29 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_30;
  tmpvar_30 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_31;
  tmpvar_31.x = (0.159155 * sqrt(dot (tmpvar_29, tmpvar_29)));
  tmpvar_31.y = dFdx(tmpvar_28);
  tmpvar_31.z = (0.159155 * sqrt(dot (tmpvar_30, tmpvar_30)));
  tmpvar_31.w = dFdy(tmpvar_28);
  lowp vec4 tmpvar_32;
  tmpvar_32 = texture2DGradEXT (_MainTex, uv_18, tmpvar_31.xy, tmpvar_31.zw);
  main_17 = tmpvar_32;
  highp vec2 tmpvar_33;
  tmpvar_33 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_16 = tmpvar_33;
  highp vec2 tmpvar_34;
  tmpvar_34 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_15 = tmpvar_34;
  highp vec2 tmpvar_35;
  tmpvar_35 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_14 = tmpvar_35;
  highp vec2 tmpvar_36;
  tmpvar_36 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_13 = tmpvar_36;
  highp vec2 tmpvar_37;
  tmpvar_37 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_12 = tmpvar_37;
  highp vec2 tmpvar_38;
  tmpvar_38 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_11 = tmpvar_38;
  highp float tmpvar_39;
  tmpvar_39 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_10 = tmpvar_39;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_DetailVertTex, detailvertnrmzy_13);
  lowp vec4 tmpvar_41;
  tmpvar_41 = texture2D (_DetailTex, detailnrmzy_16);
  mediump vec4 tmpvar_42;
  tmpvar_42 = mix (tmpvar_40, tmpvar_41, vec4(vertLerp_10));
  lowp vec4 tmpvar_43;
  tmpvar_43 = texture2D (_DetailVertTex, detailvertnrmzx_12);
  lowp vec4 tmpvar_44;
  tmpvar_44 = texture2D (_DetailTex, detailnrmzx_15);
  mediump vec4 tmpvar_45;
  tmpvar_45 = mix (tmpvar_43, tmpvar_44, vec4(vertLerp_10));
  lowp vec4 tmpvar_46;
  tmpvar_46 = texture2D (_DetailVertTex, detailvertnrmxy_11);
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailTex, detailnrmxy_14);
  mediump vec4 tmpvar_48;
  tmpvar_48 = mix (tmpvar_46, tmpvar_47, vec4(vertLerp_10));
  highp vec3 tmpvar_49;
  tmpvar_49 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_42, tmpvar_49.xxxx);
  detail_9 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = mix (detail_9, tmpvar_45, tmpvar_49.yyyy);
  detail_9 = tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = ((main_17 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8))) * _Color);
  color_19 = tmpvar_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_54;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_55;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_56;
  tmpvar_56 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_57;
  tmpvar_57 = ((tmpvar_56 - 0.01) / 0.99);
  highp float tmpvar_58;
  tmpvar_58 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture2D (_LightTextureB0, vec2(tmpvar_58));
  lowp vec4 tmpvar_60;
  tmpvar_60 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_61;
  mediump vec4 shadows_62;
  highp vec4 shadowVals_63;
  highp float tmpvar_64;
  tmpvar_64 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_65;
  vec_65 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = textureCube (_ShadowMapTexture, vec_65);
  packDist_66 = tmpvar_67;
  shadowVals_63.x = dot (packDist_66, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_68;
  vec_68 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_69;
  lowp vec4 tmpvar_70;
  tmpvar_70 = textureCube (_ShadowMapTexture, vec_68);
  packDist_69 = tmpvar_70;
  shadowVals_63.y = dot (packDist_69, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_71;
  vec_71 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_72;
  lowp vec4 tmpvar_73;
  tmpvar_73 = textureCube (_ShadowMapTexture, vec_71);
  packDist_72 = tmpvar_73;
  shadowVals_63.z = dot (packDist_72, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_74;
  vec_74 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_75;
  lowp vec4 tmpvar_76;
  tmpvar_76 = textureCube (_ShadowMapTexture, vec_74);
  packDist_75 = tmpvar_76;
  shadowVals_63.w = dot (packDist_75, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_77;
  tmpvar_77 = lessThan (shadowVals_63, vec4(tmpvar_64));
  highp vec4 tmpvar_78;
  tmpvar_78 = _LightShadowData.xxxx;
  highp float tmpvar_79;
  if (tmpvar_77.x) {
    tmpvar_79 = tmpvar_78.x;
  } else {
    tmpvar_79 = 1.0;
  };
  highp float tmpvar_80;
  if (tmpvar_77.y) {
    tmpvar_80 = tmpvar_78.y;
  } else {
    tmpvar_80 = 1.0;
  };
  highp float tmpvar_81;
  if (tmpvar_77.z) {
    tmpvar_81 = tmpvar_78.z;
  } else {
    tmpvar_81 = 1.0;
  };
  highp float tmpvar_82;
  if (tmpvar_77.w) {
    tmpvar_82 = tmpvar_78.w;
  } else {
    tmpvar_82 = 1.0;
  };
  highp vec4 tmpvar_83;
  tmpvar_83.x = tmpvar_79;
  tmpvar_83.y = tmpvar_80;
  tmpvar_83.z = tmpvar_81;
  tmpvar_83.w = tmpvar_82;
  shadows_62 = tmpvar_83;
  mediump float tmpvar_84;
  tmpvar_84 = dot (shadows_62, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_61 = tmpvar_84;
  highp float tmpvar_85;
  tmpvar_85 = ((tmpvar_59.w * tmpvar_60.w) * tmpvar_61);
  atten_4 = tmpvar_85;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * tmpvar_57) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_56)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_6);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_5, i_90) * normalDir_5)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_17.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_19.xyz = (tmpvar_53.xyz * light_3);
  color_19.w = 1.0;
  tmpvar_1 = color_19;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 440
#line 457
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 448
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
#line 440
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    #line 490
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 494
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 498
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 502
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    color.w = 1.0;
    #line 506
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w;
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, vec2(tmpvar_84)).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_24.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, vec2(tmpvar_84)).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_24.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 439
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 431
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 435
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 439
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 443
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 447
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    #line 452
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 456
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 460
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 464
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 468
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 472
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 476
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 480
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 484
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 488
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 492
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 496
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 500
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 504
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = clamp (((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  vec3 i_26;
  i_26 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_25)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_26 - (2.0 * (dot (xlv_TEXCOORD5, i_26) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_25 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 26 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_position0 v0
dcl_normal0 v1
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r1.w, r1.w
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o5.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_84;
  tmpvar_84 = clamp (((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_3 = tmpvar_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_86;
  mediump vec3 tmpvar_87;
  mediump vec3 i_88;
  i_88 = -(lightDirection_5);
  tmpvar_87 = (i_88 - (2.0 * (dot (normalDir_4, i_88) * normalDir_4)));
  highp vec3 tmpvar_89;
  tmpvar_89 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_87, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_3 + (main_24.w * tmpvar_89));
  light_3 = tmpvar_90;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_84 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_84;
  tmpvar_84 = clamp (((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_3 = tmpvar_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_86;
  mediump vec3 tmpvar_87;
  mediump vec3 i_88;
  i_88 = -(lightDirection_5);
  tmpvar_87 = (i_88 - (2.0 * (dot (normalDir_4, i_88) * normalDir_4)));
  highp vec3 tmpvar_89;
  tmpvar_89 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_87, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_3 + (main_24.w * tmpvar_89));
  light_3 = tmpvar_90;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_84 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 420
#line 446
#line 420
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 424
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 428
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 433
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 420
#line 446
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 437
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 441
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 450
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 454
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 458
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 462
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 466
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 470
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 474
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 478
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 482
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 486
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 490
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 494
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    #line 498
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w);
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w);
  atten_4 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_3 = tmpvar_91;
  mediump vec3 tmpvar_92;
  tmpvar_92 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_92;
  mediump vec3 tmpvar_93;
  mediump vec3 i_94;
  i_94 = -(lightDirection_6);
  tmpvar_93 = (i_94 - (2.0 * (dot (normalDir_5, i_94) * normalDir_5)));
  highp vec3 tmpvar_95;
  tmpvar_95 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_93, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_3 + (main_25.w * tmpvar_95));
  light_3 = tmpvar_96;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_90 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w);
  atten_4 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_3 = tmpvar_91;
  mediump vec3 tmpvar_92;
  tmpvar_92 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_92;
  mediump vec3 tmpvar_93;
  mediump vec3 i_94;
  i_94 = -(lightDirection_6);
  tmpvar_93 = (i_94 - (2.0 * (dot (normalDir_5, i_94) * normalDir_5)));
  highp vec3 tmpvar_95;
  tmpvar_95 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_93, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_3 + (main_25.w * tmpvar_95));
  light_3 = tmpvar_96;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_90 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 448
#line 432
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 436
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 440
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 444
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 448
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 452
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 456
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 459
lowp vec4 frag( in v2f IN ) {
    #line 461
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 465
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 469
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 473
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 477
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 481
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 485
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 489
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 493
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 497
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 501
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 505
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 509
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 513
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTextureB0, vec2(tmpvar_84)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_24.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTextureB0, vec2(tmpvar_84)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_24.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 424
#line 440
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 432
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 436
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 424
#line 440
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 444
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 448
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    #line 453
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 457
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 461
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 465
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 469
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 473
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 477
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 481
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 485
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 489
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 493
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 497
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 501
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 505
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((tmpvar_84 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_24.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((tmpvar_84 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_24.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 439
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 431
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 435
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 439
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 443
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 447
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    #line 452
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 456
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 460
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 464
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 468
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 472
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 476
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 480
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 484
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 488
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 492
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 496
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 500
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 504
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_28;
  tmpvar_28 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_29;
  if ((tmpvar_28.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  tmpvar_30 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_26.w) * tmpvar_27.w) * tmpvar_29);
  float tmpvar_31;
  tmpvar_31 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_30), 0.0, 1.0);
  vec3 i_32;
  i_32 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_31)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_30 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (xlv_TEXCOORD5, i_32) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_31 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  highp vec3 tmpvar_100;
  tmpvar_100 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_3 + (main_25.w * tmpvar_100));
  light_3 = tmpvar_101;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  highp vec3 tmpvar_100;
  tmpvar_100 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_3 + (main_25.w * tmpvar_100));
  light_3 = tmpvar_101;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 456
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 447
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 451
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 489
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 493
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 497
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 501
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 505
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 509
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 513
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 517
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 521
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))));
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp float tmpvar_89;
  mediump float shadow_90;
  lowp float tmpvar_91;
  tmpvar_91 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = (_LightShadowData.x + (shadow_90 * (1.0 - _LightShadowData.x)));
  shadow_90 = tmpvar_92;
  tmpvar_89 = shadow_90;
  highp float tmpvar_93;
  tmpvar_93 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w) * tmpvar_89);
  atten_4 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  mediump vec3 i_98;
  i_98 = -(lightDirection_6);
  tmpvar_97 = (i_98 - (2.0 * (dot (normalDir_5, i_98) * normalDir_5)));
  highp vec3 tmpvar_99;
  tmpvar_99 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_97, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (light_3 + (main_25.w * tmpvar_99));
  light_3 = tmpvar_100;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_94 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 457
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 448
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 490
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 494
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 498
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 502
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 506
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 510
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 514
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 518
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 522
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD5 = normalize((tmpvar_2 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  vec4 tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25.x), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.50000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dp4 r0.w, v0, c3
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r2.xyz, r1, -r0
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o5.xyz, r0.z, r2
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r3.xyz, r0.xyww, c11.x
mov o0, r0
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mov r2.x, r3
mul r2.y, r3, c9.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mad o4.xy, r3.z, c10.zwzw, r2
mov o4.zw, r0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_84;
  mediump float lightShadowDataX_85;
  highp float dist_86;
  lowp float tmpvar_87;
  tmpvar_87 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_86 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = _LightShadowData.x;
  lightShadowDataX_85 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = max (float((dist_86 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_85);
  tmpvar_84 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_3 = tmpvar_91;
  mediump vec3 tmpvar_92;
  tmpvar_92 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_92;
  mediump vec3 tmpvar_93;
  mediump vec3 i_94;
  i_94 = -(lightDirection_5);
  tmpvar_93 = (i_94 - (2.0 * (dot (normalDir_4, i_94) * normalDir_4)));
  highp vec3 tmpvar_95;
  tmpvar_95 = (specularReflection_2 * (((tmpvar_84 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_93, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_3 + (main_24.w * tmpvar_95));
  light_3 = tmpvar_96;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_90 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_5;
  p_5 = (tmpvar_4 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_6;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD5 = normalize((tmpvar_4 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp vec4 tmpvar_84;
  tmpvar_84 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_84.x), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((tmpvar_84.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_24.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 429
#line 445
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 437
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 441
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 429
#line 445
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 449
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 453
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    #line 458
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 462
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 466
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 470
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 474
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 478
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 482
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 486
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 490
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 494
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 498
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 502
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 506
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 510
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_4;
  xlv_TEXCOORD5 = normalize((tmpvar_2 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.50000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
dp4 r0.w, v0, c3
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r2.xyz, r1, -r0
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o6.xyz, r0.z, r2
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r3.xyz, r0.xyww, c15.x
mov o0, r0
dp4 r0.y, v0, v0
mul r2.y, r3, c13.x
mov r2.x, r3
mad o5.xy, r3.z, c14.zwzw, r2
add r2.xyz, -r1, c12
dp3 r1.w, r2, r2
rsq r0.x, r1.w
dp4 r1.w, v0, c7
mul o2.xyz, r0.x, r2
rcp o1.x, r0.x
dp3 r0.x, v1, v1
rsq r0.x, r0.x
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_84;
  mediump float lightShadowDataX_85;
  highp float dist_86;
  lowp float tmpvar_87;
  tmpvar_87 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_86 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = _LightShadowData.x;
  lightShadowDataX_85 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = max (float((dist_86 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_85);
  tmpvar_84 = tmpvar_89;
  lowp float tmpvar_90;
  tmpvar_90 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_84);
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_90), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_3 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_93;
  mediump vec3 tmpvar_94;
  mediump vec3 i_95;
  i_95 = -(lightDirection_5);
  tmpvar_94 = (i_95 - (2.0 * (dot (normalDir_4, i_95) * normalDir_4)));
  highp vec3 tmpvar_96;
  tmpvar_96 = (specularReflection_2 * (((tmpvar_90 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_94, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_3 + (main_24.w * tmpvar_96));
  light_3 = tmpvar_97;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_91 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_5;
  p_5 = (tmpvar_4 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_6;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_7;
  xlv_TEXCOORD5 = normalize((tmpvar_4 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((tmpvar_84 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_24.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 449
#line 432
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 436
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 440
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 444
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 449
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 453
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 457
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    #line 462
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 466
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 470
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 474
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 478
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 482
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 486
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 490
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 494
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 498
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 502
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 506
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 510
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 514
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_27;
  tmpvar_27 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_28;
  tmpvar_28 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_29;
  if ((tmpvar_28 < tmpvar_27)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  tmpvar_30 = (tmpvar_26.w * tmpvar_29);
  float tmpvar_31;
  tmpvar_31 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_30), 0.0, 1.0);
  vec3 i_32;
  i_32 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_31)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_30 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (xlv_TEXCOORD5, i_32) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_31 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_4 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  mediump vec3 i_98;
  i_98 = -(lightDirection_6);
  tmpvar_97 = (i_98 - (2.0 * (dot (normalDir_5, i_98) * normalDir_5)));
  highp vec3 tmpvar_99;
  tmpvar_99 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_97, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (light_3 + (main_25.w * tmpvar_99));
  light_3 = tmpvar_100;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_94 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_4 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  mediump vec3 i_98;
  i_98 = -(lightDirection_6);
  tmpvar_97 = (i_98 - (2.0 * (dot (normalDir_5, i_98) * normalDir_5)));
  highp vec3 tmpvar_99;
  tmpvar_99 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_97, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (light_3 + (main_25.w * tmpvar_99));
  light_3 = tmpvar_100;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_94 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 454
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 445
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 449
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 454
#line 454
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 458
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 462
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 465
lowp vec4 frag( in v2f IN ) {
    #line 467
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 471
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 475
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 479
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 483
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 487
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 491
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 495
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 499
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 503
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 507
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 511
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 515
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 519
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_27;
  tmpvar_27 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_28;
  tmpvar_28 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_29;
  tmpvar_29 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_30;
  if ((tmpvar_29 < tmpvar_28)) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  tmpvar_31 = ((tmpvar_26.w * tmpvar_27.w) * tmpvar_30);
  float tmpvar_32;
  tmpvar_32 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_31), 0.0, 1.0);
  vec3 i_33;
  i_33 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_32)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_33 - (2.0 * (dot (xlv_TEXCOORD5, i_33) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_32 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  highp vec3 tmpvar_100;
  tmpvar_100 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_3 + (main_25.w * tmpvar_100));
  light_3 = tmpvar_101;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  highp vec3 tmpvar_100;
  tmpvar_100 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_3 + (main_25.w * tmpvar_100));
  light_3 = tmpvar_101;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 438
#line 455
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 446
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 450
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 438
#line 455
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 459
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 463
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 466
lowp vec4 frag( in v2f IN ) {
    #line 468
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 472
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 476
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 480
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 484
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 488
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 492
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 496
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 500
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 504
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 508
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 512
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 516
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 520
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_28;
  vec3 tmpvar_29;
  tmpvar_29 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_28.x = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_28.y = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_28.z = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_28.w = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_30;
  tmpvar_30 = lessThan (shadowVals_28, tmpvar_29.zzzz);
  vec4 tmpvar_31;
  tmpvar_31 = _LightShadowData.xxxx;
  float tmpvar_32;
  if (tmpvar_30.x) {
    tmpvar_32 = tmpvar_31.x;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_30.y) {
    tmpvar_33 = tmpvar_31.y;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_30.z) {
    tmpvar_34 = tmpvar_31.z;
  } else {
    tmpvar_34 = 1.0;
  };
  float tmpvar_35;
  if (tmpvar_30.w) {
    tmpvar_35 = tmpvar_31.w;
  } else {
    tmpvar_35 = 1.0;
  };
  vec4 tmpvar_36;
  tmpvar_36.x = tmpvar_32;
  tmpvar_36.y = tmpvar_33;
  tmpvar_36.z = tmpvar_34;
  tmpvar_36.w = tmpvar_35;
  float tmpvar_37;
  tmpvar_37 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_26.w) * tmpvar_27.w) * dot (tmpvar_36, vec4(0.25, 0.25, 0.25, 0.25)));
  float tmpvar_38;
  tmpvar_38 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_37), 0.0, 1.0);
  vec3 i_39;
  i_39 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_38)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_37 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_39 - (2.0 * (dot (xlv_TEXCOORD5, i_39) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_38 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_3 = tmpvar_112;
  mediump vec3 tmpvar_113;
  tmpvar_113 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_113;
  mediump vec3 tmpvar_114;
  mediump vec3 i_115;
  i_115 = -(lightDirection_6);
  tmpvar_114 = (i_115 - (2.0 * (dot (normalDir_5, i_115) * normalDir_5)));
  highp vec3 tmpvar_116;
  tmpvar_116 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_114, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (light_3 + (main_25.w * tmpvar_116));
  light_3 = tmpvar_117;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_111 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_3 = tmpvar_112;
  mediump vec3 tmpvar_113;
  tmpvar_113 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_113;
  mediump vec3 tmpvar_114;
  mediump vec3 i_115;
  i_115 = -(lightDirection_6);
  tmpvar_114 = (i_115 - (2.0 * (dot (normalDir_5, i_115) * normalDir_5)));
  highp vec3 tmpvar_116;
  tmpvar_116 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_114, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (light_3 + (main_25.w * tmpvar_116));
  light_3 = tmpvar_117;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_111 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 464
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 455
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 459
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 485
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 489
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 493
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 501
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 505
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 509
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 513
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 517
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 521
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 525
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 529
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  vec4 shadows_25;
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_25.x = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[0].xyz)).x;
  shadows_25.y = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[1].xyz)).x;
  shadows_25.z = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[2].xyz)).x;
  shadows_25.w = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_27;
  tmpvar_27 = (_LightShadowData.xxxx + (shadows_25 * (1.0 - _LightShadowData.xxxx)));
  shadows_25 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_27, vec4(0.25, 0.25, 0.25, 0.25)));
  float tmpvar_29;
  tmpvar_29 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_28), 0.0, 1.0);
  vec3 i_30;
  i_30 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_29)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_28 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_30 - (2.0 * (dot (xlv_TEXCOORD5, i_30) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_29 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_92;
  coord_92 = (tmpvar_91 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_93;
  tmpvar_93 = shadow2DEXT (_ShadowMapTexture, coord_92);
  shadows_90.x = tmpvar_93;
  highp vec3 coord_94;
  coord_94 = (tmpvar_91 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_95;
  tmpvar_95 = shadow2DEXT (_ShadowMapTexture, coord_94);
  shadows_90.y = tmpvar_95;
  highp vec3 coord_96;
  coord_96 = (tmpvar_91 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_97;
  tmpvar_97 = shadow2DEXT (_ShadowMapTexture, coord_96);
  shadows_90.z = tmpvar_97;
  highp vec3 coord_98;
  coord_98 = (tmpvar_91 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_99;
  tmpvar_99 = shadow2DEXT (_ShadowMapTexture, coord_98);
  shadows_90.w = tmpvar_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (_LightShadowData.xxxx + (shadows_90 * (1.0 - _LightShadowData.xxxx)));
  shadows_90 = tmpvar_100;
  mediump float tmpvar_101;
  tmpvar_101 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w) * tmpvar_89);
  atten_4 = tmpvar_102;
  mediump float tmpvar_103;
  tmpvar_103 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_104;
  tmpvar_104 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_103)), 0.0, 1.0);
  light_3 = tmpvar_104;
  mediump vec3 tmpvar_105;
  tmpvar_105 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_105;
  mediump vec3 tmpvar_106;
  mediump vec3 i_107;
  i_107 = -(lightDirection_6);
  tmpvar_106 = (i_107 - (2.0 * (dot (normalDir_5, i_107) * normalDir_5)));
  highp vec3 tmpvar_108;
  tmpvar_108 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_106, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (light_3 + (main_25.w * tmpvar_108));
  light_3 = tmpvar_109;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_103 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 464
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 455
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 459
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 485
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 489
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 493
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 501
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 505
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 509
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 513
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 517
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 521
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 525
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 529
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_27;
  shadowVals_27.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_28;
  tmpvar_28 = lessThan (shadowVals_27, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_29;
  tmpvar_29 = _LightShadowData.xxxx;
  float tmpvar_30;
  if (tmpvar_28.x) {
    tmpvar_30 = tmpvar_29.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_28.y) {
    tmpvar_31 = tmpvar_29.y;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_28.z) {
    tmpvar_32 = tmpvar_29.z;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_28.w) {
    tmpvar_33 = tmpvar_29.w;
  } else {
    tmpvar_33 = 1.0;
  };
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_30;
  tmpvar_34.y = tmpvar_31;
  tmpvar_34.z = tmpvar_32;
  tmpvar_34.w = tmpvar_33;
  float tmpvar_35;
  tmpvar_35 = (tmpvar_26.w * dot (tmpvar_34, vec4(0.25, 0.25, 0.25, 0.25)));
  float tmpvar_36;
  tmpvar_36 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_35), 0.0, 1.0);
  vec3 i_37;
  i_37 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_36)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_35 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_37 - (2.0 * (dot (xlv_TEXCOORD5, i_37) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_36 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_4 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_3 = tmpvar_114;
  mediump vec3 tmpvar_115;
  tmpvar_115 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_115;
  mediump vec3 tmpvar_116;
  mediump vec3 i_117;
  i_117 = -(lightDirection_6);
  tmpvar_116 = (i_117 - (2.0 * (dot (normalDir_5, i_117) * normalDir_5)));
  highp vec3 tmpvar_118;
  tmpvar_118 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_116, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_118;
  highp vec3 tmpvar_119;
  tmpvar_119 = (light_3 + (main_25.w * tmpvar_118));
  light_3 = tmpvar_119;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_113 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_4 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_3 = tmpvar_114;
  mediump vec3 tmpvar_115;
  tmpvar_115 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_115;
  mediump vec3 tmpvar_116;
  mediump vec3 i_117;
  i_117 = -(lightDirection_6);
  tmpvar_116 = (i_117 - (2.0 * (dot (normalDir_5, i_117) * normalDir_5)));
  highp vec3 tmpvar_118;
  tmpvar_118 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_116, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_118;
  highp vec3 tmpvar_119;
  tmpvar_119 = (light_3 + (main_25.w * tmpvar_118));
  light_3 = tmpvar_119;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_113 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 460
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 451
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 455
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 493
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 501
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 505
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 509
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 513
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 517
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 521
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 525
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_27;
  tmpvar_27 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_28;
  shadowVals_28.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_28, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  float tmpvar_36;
  tmpvar_36 = ((tmpvar_26.w * tmpvar_27.w) * dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25)));
  float tmpvar_37;
  tmpvar_37 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_36), 0.0, 1.0);
  vec3 i_38;
  i_38 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_37)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_36 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_38 - (2.0 * (dot (xlv_TEXCOORD5, i_38) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_37 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_4 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_3 = tmpvar_115;
  mediump vec3 tmpvar_116;
  tmpvar_116 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_116;
  mediump vec3 tmpvar_117;
  mediump vec3 i_118;
  i_118 = -(lightDirection_6);
  tmpvar_117 = (i_118 - (2.0 * (dot (normalDir_5, i_118) * normalDir_5)));
  highp vec3 tmpvar_119;
  tmpvar_119 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_117, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_119;
  highp vec3 tmpvar_120;
  tmpvar_120 = (light_3 + (main_25.w * tmpvar_119));
  light_3 = tmpvar_120;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_114 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_4 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_3 = tmpvar_115;
  mediump vec3 tmpvar_116;
  tmpvar_116 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_116;
  mediump vec3 tmpvar_117;
  mediump vec3 i_118;
  i_118 = -(lightDirection_6);
  tmpvar_117 = (i_118 - (2.0 * (dot (normalDir_5, i_118) * normalDir_5)));
  highp vec3 tmpvar_119;
  tmpvar_119 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_117, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_119;
  highp vec3 tmpvar_120;
  tmpvar_120 = (light_3 + (main_25.w * tmpvar_119));
  light_3 = tmpvar_120;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_114 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 461
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 452
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 456
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 461
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 465
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 469
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 472
lowp vec4 frag( in v2f IN ) {
    #line 474
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 478
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 482
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 486
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 490
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 494
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 498
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 502
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 506
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 510
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 514
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 518
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 522
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 526
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w;
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, vec2(tmpvar_84)).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_24.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_85;
  tmpvar_85 = texture2D (_LightTexture0, vec2(tmpvar_84)).w;
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_24.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 439
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 431
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 435
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 439
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 443
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 447
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    #line 452
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 456
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 460
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 464
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 468
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 472
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 476
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 480
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 484
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 488
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 492
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 496
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 500
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 504
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = clamp (((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  vec3 i_26;
  i_26 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_25)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot ((i_26 - (2.0 * (dot (xlv_TEXCOORD5, i_26) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_25 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
"vs_3_0
; 26 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord5 o4
dcl_texcoord6 o5
dcl_position0 v0
dcl_normal0 v1
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r0.xyz, r1, -r0
dp3 r0.w, r0, r0
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r1.w, r1.w
rsq r0.w, r0.w
mul o4.xyz, r0.w, r0
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o5.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_84;
  tmpvar_84 = clamp (((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_3 = tmpvar_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_86;
  mediump vec3 tmpvar_87;
  mediump vec3 i_88;
  i_88 = -(lightDirection_5);
  tmpvar_87 = (i_88 - (2.0 * (dot (normalDir_4, i_88) * normalDir_4)));
  highp vec3 tmpvar_89;
  tmpvar_89 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_87, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_3 + (main_24.w * tmpvar_89));
  light_3 = tmpvar_90;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_84 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  mediump float tmpvar_84;
  tmpvar_84 = clamp (((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0), 0.0, 1.0);
  highp vec3 tmpvar_85;
  tmpvar_85 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_84)), 0.0, 1.0);
  light_3 = tmpvar_85;
  mediump vec3 tmpvar_86;
  tmpvar_86 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_86;
  mediump vec3 tmpvar_87;
  mediump vec3 i_88;
  i_88 = -(lightDirection_5);
  tmpvar_87 = (i_88 - (2.0 * (dot (normalDir_4, i_88) * normalDir_4)));
  highp vec3 tmpvar_89;
  tmpvar_89 = (specularReflection_2 * ((_LightColor0.xyz * _SpecColor.xyz) * pow (clamp (dot (tmpvar_87, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_89;
  highp vec3 tmpvar_90;
  tmpvar_90 = (light_3 + (main_24.w * tmpvar_89));
  light_3 = tmpvar_90;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_84 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 420
#line 446
#line 420
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 424
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 428
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 433
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 315
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 410
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 404
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 325
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 338
#line 346
#line 360
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 393
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 397
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 401
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 420
#line 446
#line 435
highp vec4 Derivatives( in highp vec3 pos ) {
    #line 437
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    #line 441
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 446
lowp vec4 frag( in v2f IN ) {
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    #line 450
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    #line 454
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    #line 458
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    #line 462
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    #line 466
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    #line 470
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    #line 474
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    #line 478
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    #line 482
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    #line 486
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    #line 490
    lowp float atten = 1.0;
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    #line 494
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    #line 498
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w);
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.w, r0, c11
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w);
  atten_4 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_3 = tmpvar_91;
  mediump vec3 tmpvar_92;
  tmpvar_92 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_92;
  mediump vec3 tmpvar_93;
  mediump vec3 i_94;
  i_94 = -(lightDirection_6);
  tmpvar_93 = (i_94 - (2.0 * (dot (normalDir_5, i_94) * normalDir_5)));
  highp vec3 tmpvar_95;
  tmpvar_95 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_93, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_3 + (main_25.w * tmpvar_95));
  light_3 = tmpvar_96;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_90 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  highp float tmpvar_89;
  tmpvar_89 = ((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w);
  atten_4 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_3 = tmpvar_91;
  mediump vec3 tmpvar_92;
  tmpvar_92 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_92;
  mediump vec3 tmpvar_93;
  mediump vec3 i_94;
  i_94 = -(lightDirection_6);
  tmpvar_93 = (i_94 - (2.0 * (dot (normalDir_5, i_94) * normalDir_5)));
  highp vec3 tmpvar_95;
  tmpvar_95 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_93, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_3 + (main_25.w * tmpvar_95));
  light_3 = tmpvar_96;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_90 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 448
#line 432
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 436
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 440
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 444
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 326
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 421
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 415
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 336
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 349
#line 357
#line 371
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 404
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 408
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 412
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 448
#line 448
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 452
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 456
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 322
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 324
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 318
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 320
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 459
lowp vec4 frag( in v2f IN ) {
    #line 461
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 465
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 469
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 473
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 477
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 481
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 485
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 489
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 493
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 497
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 501
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 505
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 509
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 513
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3))).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 30 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTextureB0, vec2(tmpvar_84)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_24.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  highp float tmpvar_84;
  tmpvar_84 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp float tmpvar_85;
  tmpvar_85 = (texture2D (_LightTextureB0, vec2(tmpvar_84)).w * textureCube (_LightTexture0, xlv_TEXCOORD3).w);
  mediump float tmpvar_86;
  tmpvar_86 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_85), 0.0, 1.0);
  highp vec3 tmpvar_87;
  tmpvar_87 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_86)), 0.0, 1.0);
  light_3 = tmpvar_87;
  mediump vec3 tmpvar_88;
  tmpvar_88 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_88;
  mediump vec3 tmpvar_89;
  mediump vec3 i_90;
  i_90 = -(lightDirection_5);
  tmpvar_89 = (i_90 - (2.0 * (dot (normalDir_4, i_90) * normalDir_4)));
  highp vec3 tmpvar_91;
  tmpvar_91 = (specularReflection_2 * (((tmpvar_85 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_89, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_91;
  highp vec3 tmpvar_92;
  tmpvar_92 = (light_3 + (main_24.w * tmpvar_91));
  light_3 = tmpvar_92;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_86 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 424
#line 440
#line 424
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 428
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 432
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 436
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 318
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 413
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 407
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 328
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 341
#line 349
#line 363
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 396
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 400
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 404
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 424
#line 440
#line 440
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 444
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 448
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 451
lowp vec4 frag( in v2f IN ) {
    #line 453
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 457
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 461
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 465
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 469
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 473
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 477
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 481
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 485
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 489
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 493
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 497
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 501
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 505
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 29 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
dp4 r0.z, v0, c6
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o5.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((tmpvar_84 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_24.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = texture2D (_LightTexture0, xlv_TEXCOORD3).w;
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((tmpvar_84 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_24.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 439
#line 423
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 427
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 431
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 435
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 317
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 412
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 406
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 327
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 340
#line 348
#line 362
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 395
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 399
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 403
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 423
#line 439
#line 439
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 443
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 447
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 450
lowp vec4 frag( in v2f IN ) {
    #line 452
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 456
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 460
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 464
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 468
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 472
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 476
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 480
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 484
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 488
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 492
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * 1.0);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 496
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 500
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 504
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 tmpvar_28;
  tmpvar_28 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  float tmpvar_29;
  if ((tmpvar_28.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  tmpvar_30 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_26.w) * tmpvar_27.w) * tmpvar_29);
  float tmpvar_31;
  tmpvar_31 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_30), 0.0, 1.0);
  vec3 i_32;
  i_32 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_31)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_30 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (xlv_TEXCOORD5, i_32) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_31 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  highp vec3 tmpvar_100;
  tmpvar_100 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_3 + (main_25.w * tmpvar_100));
  light_3 = tmpvar_101;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump float shadow_91;
  lowp vec4 tmpvar_92;
  tmpvar_92 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4);
  highp float tmpvar_93;
  if ((tmpvar_92.x < (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  shadow_91 = tmpvar_93;
  tmpvar_90 = shadow_91;
  highp float tmpvar_94;
  tmpvar_94 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  highp vec3 tmpvar_100;
  tmpvar_100 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_3 + (main_25.w * tmpvar_100));
  light_3 = tmpvar_101;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 456
#line 439
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 443
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 447
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 451
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 332
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 427
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 421
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 323
uniform sampler2D _LightTextureB0;
#line 328
#line 342
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 355
#line 363
#line 377
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 410
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 414
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 418
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 439
#line 456
#line 456
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 460
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 464
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 328
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 324
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = (( (textureProj( _ShadowMapTexture, shadowCoord).x < (shadowCoord.z / shadowCoord.w)) ) ? ( _LightShadowData.x ) : ( 1.0 ));
    #line 319
    return shadow;
}
#line 467
lowp vec4 frag( in v2f IN ) {
    #line 469
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 473
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 477
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 481
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 485
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 489
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 493
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 497
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 501
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 505
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 509
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 513
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 517
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 521
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * (_LightShadowData.x + (shadow2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x * (1.0 - _LightShadowData.x))));
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp float tmpvar_89;
  mediump float shadow_90;
  lowp float tmpvar_91;
  tmpvar_91 = shadow2DProjEXT (_ShadowMapTexture, xlv_TEXCOORD4);
  shadow_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = (_LightShadowData.x + (shadow_90 * (1.0 - _LightShadowData.x)));
  shadow_90 = tmpvar_92;
  tmpvar_89 = shadow_90;
  highp float tmpvar_93;
  tmpvar_93 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w) * tmpvar_89);
  atten_4 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  mediump vec3 i_98;
  i_98 = -(lightDirection_6);
  tmpvar_97 = (i_98 - (2.0 * (dot (normalDir_5, i_98) * normalDir_5)));
  highp vec3 tmpvar_99;
  tmpvar_99 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_97, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (light_3 + (main_25.w * tmpvar_99));
  light_3 = tmpvar_100;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_94 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 457
#line 440
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 444
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 448
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 452
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2Dproj(mediump sampler2DShadow s, vec4 coord) { return textureProj (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 333
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 428
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 422
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 323
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 343
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 356
#line 364
#line 378
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 411
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 415
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 419
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 440
#line 457
#line 457
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 461
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 465
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 329
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    #line 331
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 325
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    #line 327
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 316
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    mediump float shadow = xll_shadow2Dproj( _ShadowMapTexture, shadowCoord);
    #line 319
    shadow = (_LightShadowData.x + (shadow * (1.0 - _LightShadowData.x)));
    return shadow;
}
#line 468
lowp vec4 frag( in v2f IN ) {
    #line 470
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 474
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 478
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 482
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 486
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 490
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 494
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 498
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 502
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 506
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 510
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 514
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 518
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 522
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = o_4;
  xlv_TEXCOORD5 = normalize((tmpvar_2 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  vec4 tmpvar_25;
  tmpvar_25 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25.x), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 8 [_WorldSpaceCameraPos]
Vector 9 [_ProjectionParams]
Vector 10 [_ScreenParams]
Matrix 4 [_Object2World]
"vs_3_0
; 32 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord5 o5
dcl_texcoord6 o6
def c11, 0.50000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dp4 r0.w, v0, c3
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r2.xyz, r1, -r0
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o5.xyz, r0.z, r2
add r1.xyz, -r1, c8
dp3 r1.w, r1, r1
rsq r1.w, r1.w
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r3.xyz, r0.xyww, c11.x
mov o0, r0
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mov r2.x, r3
mul r2.y, r3, c9.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mad o4.xy, r3.z, c10.zwzw, r2
mov o4.zw, r0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o6.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_84;
  mediump float lightShadowDataX_85;
  highp float dist_86;
  lowp float tmpvar_87;
  tmpvar_87 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3).x;
  dist_86 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = _LightShadowData.x;
  lightShadowDataX_85 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = max (float((dist_86 > (xlv_TEXCOORD3.z / xlv_TEXCOORD3.w))), lightShadowDataX_85);
  tmpvar_84 = tmpvar_89;
  mediump float tmpvar_90;
  tmpvar_90 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_91;
  tmpvar_91 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_90)), 0.0, 1.0);
  light_3 = tmpvar_91;
  mediump vec3 tmpvar_92;
  tmpvar_92 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_92;
  mediump vec3 tmpvar_93;
  mediump vec3 i_94;
  i_94 = -(lightDirection_5);
  tmpvar_93 = (i_94 - (2.0 * (dot (normalDir_4, i_94) * normalDir_4)));
  highp vec3 tmpvar_95;
  tmpvar_95 = (specularReflection_2 * (((tmpvar_84 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_93, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_95;
  highp vec3 tmpvar_96;
  tmpvar_96 = (light_3 + (main_24.w * tmpvar_95));
  light_3 = tmpvar_96;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_90 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_5;
  p_5 = (tmpvar_4 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_6;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = o_7;
  xlv_TEXCOORD5 = normalize((tmpvar_4 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp vec4 tmpvar_84;
  tmpvar_84 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD3);
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_84.x), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((tmpvar_84.x * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_24.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 429
#line 445
#line 429
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 433
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 437
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 441
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 323
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 418
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 412
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 333
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 346
#line 354
#line 368
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 401
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 405
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 409
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 429
#line 445
#line 445
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 449
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 453
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 456
lowp vec4 frag( in v2f IN ) {
    #line 458
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 462
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 466
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 470
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 474
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 478
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 482
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 486
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 490
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 494
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 498
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = unitySampleShadow( IN._ShadowCoord);
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 502
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 506
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 510
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD3);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _ProjectionParams;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1 = (gl_ModelViewProjectionMatrix * gl_Vertex);
  vec3 tmpvar_2;
  tmpvar_2 = (_Object2World * gl_Vertex).xyz;
  vec3 p_3;
  p_3 = (tmpvar_2 - _WorldSpaceCameraPos);
  vec4 o_4;
  vec4 tmpvar_5;
  tmpvar_5 = (tmpvar_1 * 0.5);
  vec2 tmpvar_6;
  tmpvar_6.x = tmpvar_5.x;
  tmpvar_6.y = (tmpvar_5.y * _ProjectionParams.x);
  o_4.xy = (tmpvar_6 + tmpvar_5.w);
  o_4.zw = tmpvar_1.zw;
  gl_Position = tmpvar_1;
  xlv_TEXCOORD0 = sqrt(dot (p_3, p_3));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xy;
  xlv_TEXCOORD4 = o_4;
  xlv_TEXCOORD5 = normalize((tmpvar_2 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec2 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;

uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  float tmpvar_26;
  tmpvar_26 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_25), 0.0, 1.0);
  vec3 i_27;
  i_27 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_26)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_25 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_27 - (2.0 * (dot (xlv_TEXCOORD5, i_27) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_26 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_ProjectionParams]
Vector 14 [_ScreenParams]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
def c15, 0.50000000, 0, 0, 0
dcl_position0 v0
dcl_normal0 v1
dp4 r1.z, v0, c6
dp4 r1.y, v0, c5
dp4 r1.x, v0, c4
dp4 r0.w, v0, c3
mov r0.z, c6.w
mov r0.x, c4.w
mov r0.y, c5.w
add r2.xyz, r1, -r0
dp3 r0.x, r2, r2
rsq r0.z, r0.x
mul o6.xyz, r0.z, r2
dp4 r0.z, v0, c2
dp4 r0.x, v0, c0
dp4 r0.y, v0, c1
mul r3.xyz, r0.xyww, c15.x
mov o0, r0
dp4 r0.y, v0, v0
mul r2.y, r3, c13.x
mov r2.x, r3
mad o5.xy, r3.z, c14.zwzw, r2
add r2.xyz, -r1, c12
dp3 r1.w, r2, r2
rsq r0.x, r1.w
dp4 r1.w, v0, c7
mul o2.xyz, r0.x, r2
rcp o1.x, r0.x
dp3 r0.x, v1, v1
rsq r0.x, r0.x
dp4 o4.y, r1, c9
dp4 o4.x, r1, c8
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
mov o5.zw, r0
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_84;
  mediump float lightShadowDataX_85;
  highp float dist_86;
  lowp float tmpvar_87;
  tmpvar_87 = texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x;
  dist_86 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = _LightShadowData.x;
  lightShadowDataX_85 = tmpvar_88;
  highp float tmpvar_89;
  tmpvar_89 = max (float((dist_86 > (xlv_TEXCOORD4.z / xlv_TEXCOORD4.w))), lightShadowDataX_85);
  tmpvar_84 = tmpvar_89;
  lowp float tmpvar_90;
  tmpvar_90 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * tmpvar_84);
  mediump float tmpvar_91;
  tmpvar_91 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_90), 0.0, 1.0);
  highp vec3 tmpvar_92;
  tmpvar_92 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_91)), 0.0, 1.0);
  light_3 = tmpvar_92;
  mediump vec3 tmpvar_93;
  tmpvar_93 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_93;
  mediump vec3 tmpvar_94;
  mediump vec3 i_95;
  i_95 = -(lightDirection_5);
  tmpvar_94 = (i_95 - (2.0 * (dot (normalDir_4, i_95) * normalDir_4)));
  highp vec3 tmpvar_96;
  tmpvar_96 = (specularReflection_2 * (((tmpvar_90 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_94, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_96;
  highp vec3 tmpvar_97;
  tmpvar_97 = (light_3 + (main_24.w * tmpvar_96));
  light_3 = tmpvar_97;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_91 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _ProjectionParams;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = (glstate_matrix_mvp * _glesVertex);
  highp vec3 tmpvar_4;
  tmpvar_4 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_5;
  p_5 = (tmpvar_4 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_6;
  tmpvar_6 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_6;
  tmpvar_2 = nrm_1;
  highp vec4 o_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 * 0.5);
  highp vec2 tmpvar_9;
  tmpvar_9.x = tmpvar_8.x;
  tmpvar_9.y = (tmpvar_8.y * _ProjectionParams.x);
  o_7.xy = (tmpvar_9 + tmpvar_8.w);
  o_7.zw = tmpvar_3.zw;
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = sqrt(dot (p_5, p_5));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xy;
  xlv_TEXCOORD4 = o_7;
  xlv_TEXCOORD5 = normalize((tmpvar_4 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec2 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform lowp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  mediump vec3 normalDir_4;
  mediump vec3 lightDirection_5;
  mediump vec3 ambientLighting_6;
  mediump vec4 citydarkoverlay_7;
  mediump float detailLevel_8;
  mediump vec4 detail_9;
  mediump vec4 citylightoverlaydetailZ_10;
  mediump vec4 citylightoverlaydetailY_11;
  mediump vec4 citylightoverlaydetailX_12;
  mediump vec4 citydarkoverlaydetailZ_13;
  mediump vec4 citydarkoverlaydetailY_14;
  mediump vec4 citydarkoverlaydetailX_15;
  mediump vec4 cityoverlay_16;
  mediump float vertLerp_17;
  mediump vec2 detailvertnrmxy_18;
  mediump vec2 detailvertnrmzx_19;
  mediump vec2 detailvertnrmzy_20;
  mediump vec2 detailnrmxy_21;
  mediump vec2 detailnrmzx_22;
  mediump vec2 detailnrmzy_23;
  mediump vec4 main_24;
  highp vec2 uv_25;
  mediump vec4 color_26;
  highp float r_27;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_28;
    y_over_x_28 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_29;
    highp float x_30;
    x_30 = (y_over_x_28 * inversesqrt(((y_over_x_28 * y_over_x_28) + 1.0)));
    s_29 = (sign(x_30) * (1.5708 - (sqrt((1.0 - abs(x_30))) * (1.5708 + (abs(x_30) * (-0.214602 + (abs(x_30) * (0.0865667 + (abs(x_30) * -0.0310296)))))))));
    r_27 = s_29;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_27 = (s_29 + 3.14159);
      } else {
        r_27 = (r_27 - 3.14159);
      };
    };
  } else {
    r_27 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_25.x = (0.5 + (0.159155 * r_27));
  uv_25.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_31;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_32;
    y_over_x_32 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_33;
    highp float x_34;
    x_34 = (y_over_x_32 * inversesqrt(((y_over_x_32 * y_over_x_32) + 1.0)));
    s_33 = (sign(x_34) * (1.5708 - (sqrt((1.0 - abs(x_34))) * (1.5708 + (abs(x_34) * (-0.214602 + (abs(x_34) * (0.0865667 + (abs(x_34) * -0.0310296)))))))));
    r_31 = s_33;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_31 = (s_33 + 3.14159);
      } else {
        r_31 = (r_31 - 3.14159);
      };
    };
  } else {
    r_31 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_35;
  tmpvar_35 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_36;
  tmpvar_36 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_38;
  tmpvar_38.x = (0.159155 * sqrt(dot (tmpvar_36, tmpvar_36)));
  tmpvar_38.y = dFdx(tmpvar_35);
  tmpvar_38.z = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_38.w = dFdy(tmpvar_35);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2DGradEXT (_MainTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  main_24 = tmpvar_39;
  highp vec2 tmpvar_40;
  tmpvar_40 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_23 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_22 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_21 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_20 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_19 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_18 = tmpvar_45;
  highp float tmpvar_46;
  tmpvar_46 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_17 = tmpvar_46;
  lowp vec4 tmpvar_47;
  tmpvar_47 = texture2D (_DetailVertTex, detailvertnrmzy_20);
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailTex, detailnrmzy_23);
  mediump vec4 tmpvar_49;
  tmpvar_49 = mix (tmpvar_47, tmpvar_48, vec4(vertLerp_17));
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_DetailVertTex, detailvertnrmzx_19);
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailTex, detailnrmzx_22);
  mediump vec4 tmpvar_52;
  tmpvar_52 = mix (tmpvar_50, tmpvar_51, vec4(vertLerp_17));
  lowp vec4 tmpvar_53;
  tmpvar_53 = texture2D (_DetailVertTex, detailvertnrmxy_18);
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailTex, detailnrmxy_21);
  mediump vec4 tmpvar_55;
  tmpvar_55 = mix (tmpvar_53, tmpvar_54, vec4(vertLerp_17));
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture2DGradEXT (_CityOverlayTex, uv_25, tmpvar_38.xy, tmpvar_38.zw);
  cityoverlay_16 = tmpvar_56;
  lowp vec4 tmpvar_57;
  highp vec2 P_58;
  P_58 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_57 = texture2D (_CityDarkOverlayDetailTex, P_58);
  citydarkoverlaydetailX_15 = tmpvar_57;
  lowp vec4 tmpvar_59;
  highp vec2 P_60;
  P_60 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_59 = texture2D (_CityDarkOverlayDetailTex, P_60);
  citydarkoverlaydetailY_14 = tmpvar_59;
  lowp vec4 tmpvar_61;
  highp vec2 P_62;
  P_62 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_61 = texture2D (_CityDarkOverlayDetailTex, P_62);
  citydarkoverlaydetailZ_13 = tmpvar_61;
  lowp vec4 tmpvar_63;
  highp vec2 P_64;
  P_64 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_63 = texture2D (_CityLightOverlayDetailTex, P_64);
  citylightoverlaydetailX_12 = tmpvar_63;
  lowp vec4 tmpvar_65;
  highp vec2 P_66;
  P_66 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_65 = texture2D (_CityLightOverlayDetailTex, P_66);
  citylightoverlaydetailY_11 = tmpvar_65;
  lowp vec4 tmpvar_67;
  highp vec2 P_68;
  P_68 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_67 = texture2D (_CityLightOverlayDetailTex, P_68);
  citylightoverlaydetailZ_10 = tmpvar_67;
  highp vec3 tmpvar_69;
  tmpvar_69 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_70;
  tmpvar_70 = mix (tmpvar_55, tmpvar_49, tmpvar_69.xxxx);
  detail_9 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (detail_9, tmpvar_52, tmpvar_69.yyyy);
  detail_9 = tmpvar_71;
  highp float tmpvar_72;
  tmpvar_72 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_8 = tmpvar_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (main_24 * mix (detail_9, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_8)));
  highp vec4 tmpvar_74;
  tmpvar_74 = mix (citydarkoverlaydetailZ_13, citydarkoverlaydetailX_15, tmpvar_69.xxxx);
  detail_9 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (detail_9, citydarkoverlaydetailY_14, tmpvar_69.yyyy);
  detail_9 = tmpvar_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (cityoverlay_16 * detail_9);
  citydarkoverlay_7.xyz = tmpvar_76.xyz;
  highp vec4 tmpvar_77;
  tmpvar_77 = mix (citylightoverlaydetailZ_10, citylightoverlaydetailX_12, tmpvar_69.xxxx);
  detail_9 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (detail_9, citylightoverlaydetailY_11, tmpvar_69.yyyy);
  detail_9 = tmpvar_78;
  mediump vec4 tmpvar_79;
  tmpvar_79 = (cityoverlay_16 * detail_9);
  mediump vec4 tmpvar_80;
  tmpvar_80 = (mix (tmpvar_73, tmpvar_79, tmpvar_79.wwww) * _Color);
  color_26.w = tmpvar_80.w;
  highp vec3 tmpvar_81;
  tmpvar_81 = glstate_lightmodel_ambient.xyz;
  ambientLighting_6 = tmpvar_81;
  lowp vec3 tmpvar_82;
  tmpvar_82 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_5 = tmpvar_82;
  normalDir_4 = xlv_TEXCOORD5;
  mediump float tmpvar_83;
  tmpvar_83 = clamp (dot (normalDir_4, lightDirection_5), 0.0, 1.0);
  lowp float tmpvar_84;
  tmpvar_84 = (texture2D (_LightTexture0, xlv_TEXCOORD3).w * texture2DProj (_ShadowMapTexture, xlv_TEXCOORD4).x);
  mediump float tmpvar_85;
  tmpvar_85 = clamp ((((_LightColor0.w * ((tmpvar_83 - 0.01) / 0.99)) * 4.0) * tmpvar_84), 0.0, 1.0);
  highp vec3 tmpvar_86;
  tmpvar_86 = clamp ((ambientLighting_6 + ((_MinLight + _LightColor0.xyz) * tmpvar_85)), 0.0, 1.0);
  light_3 = tmpvar_86;
  mediump vec3 tmpvar_87;
  tmpvar_87 = vec3(clamp (floor((1.0 + tmpvar_83)), 0.0, 1.0));
  specularReflection_2 = tmpvar_87;
  mediump vec3 tmpvar_88;
  mediump vec3 i_89;
  i_89 = -(lightDirection_5);
  tmpvar_88 = (i_89 - (2.0 * (dot (normalDir_4, i_89) * normalDir_4)));
  highp vec3 tmpvar_90;
  tmpvar_90 = (specularReflection_2 * (((tmpvar_84 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_88, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (light_3 + (main_24.w * tmpvar_90));
  light_3 = tmpvar_91;
  color_26.xyz = (tmpvar_80.xyz * light_3);
  citydarkoverlay_7.w = (tmpvar_76.w * (1.0 - clamp ((tmpvar_85 * 1.5), 0.0, 1.0)));
  color_26.xyz = mix (color_26, citydarkoverlay_7, citydarkoverlay_7.wwww).xyz;
  color_26.w = 1.0;
  tmpvar_1 = color_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 449
#line 432
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 436
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 440
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 444
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xy;
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec2 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec2(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 325
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 420
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec2 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 414
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform lowp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
#line 323
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 335
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 348
#line 356
#line 370
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 403
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 407
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 411
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 432
#line 449
#line 449
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 453
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 457
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp float dist = textureProj( _ShadowMapTexture, shadowCoord).x;
    mediump float lightShadowDataX = _LightShadowData.x;
    return max( float((dist > (shadowCoord.z / shadowCoord.w))), lightShadowDataX);
}
#line 460
lowp vec4 frag( in v2f IN ) {
    #line 462
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 466
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 470
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 474
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 478
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 482
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 486
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 490
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 494
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 498
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 502
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, IN._LightCoord).w * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 506
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 510
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 514
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec2 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec2(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  float tmpvar_27;
  tmpvar_27 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_28;
  tmpvar_28 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_29;
  if ((tmpvar_28 < tmpvar_27)) {
    tmpvar_29 = _LightShadowData.x;
  } else {
    tmpvar_29 = 1.0;
  };
  float tmpvar_30;
  tmpvar_30 = (tmpvar_26.w * tmpvar_29);
  float tmpvar_31;
  tmpvar_31 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_30), 0.0, 1.0);
  vec3 i_32;
  i_32 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_31)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_30 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_32 - (2.0 * (dot (xlv_TEXCOORD5, i_32) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_31 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_4 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  mediump vec3 i_98;
  i_98 = -(lightDirection_6);
  tmpvar_97 = (i_98 - (2.0 * (dot (normalDir_5, i_98) * normalDir_5)));
  highp vec3 tmpvar_99;
  tmpvar_99 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_97, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (light_3 + (main_25.w * tmpvar_99));
  light_3 = tmpvar_100;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_94 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  tmpvar_88 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_89;
  lowp vec4 tmpvar_90;
  tmpvar_90 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_89 = tmpvar_90;
  highp float tmpvar_91;
  tmpvar_91 = dot (packDist_89, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_92;
  if ((tmpvar_91 < tmpvar_88)) {
    tmpvar_92 = _LightShadowData.x;
  } else {
    tmpvar_92 = 1.0;
  };
  highp float tmpvar_93;
  tmpvar_93 = (tmpvar_87.w * tmpvar_92);
  atten_4 = tmpvar_93;
  mediump float tmpvar_94;
  tmpvar_94 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_95;
  tmpvar_95 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_94)), 0.0, 1.0);
  light_3 = tmpvar_95;
  mediump vec3 tmpvar_96;
  tmpvar_96 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_96;
  mediump vec3 tmpvar_97;
  mediump vec3 i_98;
  i_98 = -(lightDirection_6);
  tmpvar_97 = (i_98 - (2.0 * (dot (normalDir_5, i_98) * normalDir_5)));
  highp vec3 tmpvar_99;
  tmpvar_99 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_97, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_99;
  highp vec3 tmpvar_100;
  tmpvar_100 = (light_3 + (main_25.w * tmpvar_99));
  light_3 = tmpvar_100;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_94 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 454
#line 437
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 441
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 445
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 449
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 330
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 425
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 419
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 340
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 353
#line 361
#line 375
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 408
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 412
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 416
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 437
#line 454
#line 454
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 458
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 462
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 465
lowp vec4 frag( in v2f IN ) {
    #line 467
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 471
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 475
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 479
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 483
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 487
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 491
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 495
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 499
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 503
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 507
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 511
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 515
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 519
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_27;
  tmpvar_27 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  float tmpvar_28;
  tmpvar_28 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  float tmpvar_29;
  tmpvar_29 = dot (textureCube (_ShadowMapTexture, xlv_TEXCOORD4), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  float tmpvar_30;
  if ((tmpvar_29 < tmpvar_28)) {
    tmpvar_30 = _LightShadowData.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  tmpvar_31 = ((tmpvar_26.w * tmpvar_27.w) * tmpvar_30);
  float tmpvar_32;
  tmpvar_32 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_31), 0.0, 1.0);
  vec3 i_33;
  i_33 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_32)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_31 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_33 - (2.0 * (dot (xlv_TEXCOORD5, i_33) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_32 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  highp vec3 tmpvar_100;
  tmpvar_100 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_3 + (main_25.w * tmpvar_100));
  light_3 = tmpvar_101;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  tmpvar_89 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec4 packDist_90;
  lowp vec4 tmpvar_91;
  tmpvar_91 = textureCube (_ShadowMapTexture, xlv_TEXCOORD4);
  packDist_90 = tmpvar_91;
  highp float tmpvar_92;
  tmpvar_92 = dot (packDist_90, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp float tmpvar_93;
  if ((tmpvar_92 < tmpvar_89)) {
    tmpvar_93 = _LightShadowData.x;
  } else {
    tmpvar_93 = 1.0;
  };
  highp float tmpvar_94;
  tmpvar_94 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_93);
  atten_4 = tmpvar_94;
  mediump float tmpvar_95;
  tmpvar_95 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_96;
  tmpvar_96 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_95)), 0.0, 1.0);
  light_3 = tmpvar_96;
  mediump vec3 tmpvar_97;
  tmpvar_97 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_97;
  mediump vec3 tmpvar_98;
  mediump vec3 i_99;
  i_99 = -(lightDirection_6);
  tmpvar_98 = (i_99 - (2.0 * (dot (normalDir_5, i_99) * normalDir_5)));
  highp vec3 tmpvar_100;
  tmpvar_100 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_98, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_100;
  highp vec3 tmpvar_101;
  tmpvar_101 = (light_3 + (main_25.w * tmpvar_100));
  light_3 = tmpvar_101;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_95 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 438
#line 455
#line 438
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 442
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 446
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 450
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 331
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 426
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 420
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
#line 328
uniform samplerCube _LightTexture0;
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 341
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 354
#line 362
#line 376
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 409
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 413
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 417
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 438
#line 455
#line 455
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 459
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 463
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float dist = SampleCubeDistance( vec);
    return (( (dist < mydist) ) ? ( _LightShadowData.x ) : ( 1.0 ));
}
#line 466
lowp vec4 frag( in v2f IN ) {
    #line 468
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 472
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 476
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 480
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 484
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 488
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 492
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 496
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 500
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 504
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 508
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 512
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 516
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 520
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5));
  vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz)));
  vec4 shadowVals_28;
  vec3 tmpvar_29;
  tmpvar_29 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadowVals_28.x = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[0].xy)).x;
  shadowVals_28.y = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[1].xy)).x;
  shadowVals_28.z = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[2].xy)).x;
  shadowVals_28.w = texture2D (_ShadowMapTexture, (tmpvar_29.xy + _ShadowOffsets[3].xy)).x;
  bvec4 tmpvar_30;
  tmpvar_30 = lessThan (shadowVals_28, tmpvar_29.zzzz);
  vec4 tmpvar_31;
  tmpvar_31 = _LightShadowData.xxxx;
  float tmpvar_32;
  if (tmpvar_30.x) {
    tmpvar_32 = tmpvar_31.x;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_30.y) {
    tmpvar_33 = tmpvar_31.y;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_30.z) {
    tmpvar_34 = tmpvar_31.z;
  } else {
    tmpvar_34 = 1.0;
  };
  float tmpvar_35;
  if (tmpvar_30.w) {
    tmpvar_35 = tmpvar_31.w;
  } else {
    tmpvar_35 = 1.0;
  };
  vec4 tmpvar_36;
  tmpvar_36.x = tmpvar_32;
  tmpvar_36.y = tmpvar_33;
  tmpvar_36.z = tmpvar_34;
  tmpvar_36.w = tmpvar_35;
  float tmpvar_37;
  tmpvar_37 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_26.w) * tmpvar_27.w) * dot (tmpvar_36, vec4(0.25, 0.25, 0.25, 0.25)));
  float tmpvar_38;
  tmpvar_38 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_37), 0.0, 1.0);
  vec3 i_39;
  i_39 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_38)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_37 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_39 - (2.0 * (dot (xlv_TEXCOORD5, i_39) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_38 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_3 = tmpvar_112;
  mediump vec3 tmpvar_113;
  tmpvar_113 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_113;
  mediump vec3 tmpvar_114;
  mediump vec3 i_115;
  i_115 = -(lightDirection_6);
  tmpvar_114 = (i_115 - (2.0 * (dot (normalDir_5, i_115) * normalDir_5)));
  highp vec3 tmpvar_116;
  tmpvar_116 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_114, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (light_3 + (main_25.w * tmpvar_116));
  light_3 = tmpvar_117;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_111 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  lowp vec4 tmpvar_86;
  highp vec2 P_87;
  P_87 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_86 = texture2D (_LightTexture0, P_87);
  highp float tmpvar_88;
  tmpvar_88 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_89;
  tmpvar_89 = texture2D (_LightTextureB0, vec2(tmpvar_88));
  lowp float tmpvar_90;
  mediump vec4 shadows_91;
  highp vec4 shadowVals_92;
  highp vec3 tmpvar_93;
  tmpvar_93 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec2 P_94;
  P_94 = (tmpvar_93.xy + _ShadowOffsets[0].xy);
  lowp float tmpvar_95;
  tmpvar_95 = texture2D (_ShadowMapTexture, P_94).x;
  shadowVals_92.x = tmpvar_95;
  highp vec2 P_96;
  P_96 = (tmpvar_93.xy + _ShadowOffsets[1].xy);
  lowp float tmpvar_97;
  tmpvar_97 = texture2D (_ShadowMapTexture, P_96).x;
  shadowVals_92.y = tmpvar_97;
  highp vec2 P_98;
  P_98 = (tmpvar_93.xy + _ShadowOffsets[2].xy);
  lowp float tmpvar_99;
  tmpvar_99 = texture2D (_ShadowMapTexture, P_98).x;
  shadowVals_92.z = tmpvar_99;
  highp vec2 P_100;
  P_100 = (tmpvar_93.xy + _ShadowOffsets[3].xy);
  lowp float tmpvar_101;
  tmpvar_101 = texture2D (_ShadowMapTexture, P_100).x;
  shadowVals_92.w = tmpvar_101;
  bvec4 tmpvar_102;
  tmpvar_102 = lessThan (shadowVals_92, tmpvar_93.zzzz);
  highp vec4 tmpvar_103;
  tmpvar_103 = _LightShadowData.xxxx;
  highp float tmpvar_104;
  if (tmpvar_102.x) {
    tmpvar_104 = tmpvar_103.x;
  } else {
    tmpvar_104 = 1.0;
  };
  highp float tmpvar_105;
  if (tmpvar_102.y) {
    tmpvar_105 = tmpvar_103.y;
  } else {
    tmpvar_105 = 1.0;
  };
  highp float tmpvar_106;
  if (tmpvar_102.z) {
    tmpvar_106 = tmpvar_103.z;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_102.w) {
    tmpvar_107 = tmpvar_103.w;
  } else {
    tmpvar_107 = 1.0;
  };
  highp vec4 tmpvar_108;
  tmpvar_108.x = tmpvar_104;
  tmpvar_108.y = tmpvar_105;
  tmpvar_108.z = tmpvar_106;
  tmpvar_108.w = tmpvar_107;
  shadows_91 = tmpvar_108;
  mediump float tmpvar_109;
  tmpvar_109 = dot (shadows_91, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_90 = tmpvar_109;
  highp float tmpvar_110;
  tmpvar_110 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_86.w) * tmpvar_89.w) * tmpvar_90);
  atten_4 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_112;
  tmpvar_112 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_111)), 0.0, 1.0);
  light_3 = tmpvar_112;
  mediump vec3 tmpvar_113;
  tmpvar_113 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_113;
  mediump vec3 tmpvar_114;
  mediump vec3 i_115;
  i_115 = -(lightDirection_6);
  tmpvar_114 = (i_115 - (2.0 * (dot (normalDir_5, i_115) * normalDir_5)));
  highp vec3 tmpvar_116;
  tmpvar_116 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_114, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_116;
  highp vec3 tmpvar_117;
  tmpvar_117 = (light_3 + (main_25.w * tmpvar_116));
  light_3 = tmpvar_117;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_111 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 464
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 455
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 459
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform sampler2D _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    highp vec4 shadowVals;
    shadowVals.x = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[0].xy)).x;
    shadowVals.y = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[1].xy)).x;
    #line 323
    shadowVals.z = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[2].xy)).x;
    shadowVals.w = texture( _ShadowMapTexture, (vec2( coord) + _ShadowOffsets[3].xy)).x;
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, coord.zzzz), vec4( _LightShadowData.xxxx), vec4( 1.0));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 485
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 489
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 493
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 501
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 505
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 509
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 513
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 517
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 521
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 525
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 529
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform mat4 unity_World2Shadow[4];
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * gl_Vertex));
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec4 xlv_TEXCOORD4;
varying vec4 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform vec4 _ShadowOffsets[4];
uniform sampler2DShadow _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1.xyz = tmpvar_20.xyz;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3.w = tmpvar_22.w;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  vec4 shadows_25;
  vec3 tmpvar_26;
  tmpvar_26 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  shadows_25.x = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[0].xyz)).x;
  shadows_25.y = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[1].xyz)).x;
  shadows_25.z = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[2].xyz)).x;
  shadows_25.w = shadow2D (_ShadowMapTexture, (tmpvar_26 + _ShadowOffsets[3].xyz)).x;
  vec4 tmpvar_27;
  tmpvar_27 = (_LightShadowData.xxxx + (shadows_25 * (1.0 - _LightShadowData.xxxx)));
  shadows_25 = tmpvar_27;
  float tmpvar_28;
  tmpvar_28 = (((float((xlv_TEXCOORD3.z > 0.0)) * texture2D (_LightTexture0, ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5)).w) * texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz))).w) * dot (tmpvar_27, vec4(0.25, 0.25, 0.25, 0.25)));
  float tmpvar_29;
  tmpvar_29 = clamp ((((_LightColor0.w * ((tmpvar_24 - 0.01) / 0.99)) * 4.0) * tmpvar_28), 0.0, 1.0);
  vec3 i_30;
  i_30 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_29)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_28 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_30 - (2.0 * (dot (xlv_TEXCOORD5, i_30) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_29 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 16 [_WorldSpaceCameraPos]
Matrix 4 [unity_World2Shadow0]
Matrix 8 [_Object2World]
Matrix 12 [_LightMatrix0]
"vs_3_0
; 35 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.y, v0, c9
dp4 r0.x, v0, c8
dp4 r0.z, v0, c10
mov r1.z, c10.w
mov r1.x, c8.w
mov r1.y, c9.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c16
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c11
dp4 o4.w, r0, c15
dp4 o4.z, r0, c14
dp4 o4.y, r0, c13
dp4 o4.x, r0, c12
dp4 o5.w, r0, c7
dp4 o5.z, r0, c6
dp4 o5.y, r0, c5
dp4 o5.x, r0, c4
dp4 r0.y, v0, v0
dp3 r0.x, v1, v1
rsq r0.x, r0.x
mul o2.xyz, r1.w, r1
rsq r0.y, r0.y
mul r1.xyz, r0.y, v0
rcp o1.x, r1.w
mul o3.xyz, r0.x, v1
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES


#ifdef VERTEX

#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex));
  xlv_TEXCOORD4 = (unity_World2Shadow[0] * (_Object2World * _glesVertex));
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
#extension GL_EXT_shadow_samplers : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _LightTexture0;
uniform highp vec4 _ShadowOffsets[4];
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8.xyz = tmpvar_77.xyz;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27.w = tmpvar_81.w;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  lowp vec4 tmpvar_85;
  highp vec2 P_86;
  P_86 = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) + 0.5);
  tmpvar_85 = texture2D (_LightTexture0, P_86);
  highp float tmpvar_87;
  tmpvar_87 = dot (xlv_TEXCOORD3.xyz, xlv_TEXCOORD3.xyz);
  lowp vec4 tmpvar_88;
  tmpvar_88 = texture2D (_LightTextureB0, vec2(tmpvar_87));
  lowp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec3 tmpvar_91;
  tmpvar_91 = (xlv_TEXCOORD4.xyz / xlv_TEXCOORD4.w);
  highp vec3 coord_92;
  coord_92 = (tmpvar_91 + _ShadowOffsets[0].xyz);
  lowp float tmpvar_93;
  tmpvar_93 = shadow2DEXT (_ShadowMapTexture, coord_92);
  shadows_90.x = tmpvar_93;
  highp vec3 coord_94;
  coord_94 = (tmpvar_91 + _ShadowOffsets[1].xyz);
  lowp float tmpvar_95;
  tmpvar_95 = shadow2DEXT (_ShadowMapTexture, coord_94);
  shadows_90.y = tmpvar_95;
  highp vec3 coord_96;
  coord_96 = (tmpvar_91 + _ShadowOffsets[2].xyz);
  lowp float tmpvar_97;
  tmpvar_97 = shadow2DEXT (_ShadowMapTexture, coord_96);
  shadows_90.z = tmpvar_97;
  highp vec3 coord_98;
  coord_98 = (tmpvar_91 + _ShadowOffsets[3].xyz);
  lowp float tmpvar_99;
  tmpvar_99 = shadow2DEXT (_ShadowMapTexture, coord_98);
  shadows_90.w = tmpvar_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (_LightShadowData.xxxx + (shadows_90 * (1.0 - _LightShadowData.xxxx)));
  shadows_90 = tmpvar_100;
  mediump float tmpvar_101;
  tmpvar_101 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_101;
  highp float tmpvar_102;
  tmpvar_102 = (((float((xlv_TEXCOORD3.z > 0.0)) * tmpvar_85.w) * tmpvar_88.w) * tmpvar_89);
  atten_4 = tmpvar_102;
  mediump float tmpvar_103;
  tmpvar_103 = clamp ((((_LightColor0.w * ((tmpvar_84 - 0.01) / 0.99)) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_104;
  tmpvar_104 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_103)), 0.0, 1.0);
  light_3 = tmpvar_104;
  mediump vec3 tmpvar_105;
  tmpvar_105 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_105;
  mediump vec3 tmpvar_106;
  mediump vec3 i_107;
  i_107 = -(lightDirection_6);
  tmpvar_106 = (i_107 - (2.0 * (dot (normalDir_5, i_107) * normalDir_5)));
  highp vec3 tmpvar_108;
  tmpvar_108 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_106, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_108;
  highp vec3 tmpvar_109;
  tmpvar_109 = (light_3 + (main_25.w * tmpvar_108));
  light_3 = tmpvar_109;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_103 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 464
#line 447
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 451
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 455
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 459
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex));
    o._ShadowCoord = (unity_World2Shadow[0] * (_Object2World * v.vertex));
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec4(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec4(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_shadow2D(mediump sampler2DShadow s, vec3 coord) { return texture (s, coord); }
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 340
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 435
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec4 _LightCoord;
    highp vec4 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 429
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform highp vec4 _ShadowOffsets[4];
uniform sampler2D _LightTexture0;
uniform highp mat4 _LightMatrix0;
#line 331
uniform sampler2D _LightTextureB0;
#line 336
#line 350
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 363
#line 371
#line 385
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 418
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 422
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 426
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 447
#line 464
#line 464
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 468
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 472
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 336
lowp float UnitySpotAttenuate( in highp vec3 LightCoord ) {
    return texture( _LightTextureB0, vec2( dot( LightCoord, LightCoord))).w;
}
#line 332
lowp float UnitySpotCookie( in highp vec4 LightCoord ) {
    return texture( _LightTexture0, ((LightCoord.xy / LightCoord.w) + 0.5)).w;
}
#line 317
lowp float unitySampleShadow( in highp vec4 shadowCoord ) {
    #line 319
    highp vec3 coord = (shadowCoord.xyz / shadowCoord.w);
    mediump vec4 shadows;
    shadows.x = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[0])).xyz);
    shadows.y = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[1])).xyz);
    #line 323
    shadows.z = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[2])).xyz);
    shadows.w = xll_shadow2D( _ShadowMapTexture, (coord + vec3( _ShadowOffsets[3])).xyz);
    shadows = (_LightShadowData.xxxx + (shadows * (1.0 - _LightShadowData.xxxx)));
    mediump float shadow = dot( shadows, vec4( 0.25));
    #line 327
    return shadow;
}
#line 475
lowp vec4 frag( in v2f IN ) {
    #line 477
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 481
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 485
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 489
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 493
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 497
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 501
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 505
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 509
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 513
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 517
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (((float((IN._LightCoord.z > 0.0)) * UnitySpotCookie( IN._LightCoord)) * UnitySpotAttenuate( IN._LightCoord.xyz)) * unitySampleShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 521
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 525
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 529
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec4(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec4(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTexture0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 shadowVals_27;
  shadowVals_27.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_27.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_28;
  tmpvar_28 = lessThan (shadowVals_27, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_29;
  tmpvar_29 = _LightShadowData.xxxx;
  float tmpvar_30;
  if (tmpvar_28.x) {
    tmpvar_30 = tmpvar_29.x;
  } else {
    tmpvar_30 = 1.0;
  };
  float tmpvar_31;
  if (tmpvar_28.y) {
    tmpvar_31 = tmpvar_29.y;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_28.z) {
    tmpvar_32 = tmpvar_29.z;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_28.w) {
    tmpvar_33 = tmpvar_29.w;
  } else {
    tmpvar_33 = 1.0;
  };
  vec4 tmpvar_34;
  tmpvar_34.x = tmpvar_30;
  tmpvar_34.y = tmpvar_31;
  tmpvar_34.z = tmpvar_32;
  tmpvar_34.w = tmpvar_33;
  float tmpvar_35;
  tmpvar_35 = (tmpvar_26.w * dot (tmpvar_34, vec4(0.25, 0.25, 0.25, 0.25)));
  float tmpvar_36;
  tmpvar_36 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_35), 0.0, 1.0);
  vec3 i_37;
  i_37 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_36)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_35 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_37 - (2.0 * (dot (xlv_TEXCOORD5, i_37) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_36 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_4 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_3 = tmpvar_114;
  mediump vec3 tmpvar_115;
  tmpvar_115 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_115;
  mediump vec3 tmpvar_116;
  mediump vec3 i_117;
  i_117 = -(lightDirection_6);
  tmpvar_116 = (i_117 - (2.0 * (dot (normalDir_5, i_117) * normalDir_5)));
  highp vec3 tmpvar_118;
  tmpvar_118 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_116, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_118;
  highp vec3 tmpvar_119;
  tmpvar_119 = (light_3 + (main_25.w * tmpvar_118));
  light_3 = tmpvar_119;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_113 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTexture0, vec2(tmpvar_86));
  highp float tmpvar_88;
  mediump vec4 shadows_89;
  highp vec4 shadowVals_90;
  highp float tmpvar_91;
  tmpvar_91 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_92;
  vec_92 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_93;
  lowp vec4 tmpvar_94;
  tmpvar_94 = textureCube (_ShadowMapTexture, vec_92);
  packDist_93 = tmpvar_94;
  shadowVals_90.x = dot (packDist_93, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_95;
  vec_95 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_96;
  lowp vec4 tmpvar_97;
  tmpvar_97 = textureCube (_ShadowMapTexture, vec_95);
  packDist_96 = tmpvar_97;
  shadowVals_90.y = dot (packDist_96, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_98;
  vec_98 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_99;
  lowp vec4 tmpvar_100;
  tmpvar_100 = textureCube (_ShadowMapTexture, vec_98);
  packDist_99 = tmpvar_100;
  shadowVals_90.z = dot (packDist_99, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_101;
  vec_101 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_102;
  lowp vec4 tmpvar_103;
  tmpvar_103 = textureCube (_ShadowMapTexture, vec_101);
  packDist_102 = tmpvar_103;
  shadowVals_90.w = dot (packDist_102, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_104;
  tmpvar_104 = lessThan (shadowVals_90, vec4(tmpvar_91));
  highp vec4 tmpvar_105;
  tmpvar_105 = _LightShadowData.xxxx;
  highp float tmpvar_106;
  if (tmpvar_104.x) {
    tmpvar_106 = tmpvar_105.x;
  } else {
    tmpvar_106 = 1.0;
  };
  highp float tmpvar_107;
  if (tmpvar_104.y) {
    tmpvar_107 = tmpvar_105.y;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_104.z) {
    tmpvar_108 = tmpvar_105.z;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_104.w) {
    tmpvar_109 = tmpvar_105.w;
  } else {
    tmpvar_109 = 1.0;
  };
  highp vec4 tmpvar_110;
  tmpvar_110.x = tmpvar_106;
  tmpvar_110.y = tmpvar_107;
  tmpvar_110.z = tmpvar_108;
  tmpvar_110.w = tmpvar_109;
  shadows_89 = tmpvar_110;
  mediump float tmpvar_111;
  tmpvar_111 = dot (shadows_89, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_88 = tmpvar_111;
  highp float tmpvar_112;
  tmpvar_112 = (tmpvar_87.w * tmpvar_88);
  atten_4 = tmpvar_112;
  mediump float tmpvar_113;
  tmpvar_113 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_114;
  tmpvar_114 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_113)), 0.0, 1.0);
  light_3 = tmpvar_114;
  mediump vec3 tmpvar_115;
  tmpvar_115 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_115;
  mediump vec3 tmpvar_116;
  mediump vec3 i_117;
  i_117 = -(lightDirection_6);
  tmpvar_116 = (i_117 - (2.0 * (dot (normalDir_5, i_117) * normalDir_5)));
  highp vec3 tmpvar_118;
  tmpvar_118 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_116, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_118;
  highp vec3 tmpvar_119;
  tmpvar_119 = (light_3 + (main_25.w * tmpvar_118));
  light_3 = tmpvar_119;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_113 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 460
#line 443
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 447
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 451
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 455
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 336
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 431
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 425
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform sampler2D _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
#line 346
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 359
#line 367
#line 381
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 414
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 418
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 422
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 443
#line 460
#line 460
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 464
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 468
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 471
lowp vec4 frag( in v2f IN ) {
    #line 473
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 477
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 481
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 485
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 489
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 493
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 497
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 501
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 505
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 509
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 513
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = (texture( _LightTexture0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 517
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 521
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 525
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL
#ifdef VERTEX
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform mat4 _LightMatrix0;
uniform mat4 _Object2World;

uniform vec4 _LightPositionRange;
uniform vec3 _WorldSpaceCameraPos;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = (_Object2World * gl_Vertex).xyz;
  vec3 p_2;
  p_2 = (tmpvar_1 - _WorldSpaceCameraPos);
  gl_Position = (gl_ModelViewProjectionMatrix * gl_Vertex);
  xlv_TEXCOORD0 = sqrt(dot (p_2, p_2));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * gl_Vertex).xyz));
  xlv_TEXCOORD2 = normalize(gl_Normal);
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * gl_Vertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * gl_Vertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_1 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(gl_Vertex)).xyz;
}


#endif
#ifdef FRAGMENT
#extension GL_ARB_shader_texture_lod : enable
varying vec3 xlv_TEXCOORD6;
varying vec3 xlv_TEXCOORD5;
varying vec3 xlv_TEXCOORD4;
varying vec3 xlv_TEXCOORD3;
varying vec3 xlv_TEXCOORD2;
varying vec3 xlv_TEXCOORD1;
varying float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform float _MinLight;
uniform float _DetailDist;
uniform float _DetailVertScale;
uniform float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform float _Shininess;
uniform vec4 _Color;
uniform vec4 _SpecColor;
uniform vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;

uniform vec4 _LightShadowData;
uniform vec4 _LightPositionRange;
uniform vec4 _WorldSpaceLightPos0;
void main ()
{
  vec4 citydarkoverlay_1;
  vec2 uv_2;
  vec4 color_3;
  float r_4;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    float y_over_x_5;
    y_over_x_5 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_6;
    float x_7;
    x_7 = (y_over_x_5 * inversesqrt(((y_over_x_5 * y_over_x_5) + 1.0)));
    s_6 = (sign(x_7) * (1.5708 - (sqrt((1.0 - abs(x_7))) * (1.5708 + (abs(x_7) * (-0.214602 + (abs(x_7) * (0.0865667 + (abs(x_7) * -0.0310296)))))))));
    r_4 = s_6;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_4 = (s_6 + 3.14159);
      } else {
        r_4 = (r_4 - 3.14159);
      };
    };
  } else {
    r_4 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_2.x = (0.5 + (0.159155 * r_4));
  uv_2.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  float r_8;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    float y_over_x_9;
    y_over_x_9 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    float s_10;
    float x_11;
    x_11 = (y_over_x_9 * inversesqrt(((y_over_x_9 * y_over_x_9) + 1.0)));
    s_10 = (sign(x_11) * (1.5708 - (sqrt((1.0 - abs(x_11))) * (1.5708 + (abs(x_11) * (-0.214602 + (abs(x_11) * (0.0865667 + (abs(x_11) * -0.0310296)))))))));
    r_8 = s_10;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_8 = (s_10 + 3.14159);
      } else {
        r_8 = (r_8 - 3.14159);
      };
    };
  } else {
    r_8 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  float tmpvar_12;
  tmpvar_12 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  vec2 tmpvar_13;
  tmpvar_13 = dFdx(xlv_TEXCOORD6.xy);
  vec2 tmpvar_14;
  tmpvar_14 = dFdy(xlv_TEXCOORD6.xy);
  vec4 tmpvar_15;
  tmpvar_15.x = (0.159155 * sqrt(dot (tmpvar_13, tmpvar_13)));
  tmpvar_15.y = dFdx(tmpvar_12);
  tmpvar_15.z = (0.159155 * sqrt(dot (tmpvar_14, tmpvar_14)));
  tmpvar_15.w = dFdy(tmpvar_12);
  vec4 tmpvar_16;
  tmpvar_16 = texture2DGradARB (_MainTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  float tmpvar_17;
  tmpvar_17 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vec4 tmpvar_18;
  tmpvar_18 = texture2DGradARB (_CityOverlayTex, uv_2, tmpvar_15.xy, tmpvar_15.zw);
  vec3 tmpvar_19;
  tmpvar_19 = abs(xlv_TEXCOORD6);
  vec4 tmpvar_20;
  tmpvar_20 = (tmpvar_18 * mix (mix (texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityDarkOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  citydarkoverlay_1 = tmpvar_20;
  vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_18 * mix (mix (texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.xy * _CityOverlayDetailScale)), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zy * _CityOverlayDetailScale)), tmpvar_19.xxxx), texture2D (_CityLightOverlayDetailTex, (xlv_TEXCOORD6.zx * _CityOverlayDetailScale)), tmpvar_19.yyyy));
  vec4 tmpvar_22;
  tmpvar_22 = (mix ((tmpvar_16 * mix (mix (mix (mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.xy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.xy * _DetailScale)), vec4(tmpvar_17)), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zy * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zy * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.xxxx), mix (texture2D (_DetailVertTex, (xlv_TEXCOORD6.zx * _DetailVertScale)), texture2D (_DetailTex, (xlv_TEXCOORD6.zx * _DetailScale)), vec4(tmpvar_17)), tmpvar_19.yyyy), vec4(1.0, 1.0, 1.0, 1.0), vec4(clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0)))), tmpvar_21, tmpvar_21.wwww) * _Color);
  color_3 = tmpvar_22;
  vec4 tmpvar_23;
  tmpvar_23 = normalize(_WorldSpaceLightPos0);
  float tmpvar_24;
  tmpvar_24 = clamp (dot (xlv_TEXCOORD5, tmpvar_23.xyz), 0.0, 1.0);
  float tmpvar_25;
  tmpvar_25 = ((tmpvar_24 - 0.01) / 0.99);
  vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(dot (xlv_TEXCOORD3, xlv_TEXCOORD3)));
  vec4 tmpvar_27;
  tmpvar_27 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  vec4 shadowVals_28;
  shadowVals_28.x = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.y = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.z = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  shadowVals_28.w = dot (textureCube (_ShadowMapTexture, (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125))), vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_29;
  tmpvar_29 = lessThan (shadowVals_28, vec4(((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97)));
  vec4 tmpvar_30;
  tmpvar_30 = _LightShadowData.xxxx;
  float tmpvar_31;
  if (tmpvar_29.x) {
    tmpvar_31 = tmpvar_30.x;
  } else {
    tmpvar_31 = 1.0;
  };
  float tmpvar_32;
  if (tmpvar_29.y) {
    tmpvar_32 = tmpvar_30.y;
  } else {
    tmpvar_32 = 1.0;
  };
  float tmpvar_33;
  if (tmpvar_29.z) {
    tmpvar_33 = tmpvar_30.z;
  } else {
    tmpvar_33 = 1.0;
  };
  float tmpvar_34;
  if (tmpvar_29.w) {
    tmpvar_34 = tmpvar_30.w;
  } else {
    tmpvar_34 = 1.0;
  };
  vec4 tmpvar_35;
  tmpvar_35.x = tmpvar_31;
  tmpvar_35.y = tmpvar_32;
  tmpvar_35.z = tmpvar_33;
  tmpvar_35.w = tmpvar_34;
  float tmpvar_36;
  tmpvar_36 = ((tmpvar_26.w * tmpvar_27.w) * dot (tmpvar_35, vec4(0.25, 0.25, 0.25, 0.25)));
  float tmpvar_37;
  tmpvar_37 = clamp ((((_LightColor0.w * tmpvar_25) * 4.0) * tmpvar_36), 0.0, 1.0);
  vec3 i_38;
  i_38 = -(tmpvar_23.xyz);
  color_3.xyz = (tmpvar_22.xyz * (clamp ((gl_LightModel.ambient.xyz + ((_MinLight + _LightColor0.xyz) * tmpvar_37)), 0.0, 1.0) + (tmpvar_16.w * (vec3(clamp (floor((1.0 + tmpvar_24)), 0.0, 1.0)) * (((tmpvar_36 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot ((i_38 - (2.0 * (dot (xlv_TEXCOORD5, i_38) * xlv_TEXCOORD5))), xlv_TEXCOORD1), 0.0, 1.0), _Shininess))))));
  citydarkoverlay_1.w = (tmpvar_20.w * (1.0 - clamp ((tmpvar_37 * 1.5), 0.0, 1.0)));
  color_3.xyz = mix (color_3, citydarkoverlay_1, citydarkoverlay_1.wwww).xyz;
  color_3.w = 1.0;
  gl_FragData[0] = color_3;
}


#endif
"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Bind "vertex" Vertex
Bind "normal" Normal
Matrix 0 [glstate_matrix_mvp]
Vector 12 [_WorldSpaceCameraPos]
Vector 13 [_LightPositionRange]
Matrix 4 [_Object2World]
Matrix 8 [_LightMatrix0]
"vs_3_0
; 31 ALU
dcl_position o0
dcl_texcoord0 o1
dcl_texcoord1 o2
dcl_texcoord2 o3
dcl_texcoord3 o4
dcl_texcoord4 o5
dcl_texcoord5 o6
dcl_texcoord6 o7
dcl_position0 v0
dcl_normal0 v1
dp4 r0.z, v0, c6
dp4 r0.y, v0, c5
dp4 r0.x, v0, c4
mov r1.z, c6.w
mov r1.x, c4.w
mov r1.y, c5.w
add r2.xyz, r0, -r1
dp3 r0.w, r2, r2
rsq r1.w, r0.w
add r1.xyz, -r0, c12
dp3 r0.w, r1, r1
mul o6.xyz, r1.w, r2
rsq r1.w, r0.w
dp4 r0.w, v0, c7
mul o2.xyz, r1.w, r1
dp4 r1.x, v0, v0
rsq r1.x, r1.x
mul r1.xyz, r1.x, v0
dp4 o4.z, r0, c10
dp4 o4.y, r0, c9
dp4 o4.x, r0, c8
dp3 r0.w, v1, v1
rsq r0.w, r0.w
rcp o1.x, r1.w
mul o3.xyz, r0.w, v1
add o5.xyz, r0, -c13
mov o7.xyz, -r1
dp4 o0.w, v0, c3
dp4 o0.z, v0, c2
dp4 o0.y, v0, c1
dp4 o0.x, v0, c0
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_4 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_3 = tmpvar_115;
  mediump vec3 tmpvar_116;
  tmpvar_116 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_116;
  mediump vec3 tmpvar_117;
  mediump vec3 i_118;
  i_118 = -(lightDirection_6);
  tmpvar_117 = (i_118 - (2.0 * (dot (normalDir_5, i_118) * normalDir_5)));
  highp vec3 tmpvar_119;
  tmpvar_119 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_117, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_119;
  highp vec3 tmpvar_120;
  tmpvar_120 = (light_3 + (main_25.w * tmpvar_119));
  light_3 = tmpvar_120;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_114 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES


#ifdef VERTEX

varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform highp mat4 _LightMatrix0;
uniform highp mat4 _Object2World;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _LightPositionRange;
uniform highp vec3 _WorldSpaceCameraPos;
attribute vec3 _glesNormal;
attribute vec4 _glesVertex;
void main ()
{
  mediump vec3 nrm_1;
  highp vec3 tmpvar_2;
  highp vec3 tmpvar_3;
  tmpvar_3 = (_Object2World * _glesVertex).xyz;
  highp vec3 p_4;
  p_4 = (tmpvar_3 - _WorldSpaceCameraPos);
  highp vec3 tmpvar_5;
  tmpvar_5 = normalize(normalize(_glesNormal));
  nrm_1 = tmpvar_5;
  tmpvar_2 = nrm_1;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = sqrt(dot (p_4, p_4));
  xlv_TEXCOORD1 = normalize((_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz));
  xlv_TEXCOORD2 = tmpvar_2;
  xlv_TEXCOORD3 = (_LightMatrix0 * (_Object2World * _glesVertex)).xyz;
  xlv_TEXCOORD4 = ((_Object2World * _glesVertex).xyz - _LightPositionRange.xyz);
  xlv_TEXCOORD5 = normalize((tmpvar_3 - (_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).xyz));
  xlv_TEXCOORD6 = -(normalize(_glesVertex)).xyz;
}



#endif
#ifdef FRAGMENT

#extension GL_EXT_shader_texture_lod : enable
#extension GL_OES_standard_derivatives : enable
varying highp vec3 xlv_TEXCOORD6;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec3 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD3;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD1;
varying highp float xlv_TEXCOORD0;
uniform sampler2D _CityLightOverlayDetailTex;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityOverlayTex;
uniform highp float _MinLight;
uniform highp float _DetailDist;
uniform highp float _DetailVertScale;
uniform highp float _DetailScale;
uniform sampler2D _DetailVertTex;
uniform sampler2D _DetailTex;
uniform sampler2D _MainTex;
uniform highp float _Shininess;
uniform lowp vec4 _Color;
uniform lowp vec4 _SpecColor;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTextureB0;
uniform samplerCube _LightTexture0;
uniform samplerCube _ShadowMapTexture;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp vec4 _LightShadowData;
uniform highp vec4 _LightPositionRange;
uniform highp vec4 _WorldSpaceLightPos0;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec3 specularReflection_2;
  mediump vec3 light_3;
  lowp float atten_4;
  mediump vec3 normalDir_5;
  mediump vec3 lightDirection_6;
  mediump vec3 ambientLighting_7;
  mediump vec4 citydarkoverlay_8;
  mediump float detailLevel_9;
  mediump vec4 detail_10;
  mediump vec4 citylightoverlaydetailZ_11;
  mediump vec4 citylightoverlaydetailY_12;
  mediump vec4 citylightoverlaydetailX_13;
  mediump vec4 citydarkoverlaydetailZ_14;
  mediump vec4 citydarkoverlaydetailY_15;
  mediump vec4 citydarkoverlaydetailX_16;
  mediump vec4 cityoverlay_17;
  mediump float vertLerp_18;
  mediump vec2 detailvertnrmxy_19;
  mediump vec2 detailvertnrmzx_20;
  mediump vec2 detailvertnrmzy_21;
  mediump vec2 detailnrmxy_22;
  mediump vec2 detailnrmzx_23;
  mediump vec2 detailnrmzy_24;
  mediump vec4 main_25;
  highp vec2 uv_26;
  mediump vec4 color_27;
  highp float r_28;
  if ((abs(xlv_TEXCOORD6.z) > (1e-08 * abs(xlv_TEXCOORD6.x)))) {
    highp float y_over_x_29;
    y_over_x_29 = (xlv_TEXCOORD6.x / xlv_TEXCOORD6.z);
    float s_30;
    highp float x_31;
    x_31 = (y_over_x_29 * inversesqrt(((y_over_x_29 * y_over_x_29) + 1.0)));
    s_30 = (sign(x_31) * (1.5708 - (sqrt((1.0 - abs(x_31))) * (1.5708 + (abs(x_31) * (-0.214602 + (abs(x_31) * (0.0865667 + (abs(x_31) * -0.0310296)))))))));
    r_28 = s_30;
    if ((xlv_TEXCOORD6.z < 0.0)) {
      if ((xlv_TEXCOORD6.x >= 0.0)) {
        r_28 = (s_30 + 3.14159);
      } else {
        r_28 = (r_28 - 3.14159);
      };
    };
  } else {
    r_28 = (sign(xlv_TEXCOORD6.x) * 1.5708);
  };
  uv_26.x = (0.5 + (0.159155 * r_28));
  uv_26.y = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.y) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.y))) * (1.5708 + (abs(xlv_TEXCOORD6.y) * (-0.214602 + (abs(xlv_TEXCOORD6.y) * (0.0865667 + (abs(xlv_TEXCOORD6.y) * -0.0310296)))))))))));
  highp float r_32;
  if ((abs(xlv_TEXCOORD6.x) > (1e-08 * abs(xlv_TEXCOORD6.y)))) {
    highp float y_over_x_33;
    y_over_x_33 = (xlv_TEXCOORD6.y / xlv_TEXCOORD6.x);
    highp float s_34;
    highp float x_35;
    x_35 = (y_over_x_33 * inversesqrt(((y_over_x_33 * y_over_x_33) + 1.0)));
    s_34 = (sign(x_35) * (1.5708 - (sqrt((1.0 - abs(x_35))) * (1.5708 + (abs(x_35) * (-0.214602 + (abs(x_35) * (0.0865667 + (abs(x_35) * -0.0310296)))))))));
    r_32 = s_34;
    if ((xlv_TEXCOORD6.x < 0.0)) {
      if ((xlv_TEXCOORD6.y >= 0.0)) {
        r_32 = (s_34 + 3.14159);
      } else {
        r_32 = (r_32 - 3.14159);
      };
    };
  } else {
    r_32 = (sign(xlv_TEXCOORD6.y) * 1.5708);
  };
  highp float tmpvar_36;
  tmpvar_36 = (0.31831 * (1.5708 - (sign(xlv_TEXCOORD6.z) * (1.5708 - (sqrt((1.0 - abs(xlv_TEXCOORD6.z))) * (1.5708 + (abs(xlv_TEXCOORD6.z) * (-0.214602 + (abs(xlv_TEXCOORD6.z) * (0.0865667 + (abs(xlv_TEXCOORD6.z) * -0.0310296)))))))))));
  highp vec2 tmpvar_37;
  tmpvar_37 = dFdx(xlv_TEXCOORD6.xy);
  highp vec2 tmpvar_38;
  tmpvar_38 = dFdy(xlv_TEXCOORD6.xy);
  highp vec4 tmpvar_39;
  tmpvar_39.x = (0.159155 * sqrt(dot (tmpvar_37, tmpvar_37)));
  tmpvar_39.y = dFdx(tmpvar_36);
  tmpvar_39.z = (0.159155 * sqrt(dot (tmpvar_38, tmpvar_38)));
  tmpvar_39.w = dFdy(tmpvar_36);
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2DGradEXT (_MainTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  main_25 = tmpvar_40;
  highp vec2 tmpvar_41;
  tmpvar_41 = (xlv_TEXCOORD6.zy * _DetailScale);
  detailnrmzy_24 = tmpvar_41;
  highp vec2 tmpvar_42;
  tmpvar_42 = (xlv_TEXCOORD6.zx * _DetailScale);
  detailnrmzx_23 = tmpvar_42;
  highp vec2 tmpvar_43;
  tmpvar_43 = (xlv_TEXCOORD6.xy * _DetailScale);
  detailnrmxy_22 = tmpvar_43;
  highp vec2 tmpvar_44;
  tmpvar_44 = (xlv_TEXCOORD6.zy * _DetailVertScale);
  detailvertnrmzy_21 = tmpvar_44;
  highp vec2 tmpvar_45;
  tmpvar_45 = (xlv_TEXCOORD6.zx * _DetailVertScale);
  detailvertnrmzx_20 = tmpvar_45;
  highp vec2 tmpvar_46;
  tmpvar_46 = (xlv_TEXCOORD6.xy * _DetailVertScale);
  detailvertnrmxy_19 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = clamp (((32.0 * (clamp (dot (xlv_TEXCOORD2, -(xlv_TEXCOORD6)), 0.0, 1.0) - 0.95)) + 0.5), 0.0, 1.0);
  vertLerp_18 = tmpvar_47;
  lowp vec4 tmpvar_48;
  tmpvar_48 = texture2D (_DetailVertTex, detailvertnrmzy_21);
  lowp vec4 tmpvar_49;
  tmpvar_49 = texture2D (_DetailTex, detailnrmzy_24);
  mediump vec4 tmpvar_50;
  tmpvar_50 = mix (tmpvar_48, tmpvar_49, vec4(vertLerp_18));
  lowp vec4 tmpvar_51;
  tmpvar_51 = texture2D (_DetailVertTex, detailvertnrmzx_20);
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_DetailTex, detailnrmzx_23);
  mediump vec4 tmpvar_53;
  tmpvar_53 = mix (tmpvar_51, tmpvar_52, vec4(vertLerp_18));
  lowp vec4 tmpvar_54;
  tmpvar_54 = texture2D (_DetailVertTex, detailvertnrmxy_19);
  lowp vec4 tmpvar_55;
  tmpvar_55 = texture2D (_DetailTex, detailnrmxy_22);
  mediump vec4 tmpvar_56;
  tmpvar_56 = mix (tmpvar_54, tmpvar_55, vec4(vertLerp_18));
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture2DGradEXT (_CityOverlayTex, uv_26, tmpvar_39.xy, tmpvar_39.zw);
  cityoverlay_17 = tmpvar_57;
  lowp vec4 tmpvar_58;
  highp vec2 P_59;
  P_59 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_58 = texture2D (_CityDarkOverlayDetailTex, P_59);
  citydarkoverlaydetailX_16 = tmpvar_58;
  lowp vec4 tmpvar_60;
  highp vec2 P_61;
  P_61 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_60 = texture2D (_CityDarkOverlayDetailTex, P_61);
  citydarkoverlaydetailY_15 = tmpvar_60;
  lowp vec4 tmpvar_62;
  highp vec2 P_63;
  P_63 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_62 = texture2D (_CityDarkOverlayDetailTex, P_63);
  citydarkoverlaydetailZ_14 = tmpvar_62;
  lowp vec4 tmpvar_64;
  highp vec2 P_65;
  P_65 = (xlv_TEXCOORD6.zy * _CityOverlayDetailScale);
  tmpvar_64 = texture2D (_CityLightOverlayDetailTex, P_65);
  citylightoverlaydetailX_13 = tmpvar_64;
  lowp vec4 tmpvar_66;
  highp vec2 P_67;
  P_67 = (xlv_TEXCOORD6.zx * _CityOverlayDetailScale);
  tmpvar_66 = texture2D (_CityLightOverlayDetailTex, P_67);
  citylightoverlaydetailY_12 = tmpvar_66;
  lowp vec4 tmpvar_68;
  highp vec2 P_69;
  P_69 = (xlv_TEXCOORD6.xy * _CityOverlayDetailScale);
  tmpvar_68 = texture2D (_CityLightOverlayDetailTex, P_69);
  citylightoverlaydetailZ_11 = tmpvar_68;
  highp vec3 tmpvar_70;
  tmpvar_70 = abs(xlv_TEXCOORD6);
  highp vec4 tmpvar_71;
  tmpvar_71 = mix (tmpvar_56, tmpvar_50, tmpvar_70.xxxx);
  detail_10 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72 = mix (detail_10, tmpvar_53, tmpvar_70.yyyy);
  detail_10 = tmpvar_72;
  highp float tmpvar_73;
  tmpvar_73 = clamp (((2.0 * _DetailDist) * xlv_TEXCOORD0), 0.0, 1.0);
  detailLevel_9 = tmpvar_73;
  mediump vec4 tmpvar_74;
  tmpvar_74 = (main_25 * mix (detail_10, vec4(1.0, 1.0, 1.0, 1.0), vec4(detailLevel_9)));
  highp vec4 tmpvar_75;
  tmpvar_75 = mix (citydarkoverlaydetailZ_14, citydarkoverlaydetailX_16, tmpvar_70.xxxx);
  detail_10 = tmpvar_75;
  highp vec4 tmpvar_76;
  tmpvar_76 = mix (detail_10, citydarkoverlaydetailY_15, tmpvar_70.yyyy);
  detail_10 = tmpvar_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (cityoverlay_17 * detail_10);
  citydarkoverlay_8 = tmpvar_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = mix (citylightoverlaydetailZ_11, citylightoverlaydetailX_13, tmpvar_70.xxxx);
  detail_10 = tmpvar_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = mix (detail_10, citylightoverlaydetailY_12, tmpvar_70.yyyy);
  detail_10 = tmpvar_79;
  mediump vec4 tmpvar_80;
  tmpvar_80 = (cityoverlay_17 * detail_10);
  mediump vec4 tmpvar_81;
  tmpvar_81 = (mix (tmpvar_74, tmpvar_80, tmpvar_80.wwww) * _Color);
  color_27 = tmpvar_81;
  highp vec3 tmpvar_82;
  tmpvar_82 = glstate_lightmodel_ambient.xyz;
  ambientLighting_7 = tmpvar_82;
  highp vec3 tmpvar_83;
  tmpvar_83 = normalize(_WorldSpaceLightPos0).xyz;
  lightDirection_6 = tmpvar_83;
  normalDir_5 = xlv_TEXCOORD5;
  mediump float tmpvar_84;
  tmpvar_84 = clamp (dot (normalDir_5, lightDirection_6), 0.0, 1.0);
  mediump float tmpvar_85;
  tmpvar_85 = ((tmpvar_84 - 0.01) / 0.99);
  highp float tmpvar_86;
  tmpvar_86 = dot (xlv_TEXCOORD3, xlv_TEXCOORD3);
  lowp vec4 tmpvar_87;
  tmpvar_87 = texture2D (_LightTextureB0, vec2(tmpvar_86));
  lowp vec4 tmpvar_88;
  tmpvar_88 = textureCube (_LightTexture0, xlv_TEXCOORD3);
  highp float tmpvar_89;
  mediump vec4 shadows_90;
  highp vec4 shadowVals_91;
  highp float tmpvar_92;
  tmpvar_92 = ((sqrt(dot (xlv_TEXCOORD4, xlv_TEXCOORD4)) * _LightPositionRange.w) * 0.97);
  highp vec3 vec_93;
  vec_93 = (xlv_TEXCOORD4 + vec3(0.0078125, 0.0078125, 0.0078125));
  highp vec4 packDist_94;
  lowp vec4 tmpvar_95;
  tmpvar_95 = textureCube (_ShadowMapTexture, vec_93);
  packDist_94 = tmpvar_95;
  shadowVals_91.x = dot (packDist_94, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_96;
  vec_96 = (xlv_TEXCOORD4 + vec3(-0.0078125, -0.0078125, 0.0078125));
  highp vec4 packDist_97;
  lowp vec4 tmpvar_98;
  tmpvar_98 = textureCube (_ShadowMapTexture, vec_96);
  packDist_97 = tmpvar_98;
  shadowVals_91.y = dot (packDist_97, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_99;
  vec_99 = (xlv_TEXCOORD4 + vec3(-0.0078125, 0.0078125, -0.0078125));
  highp vec4 packDist_100;
  lowp vec4 tmpvar_101;
  tmpvar_101 = textureCube (_ShadowMapTexture, vec_99);
  packDist_100 = tmpvar_101;
  shadowVals_91.z = dot (packDist_100, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  highp vec3 vec_102;
  vec_102 = (xlv_TEXCOORD4 + vec3(0.0078125, -0.0078125, -0.0078125));
  highp vec4 packDist_103;
  lowp vec4 tmpvar_104;
  tmpvar_104 = textureCube (_ShadowMapTexture, vec_102);
  packDist_103 = tmpvar_104;
  shadowVals_91.w = dot (packDist_103, vec4(1.0, 0.00392157, 1.53787e-05, 6.22737e-09));
  bvec4 tmpvar_105;
  tmpvar_105 = lessThan (shadowVals_91, vec4(tmpvar_92));
  highp vec4 tmpvar_106;
  tmpvar_106 = _LightShadowData.xxxx;
  highp float tmpvar_107;
  if (tmpvar_105.x) {
    tmpvar_107 = tmpvar_106.x;
  } else {
    tmpvar_107 = 1.0;
  };
  highp float tmpvar_108;
  if (tmpvar_105.y) {
    tmpvar_108 = tmpvar_106.y;
  } else {
    tmpvar_108 = 1.0;
  };
  highp float tmpvar_109;
  if (tmpvar_105.z) {
    tmpvar_109 = tmpvar_106.z;
  } else {
    tmpvar_109 = 1.0;
  };
  highp float tmpvar_110;
  if (tmpvar_105.w) {
    tmpvar_110 = tmpvar_106.w;
  } else {
    tmpvar_110 = 1.0;
  };
  highp vec4 tmpvar_111;
  tmpvar_111.x = tmpvar_107;
  tmpvar_111.y = tmpvar_108;
  tmpvar_111.z = tmpvar_109;
  tmpvar_111.w = tmpvar_110;
  shadows_90 = tmpvar_111;
  mediump float tmpvar_112;
  tmpvar_112 = dot (shadows_90, vec4(0.25, 0.25, 0.25, 0.25));
  tmpvar_89 = tmpvar_112;
  highp float tmpvar_113;
  tmpvar_113 = ((tmpvar_87.w * tmpvar_88.w) * tmpvar_89);
  atten_4 = tmpvar_113;
  mediump float tmpvar_114;
  tmpvar_114 = clamp ((((_LightColor0.w * tmpvar_85) * 4.0) * atten_4), 0.0, 1.0);
  highp vec3 tmpvar_115;
  tmpvar_115 = clamp ((ambientLighting_7 + ((_MinLight + _LightColor0.xyz) * tmpvar_114)), 0.0, 1.0);
  light_3 = tmpvar_115;
  mediump vec3 tmpvar_116;
  tmpvar_116 = vec3(clamp (floor((1.0 + tmpvar_84)), 0.0, 1.0));
  specularReflection_2 = tmpvar_116;
  mediump vec3 tmpvar_117;
  mediump vec3 i_118;
  i_118 = -(lightDirection_6);
  tmpvar_117 = (i_118 - (2.0 * (dot (normalDir_5, i_118) * normalDir_5)));
  highp vec3 tmpvar_119;
  tmpvar_119 = (specularReflection_2 * (((atten_4 * _LightColor0.xyz) * _SpecColor.xyz) * pow (clamp (dot (tmpvar_117, xlv_TEXCOORD1), 0.0, 1.0), _Shininess)));
  specularReflection_2 = tmpvar_119;
  highp vec3 tmpvar_120;
  tmpvar_120 = (light_3 + (main_25.w * tmpvar_119));
  light_3 = tmpvar_120;
  color_27.xyz = (tmpvar_81.xyz * light_3);
  citydarkoverlay_8.w = (tmpvar_77.w * (1.0 - clamp ((tmpvar_114 * 1.5), 0.0, 1.0)));
  color_27.xyz = mix (color_27, citydarkoverlay_8, citydarkoverlay_8.wwww).xyz;
  color_27.w = 1.0;
  tmpvar_1 = color_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3#version 300 es


#ifdef VERTEX

#define gl_Vertex _glesVertex
in vec4 _glesVertex;
#define gl_Normal (normalize(_glesNormal))
in vec3 _glesNormal;

#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 461
#line 444
v2f vert( in appdata_t v ) {
    v2f o;
    o.pos = (glstate_matrix_mvp * v.vertex);
    #line 448
    highp vec3 vertexPos = (_Object2World * v.vertex).xyz;
    o.viewDist = distance( vertexPos, _WorldSpaceCameraPos);
    mediump vec3 nrm = normalize(v.normal);
    highp vec3 origin = (_Object2World * vec4( 0.0, 0.0, 0.0, 1.0)).xyz;
    #line 452
    o.worldNormal = normalize((vertexPos - origin));
    o.sphereNormal = vec3( (-normalize(v.vertex)));
    o.viewDir = normalize((_WorldSpaceCameraPos.xyz - (_Object2World * v.vertex).xyz));
    o.normal = nrm;
    #line 456
    o._LightCoord = (_LightMatrix0 * (_Object2World * v.vertex)).xyz;
    o._ShadowCoord = ((_Object2World * v.vertex).xyz - _LightPositionRange.xyz);
    return o;
}
out highp float xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
out highp vec3 xlv_TEXCOORD2;
out highp vec3 xlv_TEXCOORD3;
out highp vec3 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec3 xlv_TEXCOORD6;
void main() {
    v2f xl_retval;
    appdata_t xlt_v;
    xlt_v.vertex = vec4(gl_Vertex);
    xlt_v.normal = vec3(gl_Normal);
    xl_retval = vert( xlt_v);
    gl_Position = vec4(xl_retval.pos);
    xlv_TEXCOORD0 = float(xl_retval.viewDist);
    xlv_TEXCOORD1 = vec3(xl_retval.viewDir);
    xlv_TEXCOORD2 = vec3(xl_retval.normal);
    xlv_TEXCOORD3 = vec3(xl_retval._LightCoord);
    xlv_TEXCOORD4 = vec3(xl_retval._ShadowCoord);
    xlv_TEXCOORD5 = vec3(xl_retval.worldNormal);
    xlv_TEXCOORD6 = vec3(xl_retval.sphereNormal);
}


#endif
#ifdef FRAGMENT

#define gl_FragData _glesFragData
layout(location = 0) out mediump vec4 _glesFragData[4];
float xll_dFdx_f(float f) {
  return dFdx(f);
}
vec2 xll_dFdx_vf2(vec2 v) {
  return dFdx(v);
}
vec3 xll_dFdx_vf3(vec3 v) {
  return dFdx(v);
}
vec4 xll_dFdx_vf4(vec4 v) {
  return dFdx(v);
}
mat2 xll_dFdx_mf2x2(mat2 m) {
  return mat2( dFdx(m[0]), dFdx(m[1]));
}
mat3 xll_dFdx_mf3x3(mat3 m) {
  return mat3( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]));
}
mat4 xll_dFdx_mf4x4(mat4 m) {
  return mat4( dFdx(m[0]), dFdx(m[1]), dFdx(m[2]), dFdx(m[3]));
}
float xll_dFdy_f(float f) {
  return dFdy(f);
}
vec2 xll_dFdy_vf2(vec2 v) {
  return dFdy(v);
}
vec3 xll_dFdy_vf3(vec3 v) {
  return dFdy(v);
}
vec4 xll_dFdy_vf4(vec4 v) {
  return dFdy(v);
}
mat2 xll_dFdy_mf2x2(mat2 m) {
  return mat2( dFdy(m[0]), dFdy(m[1]));
}
mat3 xll_dFdy_mf3x3(mat3 m) {
  return mat3( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]));
}
mat4 xll_dFdy_mf4x4(mat4 m) {
  return mat4( dFdy(m[0]), dFdy(m[1]), dFdy(m[2]), dFdy(m[3]));
}
vec4 xll_tex2Dgrad(sampler2D s, vec2 coord, vec2 ddx, vec2 ddy) {
   return textureGrad( s, coord, ddx, ddy);
}
float xll_saturate_f( float x) {
  return clamp( x, 0.0, 1.0);
}
vec2 xll_saturate_vf2( vec2 x) {
  return clamp( x, 0.0, 1.0);
}
vec3 xll_saturate_vf3( vec3 x) {
  return clamp( x, 0.0, 1.0);
}
vec4 xll_saturate_vf4( vec4 x) {
  return clamp( x, 0.0, 1.0);
}
mat2 xll_saturate_mf2x2(mat2 m) {
  return mat2( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0));
}
mat3 xll_saturate_mf3x3(mat3 m) {
  return mat3( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0));
}
mat4 xll_saturate_mf4x4(mat4 m) {
  return mat4( clamp(m[0], 0.0, 1.0), clamp(m[1], 0.0, 1.0), clamp(m[2], 0.0, 1.0), clamp(m[3], 0.0, 1.0));
}
vec2 xll_vecTSel_vb2_vf2_vf2 (bvec2 a, vec2 b, vec2 c) {
  return vec2 (a.x ? b.x : c.x, a.y ? b.y : c.y);
}
vec3 xll_vecTSel_vb3_vf3_vf3 (bvec3 a, vec3 b, vec3 c) {
  return vec3 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z);
}
vec4 xll_vecTSel_vb4_vf4_vf4 (bvec4 a, vec4 b, vec4 c) {
  return vec4 (a.x ? b.x : c.x, a.y ? b.y : c.y, a.z ? b.z : c.z, a.w ? b.w : c.w);
}
#line 151
struct v2f_vertex_lit {
    highp vec2 uv;
    lowp vec4 diff;
    lowp vec4 spec;
};
#line 187
struct v2f_img {
    highp vec4 pos;
    mediump vec2 uv;
};
#line 181
struct appdata_img {
    highp vec4 vertex;
    mediump vec2 texcoord;
};
#line 337
struct SurfaceOutput {
    lowp vec3 Albedo;
    lowp vec3 Normal;
    lowp vec3 Emission;
    mediump float Specular;
    lowp float Gloss;
    lowp float Alpha;
};
#line 432
struct v2f {
    highp vec4 pos;
    highp float viewDist;
    highp vec3 viewDir;
    highp vec3 normal;
    highp vec3 _LightCoord;
    highp vec3 _ShadowCoord;
    highp vec3 worldNormal;
    highp vec3 sphereNormal;
};
#line 426
struct appdata_t {
    highp vec4 vertex;
    highp vec3 normal;
};
uniform highp vec4 _Time;
uniform highp vec4 _SinTime;
#line 3
uniform highp vec4 _CosTime;
uniform highp vec4 unity_DeltaTime;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
#line 7
uniform highp vec4 _ScreenParams;
uniform highp vec4 _ZBufferParams;
uniform highp vec4 unity_CameraWorldClipPlanes[6];
uniform highp vec4 _WorldSpaceLightPos0;
#line 11
uniform highp vec4 _LightPositionRange;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
#line 15
uniform highp vec4 unity_4LightAtten0;
uniform highp vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp vec4 unity_LightAtten[8];
#line 19
uniform highp vec4 unity_SpotDirection[8];
uniform highp vec4 unity_SHAr;
uniform highp vec4 unity_SHAg;
uniform highp vec4 unity_SHAb;
#line 23
uniform highp vec4 unity_SHBr;
uniform highp vec4 unity_SHBg;
uniform highp vec4 unity_SHBb;
uniform highp vec4 unity_SHC;
#line 27
uniform highp vec3 unity_LightColor0;
uniform highp vec3 unity_LightColor1;
uniform highp vec3 unity_LightColor2;
uniform highp vec3 unity_LightColor3;
uniform highp vec4 unity_ShadowSplitSpheres[4];
uniform highp vec4 unity_ShadowSplitSqRadii;
uniform highp vec4 unity_LightShadowBias;
#line 31
uniform highp vec4 _LightSplitsNear;
uniform highp vec4 _LightSplitsFar;
uniform highp mat4 unity_World2Shadow[4];
uniform highp vec4 _LightShadowData;
#line 35
uniform highp vec4 unity_ShadowFadeCenterAndType;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
#line 39
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_transpose_modelview0;
#line 43
uniform highp mat4 glstate_matrix_texture0;
uniform highp mat4 glstate_matrix_texture1;
uniform highp mat4 glstate_matrix_texture2;
uniform highp mat4 glstate_matrix_texture3;
#line 47
uniform highp mat4 glstate_matrix_projection;
uniform highp vec4 glstate_lightmodel_ambient;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixVP;
#line 51
uniform lowp vec4 unity_ColorSpaceGrey;
#line 77
#line 82
#line 87
#line 91
#line 96
#line 120
#line 137
#line 158
#line 166
#line 193
#line 206
#line 215
#line 220
#line 229
#line 234
#line 243
#line 260
#line 265
#line 291
#line 299
#line 307
#line 311
#line 315
uniform samplerCube _ShadowMapTexture;
uniform samplerCube _LightTexture0;
#line 335
uniform highp mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
#line 347
uniform lowp vec4 _LightColor0;
uniform lowp vec4 _SpecColor;
#line 360
#line 368
#line 382
uniform lowp vec4 _Color;
uniform highp float _Shininess;
#line 415
uniform sampler2D _MainTex;
uniform sampler2D _DetailTex;
uniform sampler2D _DetailVertTex;
uniform highp float _DetailScale;
#line 419
uniform highp float _DetailVertScale;
uniform highp float _DetailDist;
uniform highp float _MinLight;
uniform sampler2D _CityOverlayTex;
#line 423
uniform highp float _CityOverlayDetailScale;
uniform sampler2D _CityDarkOverlayDetailTex;
uniform sampler2D _CityLightOverlayDetailTex;
#line 444
#line 461
#line 461
highp vec4 Derivatives( in highp vec3 pos ) {
    highp float lat = (0.159155 * atan( pos.y, pos.x));
    highp float lon = (0.31831 * acos(pos.z));
    #line 465
    highp vec2 latLong = vec2( lat, lon);
    highp float latDdx = (0.159155 * length(xll_dFdx_vf2(pos.xy)));
    highp float latDdy = (0.159155 * length(xll_dFdy_vf2(pos.xy)));
    highp float longDdx = xll_dFdx_f(lon);
    #line 469
    highp float longDdy = xll_dFdy_f(lon);
    return vec4( latDdx, longDdx, latDdy, longDdy);
}
#line 215
highp float DecodeFloatRGBA( in highp vec4 enc ) {
    highp vec4 kDecodeDot = vec4( 1.0, 0.00392157, 1.53787e-05, 6.22737e-09);
    return dot( enc, kDecodeDot);
}
#line 316
highp float SampleCubeDistance( in highp vec3 vec ) {
    highp vec4 packDist = texture( _ShadowMapTexture, vec);
    #line 319
    return DecodeFloatRGBA( packDist);
}
#line 321
highp float unityCubeShadow( in highp vec3 vec ) {
    #line 323
    highp float mydist = (length(vec) * _LightPositionRange.w);
    mydist *= 0.97;
    highp float z = 0.0078125;
    highp vec4 shadowVals;
    #line 327
    shadowVals.x = SampleCubeDistance( (vec + vec3( z, z, z)));
    shadowVals.y = SampleCubeDistance( (vec + vec3( (-z), (-z), z)));
    shadowVals.z = SampleCubeDistance( (vec + vec3( (-z), z, (-z))));
    shadowVals.w = SampleCubeDistance( (vec + vec3( z, (-z), (-z))));
    #line 331
    mediump vec4 shadows = xll_vecTSel_vb4_vf4_vf4 (lessThan( shadowVals, vec4( mydist)), vec4( _LightShadowData.xxxx), vec4( 1.0));
    return dot( shadows, vec4( 0.25));
}
#line 472
lowp vec4 frag( in v2f IN ) {
    #line 474
    mediump vec4 color;
    highp vec3 sphereNrm = IN.sphereNormal;
    highp vec2 uv;
    uv.x = (0.5 + (0.159155 * atan( sphereNrm.x, sphereNrm.z)));
    #line 478
    uv.y = (0.31831 * acos(sphereNrm.y));
    highp vec4 uvdd = Derivatives( sphereNrm);
    mediump vec4 main = xll_tex2Dgrad( _MainTex, uv, uvdd.xy, uvdd.zw);
    mediump vec2 detailnrmzy = (sphereNrm.zy * _DetailScale);
    #line 482
    mediump vec2 detailnrmzx = (sphereNrm.zx * _DetailScale);
    mediump vec2 detailnrmxy = (sphereNrm.xy * _DetailScale);
    mediump vec2 detailvertnrmzy = (sphereNrm.zy * _DetailVertScale);
    mediump vec2 detailvertnrmzx = (sphereNrm.zx * _DetailVertScale);
    #line 486
    mediump vec2 detailvertnrmxy = (sphereNrm.xy * _DetailVertScale);
    mediump float vertLerp = xll_saturate_f(((32.0 * (xll_saturate_f(dot( IN.normal, (-IN.sphereNormal))) - 0.95)) + 0.5));
    mediump vec4 detailX = mix( texture( _DetailVertTex, detailvertnrmzy), texture( _DetailTex, detailnrmzy), vec4( vertLerp));
    mediump vec4 detailY = mix( texture( _DetailVertTex, detailvertnrmzx), texture( _DetailTex, detailnrmzx), vec4( vertLerp));
    #line 490
    mediump vec4 detailZ = mix( texture( _DetailVertTex, detailvertnrmxy), texture( _DetailTex, detailnrmxy), vec4( vertLerp));
    mediump vec4 cityoverlay = xll_tex2Dgrad( _CityOverlayTex, uv, uvdd.xy, uvdd.zw);
    mediump vec4 citydarkoverlaydetailX = texture( _CityDarkOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citydarkoverlaydetailY = texture( _CityDarkOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    #line 494
    mediump vec4 citydarkoverlaydetailZ = texture( _CityDarkOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailX = texture( _CityLightOverlayDetailTex, (sphereNrm.zy * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailY = texture( _CityLightOverlayDetailTex, (sphereNrm.zx * _CityOverlayDetailScale));
    mediump vec4 citylightoverlaydetailZ = texture( _CityLightOverlayDetailTex, (sphereNrm.xy * _CityOverlayDetailScale));
    #line 498
    sphereNrm = abs(sphereNrm);
    mediump vec4 detail = mix( detailZ, detailX, vec4( sphereNrm.x));
    detail = mix( detail, detailY, vec4( sphereNrm.y));
    mediump float detailLevel = xll_saturate_f(((2.0 * _DetailDist) * IN.viewDist));
    #line 502
    color = (main.xyzw * mix( detail.xyzw, vec4( 1.0), vec4( detailLevel)));
    detail = mix( citydarkoverlaydetailZ, citydarkoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citydarkoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citydarkoverlay = (cityoverlay * detail);
    #line 506
    detail = mix( citylightoverlaydetailZ, citylightoverlaydetailX, vec4( sphereNrm.x));
    detail = mix( detail, citylightoverlaydetailY, vec4( sphereNrm.y));
    mediump vec4 citylightoverlay = (cityoverlay * detail);
    color = mix( color, citylightoverlay, vec4( citylightoverlay.w));
    #line 510
    color *= _Color;
    mediump vec3 ambientLighting = vec3( glstate_lightmodel_ambient);
    mediump vec3 lightDirection = vec3( normalize(_WorldSpaceLightPos0));
    mediump vec3 normalDir = IN.worldNormal;
    #line 514
    mediump float NdotL = xll_saturate_f(dot( normalDir, lightDirection));
    mediump float diff = ((NdotL - 0.01) / 0.99);
    lowp float atten = ((texture( _LightTextureB0, vec2( dot( IN._LightCoord, IN._LightCoord))).w * texture( _LightTexture0, IN._LightCoord).w) * unityCubeShadow( IN._ShadowCoord));
    mediump float lightIntensity = xll_saturate_f((((_LightColor0.w * diff) * 4.0) * atten));
    #line 518
    mediump vec3 light = xll_saturate_vf3((ambientLighting + ((_MinLight + _LightColor0.xyz) * lightIntensity)));
    highp vec3 specularReflection = vec3( xll_saturate_f(floor((1.0 + NdotL))));
    specularReflection *= (((atten * vec3( _LightColor0)) * vec3( _SpecColor)) * pow( xll_saturate_f(dot( reflect( (-lightDirection), normalDir), IN.viewDir)), _Shininess));
    light += (main.w * specularReflection);
    #line 522
    color.xyz *= light;
    citydarkoverlay.w *= (1.0 - xll_saturate_f((lightIntensity * 1.5)));
    color = mix( color, citydarkoverlay, vec4( citydarkoverlay.w));
    color.w = 1.0;
    #line 526
    return color;
}
in highp float xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
in highp vec3 xlv_TEXCOORD2;
in highp vec3 xlv_TEXCOORD3;
in highp vec3 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec3 xlv_TEXCOORD6;
void main() {
    lowp vec4 xl_retval;
    v2f xlt_IN;
    xlt_IN.pos = vec4(0.0);
    xlt_IN.viewDist = float(xlv_TEXCOORD0);
    xlt_IN.viewDir = vec3(xlv_TEXCOORD1);
    xlt_IN.normal = vec3(xlv_TEXCOORD2);
    xlt_IN._LightCoord = vec3(xlv_TEXCOORD3);
    xlt_IN._ShadowCoord = vec3(xlv_TEXCOORD4);
    xlt_IN.worldNormal = vec3(xlv_TEXCOORD5);
    xlt_IN.sphereNormal = vec3(xlv_TEXCOORD6);
    xl_retval = frag( xlt_IN);
    gl_FragData[0] = vec4(xl_retval);
}


#endif"
}

}
Program "fp" {
// Fragment combos: 60
//   d3d9 - ALU: 118 to 158, TEX: 9 to 24
SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 120 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v5, c7.x
dsx r4.xy, v5
dsy r4.zw, v5.xyxy
abs r1.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v5
mul r1.xy, v5, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4 r0.y, c1, c1
rsq r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul r0.y, r0.x, r0.w
mul r2.xyz, r0.z, c1
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
dp3_pp r2.w, v4, -r2
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v4, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
dp3_pp_sat r0.y, r0, v1
pow_pp r3, r0.y, c5.x
add r2.w, -r0, c11
cmp r0.w, v5.z, r0, r2
cmp r0.x, v5, r0.w, -r0.w
mad r0.z, r0.x, c14.x, c14.y
add r0.y, -r1.w, c10
mad r0.x, r1.w, c10.z, c10.w
mad r0.x, r1.w, r0, c11
mad r0.x, r1.w, r0, c11.y
abs r1.w, v5.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v5.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.y, -r3, c11.z, r2.w
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r3.w, r0.y
mul r4.zw, r4, r4
add r1.w, r4.z, r4
rsq r1.w, r1.w
mul r0.w, r0.x, c12.x
mul r4.xy, r4, r4
add r0.x, r4, r4.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
rcp r1.w, r1.w
mul r0.x, r1.w, c14
dsy r0.y, r0
texldd r0, r0.zwzw, s0, r3.zwzw, r0
mul_pp r1.xyz, r0, r1
dp3_pp_sat r0.y, v4, r2
add_pp r0.z, r0.y, c10.y
dp3 r0.x, v3, v3
texld r0.x, r0.x, s3
mul r2.xyz, r0.x, c2
frc_pp r1.w, r0.z
add_pp r0.y, r0, c15.x
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
add_pp_sat r0.z, r0, -r1.w
mov_pp r2.w, r3.x
mul r2.xyz, r2, c3
mul r2.xyz, r2, r2.w
mul r2.xyz, r0.z, r2
mul r2.xyz, r0.w, r2
mul_pp_sat r0.w, r0.y, c15.y
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
add_pp r2.xyz, r0, r2
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 118 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mov r0.xyz, v4
dp3_sat r0.w, v2, -r0
mul r0.xy, v4.zyzw, c7.x
mul r1.xy, v4.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v4, c7.x
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mul r1.xy, v4, c6.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r2.xyz, r0.w, r1, r2
add_pp r3.xyz, r0, -r2
abs r1.xy, v4
abs r1.z, v4
mad_pp r3.xyz, r1.x, r3, r2
max r1.w, r1.x, r1.z
rcp r2.w, r1.w
min r1.w, r1.x, r1.z
mul r1.w, r1, r2
mul r0.xy, v4.zxzw, c6.x
mul r2.xy, v4.zxzw, c7.x
mul r2.w, v0.x, c8.x
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r0.w, r0, r2
mul r0.w, r1, r1
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.y, r0, r3
mad r2.x, r0.w, c12.y, c12.z
mad r1.y, r2.x, r0.w, c12.w
mad r1.y, r1, r0.w, c13.x
add_pp r2.xyz, -r0, c10.y
mul_sat r2.w, r2, c11.z
mad_pp r2.xyz, r2.w, r2, r0
mad r1.y, r1, r0.w, c13
mad r0.x, r1.y, r0.w, c13.z
mul r0.y, r0.x, r1.w
dp4_pp r0.z, c1, c1
rsq_pp r0.x, r0.z
mul_pp r3.xyz, r0.x, c1
add r0.x, r1, -r1.z
add r0.z, -r0.y, c13.w
cmp r0.w, -r0.x, r0.y, r0.z
add r1.x, -r0.w, c11.w
cmp r0.w, v4.z, r0, r1.x
cmp r0.w, v4.x, r0, -r0
mad r1.x, r0.w, c14, c14.y
abs r0.w, v4.y
mad r1.y, r0.w, c10.z, c10.w
dp3_pp r0.x, v3, -r3
mul_pp r0.xyz, v3, r0.x
mad_pp r0.xyz, -r0, c11.z, -r3
dp3_pp_sat r2.w, r0, v1
add r0.y, -r1.z, c10
mad r0.x, r1.z, c10.z, c10.w
mad r0.x, r1.z, r0, c11
mad r0.x, r1.z, r0, c11.y
add r1.z, -r0.w, c10.y
mad r1.y, r1, r0.w, c11.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v4.z, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c11, r0.y
rsq r1.z, r1.z
mad r0.w, r1.y, r0, c11.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v4.y, c10.x, c10.y
mul r1.z, r0.w, r1.y
mad r0.y, -r1.z, c11.z, r1
mad r0.z, r0.x, c11.w, r0
mad r0.x, r0.w, c11.w, r0.y
mul r0.y, r0.z, c12.x
dsx r0.w, r0.y
mul r1.y, r0.x, c12.x
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
dsy r0.xz, v4.xyyw
mul r0.xz, r0, r0
add r0.z, r0.x, r0
add r1.z, r1, r1.w
rsq r0.x, r1.z
rsq r0.z, r0.z
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c14.x
mul r0.x, r1.z, c14
dsy r0.y, r0
texldd r1, r1, s0, r0.zwzw, r0
mul_pp r1.xyz, r1, r2
pow_pp r0, r2.w, c5.x
dp3_pp_sat r0.y, v3, r3
mov r2.xyz, c2
add_pp r0.z, r0.y, c10.y
mov_pp r0.w, r0.x
frc_pp r0.x, r0.z
mul r2.xyz, c3, r2
mul r2.xyz, r2, r0.w
add_pp_sat r0.x, r0.z, -r0
mul r2.xyz, r0.x, r2
add_pp r0.x, r0.y, c15
mul_pp r0.y, r0.x, c2.w
mul_pp_sat r0.w, r0.y, c15.y
mov r0.x, c9
add r0.xyz, c2, r0.x
mul r2.xyz, r1.w, r2
mad_sat r0.xyz, r0, r0.w, c0
add_pp r0.xyz, r0, r2
mul_pp r1.xyz, r1, c4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 125 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v5, c7.x
dsx r4.xy, v5
dsy r4.zw, v5.xyxy
abs r1.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v5
mul r1.xy, v5, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4 r0.y, c1, c1
rsq r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul r0.y, r0.x, r0.w
mul r2.xyz, r0.z, c1
dp3_pp r2.w, v4, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v4, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
add r2.w, -r0, c11
cmp r0.w, v5.z, r0, r2
dp3_pp_sat r2.z, v4, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v5.x, r0, -r0
pow_pp r0, r3.x, c5.x
add r0.z, -r1.w, c10.y
mad r0.y, r1.w, c10.z, c10.w
mad r0.y, r1.w, r0, c11.x
mad r0.y, r1.w, r0, c11
abs r1.w, v5.y
mad r3.x, r2.w, c14, c14.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v5.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v5.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c11, r2.w
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
dsy r0.w, r0.z
mul r3.y, r0, c12.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c14.x
mul r3.z, r0.y, c14.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
mov_pp r1.w, r0.x
rcp r0.x, v3.w
mad r2.xy, v3, r0.x, c14.y
texld r0.w, r2, s3
add_pp r2.x, r2.z, c10.y
frc_pp r2.y, r2.x
dp3 r0.x, v3, v3
cmp r0.y, -v3.z, c10.x, c10
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.w, r0.y, r0.x
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul r0.xyz, r0, r1.w
add_pp_sat r2.x, r2, -r2.y
add_pp r1.w, r2.z, c15.x
mul r0.xyz, r2.x, r0
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r0
mov r0.w, c9.x
mul r0.xyz, r3.w, r0
mul_pp r1.xyz, r3, r1
mul_pp_sat r1.w, r1, c15.y
add r2.xyz, c2, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r2.xyz, r2, r0
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 121 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v5, c7.x
dsx r4.xy, v5
dsy r4.zw, v5.xyxy
abs r1.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v5
mul r1.xy, v5, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4 r0.y, c1, c1
rsq r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul r2.xyz, r0.z, c1
mul r0.y, r0.x, r0.w
dp3_pp r2.w, v4, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v4, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
add r2.w, -r0, c11
cmp r0.w, v5.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v5.x, r0, -r0
pow_pp r0, r3.x, c5.x
add r0.z, -r1.w, c10.y
mad r0.y, r1.w, c10.z, c10.w
mad r0.y, r1.w, r0, c11.x
mad r0.y, r1.w, r0, c11
abs r1.w, v5.y
mad r3.x, r2.w, c14, c14.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v5.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v5.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c11, r2.w
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
dp3_pp_sat r1.w, v4, r2
add_pp r2.x, r1.w, c10.y
frc_pp r2.y, r2.x
add_pp r1.w, r1, c15.x
dsy r0.w, r0.z
mul r3.y, r0, c12.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c14.x
mul r3.z, r0.y, c14.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
mov_pp r2.w, r0.x
dp3 r0.x, v3, v3
texld r0.x, r0.x, s3
texld r0.w, v3, s4
mul r0.w, r0.x, r0
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r0
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.x, r0
mov r0.w, c9.x
mul r0.xyz, r3.w, r0
mul_pp r1.xyz, r3, r1
mul_pp_sat r1.w, r1, c15.y
add r2.xyz, c2, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r2.xyz, r2, r0
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 119 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v5, c7.x
dsx r4.xy, v5
dsy r4.zw, v5.xyxy
abs r1.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v5
mul r1.xy, v5, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4_pp r0.y, c1, c1
rsq_pp r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul_pp r2.xyz, r0.z, c1
mul r0.y, r0.x, r0.w
dp3_pp r2.w, v4, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v4, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
add r2.w, -r0, c11
cmp r0.w, v5.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v5.x, r0, -r0
pow_pp r0, r3.x, c5.x
add r0.z, -r1.w, c10.y
mad r0.y, r1.w, c10.z, c10.w
mad r0.y, r1.w, r0, c11.x
mad r0.y, r1.w, r0, c11
abs r1.w, v5.y
mad r3.x, r2.w, c14, c14.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v5.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v5.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c11, r2.w
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
dp3_pp_sat r1.w, v4, r2
add_pp r2.x, r1.w, c10.y
frc_pp r2.y, r2.x
add_pp r1.w, r1, c15.x
dsy r0.w, r0.z
mul r3.y, r0, c12.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c14.x
mul r3.z, r0.y, c14.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
texld r0.w, v3, s3
mov_pp r2.w, r0.x
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r0
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.x, r0
mov r0.w, c9.x
mul r0.xyz, r3.w, r0
mul_pp r1.xyz, r3, r1
mul_pp_sat r1.w, r1, c15.y
add r2.xyz, c2, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r2.xyz, r2, r0
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 130 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
add r0.w, r0, c15.z
mul r2.xy, v6, c8.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r1.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c15, c15.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v6
mul r1.xy, v6, c7.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v6.zxzw, c7.x
mul r1.xy, v6.zxzw, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c9.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c13.y, c13.z
mad r2.x, r2, r2.w, c13.w
add_pp r1.xyz, -r0, c11.y
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c14
mad r0.x, r2, r2.w, c14.y
dp4 r0.y, c1, c1
rsq r0.z, r0.y
mad r0.x, r0, r2.w, c14.z
mul r2.xyz, r0.z, c1
mul r0.y, r0.x, r0.w
dp3_pp r2.w, v5, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c14.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v5, r2.w
mad_pp r0.xyz, -r0, c12.z, -r2
add r2.w, -r0, c12
cmp r0.w, v6.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v6.x, r0, -r0
pow_pp r0, r3.x, c6.x
add r0.z, -r1.w, c11.y
mad r0.y, r1.w, c11.z, c11.w
mad r0.y, r1.w, r0, c12.x
mad r0.y, r1.w, r0, c12
abs r1.w, v6.y
mad r3.x, r2.w, c15, c15.y
add r3.y, -r1.w, c11
mad r2.w, r1, c11.z, c11
mad r2.w, r2, r1, c12.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c11.x, c11
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c12.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c12.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v6.y, c11.x, c11.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c12, r2.w
mad r0.w, r0.y, c12, r0
mad r0.y, r1.w, c12.w, r0.z
mul r0.z, r0.w, c13.x
dsy r0.w, r0.z
mul r3.y, r0, c13.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c15.x
mul r3.z, r0.y, c15.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
mov_pp r0.y, r0.x
dp3_pp_sat r0.z, v5, r2
texldp r0.x, v4, s5
rcp r0.w, v4.w
mad r0.w, -v4.z, r0, r0.x
mov r1.w, c2.x
cmp r2.z, r0.w, c11.y, r1.w
rcp r0.x, v3.w
mad r2.xy, v3, r0.x, c15.y
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r0, r2.z
add_pp r0.w, r0.z, c11.y
mul r2.xyz, r0.x, c3
frc_pp r1.w, r0
mul r2.xyz, r2, c4
mul r2.xyz, r2, r0.y
add_pp_sat r0.w, r0, -r1
add_pp r0.y, r0.z, c16.x
mul r2.xyz, r0.w, r2
mul_pp r0.y, r0, c3.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c16.y
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r2.xyz, r3.w, r2
add_pp r2.xyz, r0, r2
mul_pp r1.xyz, r3, r1
mul_pp r0.xyz, r1, c5
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 129 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
add r0.w, r0, c15.z
mul r2.xy, v6, c8.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r1.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c15, c15.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v6
mul r1.xy, v6, c7.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v6.zxzw, c7.x
mul r1.xy, v6.zxzw, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c9.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c13.y, c13.z
mad r2.x, r2, r2.w, c13.w
add_pp r1.xyz, -r0, c11.y
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c14
mad r0.x, r2, r2.w, c14.y
dp4 r0.y, c1, c1
rsq r0.z, r0.y
mad r0.x, r0, r2.w, c14.z
mul r2.xyz, r0.z, c1
mul r0.y, r0.x, r0.w
dp3_pp r2.w, v5, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c14.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v5, r2.w
mad_pp r0.xyz, -r0, c12.z, -r2
add r2.w, -r0, c12
cmp r0.w, v6.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v6.x, r0, -r0
pow_pp r0, r3.x, c6.x
add r0.z, -r1.w, c11.y
mad r0.y, r1.w, c11.z, c11.w
mad r0.y, r1.w, r0, c12.x
mad r0.y, r1.w, r0, c12
abs r1.w, v6.y
mad r3.x, r2.w, c15, c15.y
add r3.y, -r1.w, c11
mad r2.w, r1, c11.z, c11
mad r2.w, r2, r1, c12.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c11.x, c11
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c12.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c12.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v6.y, c11.x, c11.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c12, r2.w
mad r0.w, r0.y, c12, r0
mad r0.y, r1.w, c12.w, r0.z
mul r0.z, r0.w, c13.x
dsy r0.w, r0.z
mul r3.y, r0, c13.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c15.x
mul r3.z, r0.y, c15.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
mov_pp r0.y, r0.x
mov r0.x, c2
add r1.w, c11.y, -r0.x
dp3_pp_sat r0.z, v5, r2
rcp r0.w, v3.w
mad r2.xy, v3, r0.w, c15.y
texldp r0.x, v4, s5
mad r2.z, r0.x, r1.w, c2.x
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r0, r2.z
add_pp r0.w, r0.z, c11.y
mul r2.xyz, r0.x, c3
frc_pp r1.w, r0
mul r2.xyz, r2, c4
mul r2.xyz, r2, r0.y
add_pp_sat r0.w, r0, -r1
add_pp r0.y, r0.z, c16.x
mul r2.xyz, r0.w, r2
mul_pp r0.y, r0, c3.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c16.y
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r2.xyz, r3.w, r2
add_pp r2.xyz, r0, r2
mul_pp r1.xyz, r3, r1
mul_pp r0.xyz, r1, c5
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 119 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v5, c7.x
dsx r4.xy, v5
dsy r4.zw, v5.xyxy
abs r1.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v5
mul r1.xy, v5, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4_pp r0.y, c1, c1
rsq_pp r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul r0.y, r0.x, r0.w
mul_pp r2.xyz, r0.z, c1
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
dp3_pp r2.w, v4, -r2
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v4, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
add r2.w, -r0, c11
cmp r0.w, v5.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v5.x, r0, -r0
pow_pp r0, r3.x, c5.x
add r0.z, -r1.w, c10.y
mad r0.y, r1.w, c10.z, c10.w
mad r0.y, r1.w, r0, c11.x
mad r0.y, r1.w, r0, c11
abs r1.w, v5.y
mad r3.x, r2.w, c14, c14.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v5.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v5.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c11, r2.w
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
dsy r0.w, r0.z
mul r3.y, r0, c12.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c14.x
mul r3.z, r0.y, c14.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
dp3_pp_sat r0.y, v4, r2
add_pp r0.z, r0.y, c10.y
frc_pp r0.w, r0.z
mov_pp r1.w, r0.x
texldp r0.x, v3, s3
mul r2.xyz, r0.x, c2
mul r2.xyz, r2, c3
add_pp r0.y, r0, c15.x
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
add_pp_sat r0.z, r0, -r0.w
mul r2.xyz, r2, r1.w
mul r2.xyz, r0.z, r2
mul_pp_sat r0.w, r0.y, c15.y
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r2.xyz, r3.w, r2
add_pp r2.xyz, r0, r2
mul_pp r1.xyz, r3, r1
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 120 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v6, c7.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r1.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v6
mul r1.xy, v6, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v6.zxzw, c6.x
mul r1.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4_pp r0.y, c1, c1
rsq_pp r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul_pp r2.xyz, r0.z, c1
mul r0.y, r0.x, r0.w
dp3_pp r2.w, v5, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v5, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
add r2.w, -r0, c11
cmp r0.w, v6.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v6.x, r0, -r0
pow_pp r0, r3.x, c5.x
add r0.z, -r1.w, c10.y
mad r0.y, r1.w, c10.z, c10.w
mad r0.y, r1.w, r0, c11.x
mad r0.y, r1.w, r0, c11
abs r1.w, v6.y
mad r3.x, r2.w, c14, c14.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v6.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c11, r2.w
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
dp3_pp_sat r1.w, v5, r2
add_pp r2.x, r1.w, c10.y
frc_pp r2.y, r2.x
add_pp r1.w, r1, c15.x
dsy r0.w, r0.z
mul r3.y, r0, c12.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c14.x
mul r3.z, r0.y, c14.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
mov_pp r2.w, r0.x
texldp r0.x, v4, s3
texld r0.w, v3, s4
mul r0.w, r0, r0.x
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r0
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.x, r0
mov r0.w, c9.x
mul r0.xyz, r3.w, r0
mul_pp r1.xyz, r3, r1
mul_pp_sat r1.w, r1, c15.y
add r2.xyz, c2, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r2.xyz, r2, r0
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 129 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.01000214, 0.97000003, 4.03944778, 0
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c16.z
mul r2.xy, v6, c9.x
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c16, c16.y
mul r1.xy, v6, c8.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r2.xyz, r0.w, r1, r2
add_pp r3.xyz, r0, -r2
abs r1.xy, v6
abs r1.z, v6
mad_pp r3.xyz, r1.x, r3, r2
max r1.w, r1.x, r1.z
rcp r2.w, r1.w
min r1.w, r1.x, r1.z
mul r1.w, r1, r2
mul r0.xy, v6.zxzw, c8.x
mul r2.xy, v6.zxzw, c9.x
mul r2.w, v0.x, c10.x
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r0.w, r0, r2
mul r0.w, r1, r1
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.y, r0, r3
mad r2.x, r0.w, c14.y, c14.z
mad r1.y, r2.x, r0.w, c14.w
mad r1.y, r1, r0.w, c15.x
add_pp r2.xyz, -r0, c12.y
mul_sat r2.w, r2, c13.z
mad_pp r3.xyz, r2.w, r2, r0
mad r1.y, r1, r0.w, c15
mad r0.x, r1.y, r0.w, c15.z
mul r0.y, r0.x, r1.w
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r2.xyz, r0.x, c1
add r0.x, r1, -r1.z
add r0.z, -r0.y, c15.w
cmp r0.w, -r0.x, r0.y, r0.z
add r1.x, -r0.w, c13.w
cmp r0.w, v6.z, r0, r1.x
dp3_pp r0.x, v5, -r2
cmp r0.w, v6.x, r0, -r0
mad r1.x, r0.w, c16, c16.y
abs r0.w, v6.y
mad r1.y, r0.w, c12.z, c12.w
mul_pp r0.xyz, v5, r0.x
mad_pp r0.xyz, -r0, c13.z, -r2
dp3_pp_sat r2.w, r0, v1
add r0.y, -r1.z, c12
mad r0.x, r1.z, c12.z, c12.w
mad r0.x, r1.z, r0, c13
mad r0.x, r1.z, r0, c13.y
add r1.z, -r0.w, c12.y
mad r1.y, r1, r0.w, c13.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c13, r0.y
rsq r1.z, r1.z
mad r0.w, r1.y, r0, c13.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.y, c12.x, c12.y
mul r1.z, r0.w, r1.y
mad r0.y, -r1.z, c13.z, r1
mad r0.z, r0.x, c13.w, r0
mad r0.x, r0.w, c13.w, r0.y
mul r0.y, r0.z, c14.x
mul r1.y, r0.x, c14.x
dsx r0.w, r0.y
dsx r1.zw, v6.xyxy
mul r1.zw, r1, r1
dsy r0.xz, v6.xyyw
mul r0.xz, r0, r0
add r0.z, r0.x, r0
add r1.z, r1, r1.w
rsq r0.x, r1.z
rsq r0.z, r0.z
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c16.x
mul r0.x, r1.z, c16
dsy r0.y, r0
texldd r0, r1, s0, r0.zwzw, r0
mul_pp r3.xyz, r0, r3
pow_pp r1, r2.w, c7.x
mov_pp r0.y, r1.x
texld r1, v4, s3
dp4 r0.z, r1, c18
dp3 r0.x, v4, v4
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.x, r0, c2.w
mad r0.z, -r0.x, c17.y, r0
mov r1.x, c3
dp3 r0.x, v3, v3
cmp r0.z, r0, c12.y, r1.x
texld r0.x, r0.x, s4
mul r0.x, r0, r0.z
dp3_pp_sat r0.z, v5, r2
add_pp r1.w, r0.z, c12.y
mul r1.xyz, r0.x, c4
mul r1.xyz, r1, c5
mul r1.xyz, r1, r0.y
add_pp r0.y, r0.z, c17.x
frc_pp r2.x, r1.w
add_pp_sat r1.w, r1, -r2.x
mul r1.xyz, r1.w, r1
mul_pp r0.y, r0, c4.w
mul_pp r0.y, r0, r0.x
mul r1.xyz, r0.w, r1
mul_pp_sat r0.w, r0.y, c17.z
mov r0.x, c11
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
add_pp r0.xyz, r0, r1
mul_pp r1.xyz, r3, c6
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 130 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.01000214, 0.97000003, 4.03944778, 0
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c16.z
mul r2.xy, v6, c9.x
mul r2.w, v0.x, c10.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r1.w, v6.z
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c16, c16.y
mul r1.xy, v6, c8.x
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
abs r2.xy, v6
mad r0.xyz, r0.w, r3, r0
add_pp r0.xyz, r0, -r1
mad_pp r3.xyz, r2.x, r0, r1
mul r0.xy, v6.zxzw, c8.x
mul r1.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
max r2.z, r2.x, r1.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r2.y, r0, r3
rcp r1.x, r2.z
min r0.w, r2.x, r1
mul r0.w, r0, r1.x
mul r2.z, r0.w, r0.w
mad r2.y, r2.z, c14, c14.z
mad r2.y, r2, r2.z, c14.w
add_pp r1.xyz, -r0, c12.y
mul_sat r2.w, r2, c13.z
mad_pp r0.xyz, r2.w, r1, r0
mad r2.y, r2, r2.z, c15.x
mad r1.x, r2.y, r2.z, c15.y
mad r1.x, r1, r2.z, c15.z
mul r2.y, r1.x, r0.w
dp4 r1.y, c1, c1
rsq r1.y, r1.y
mul r1.xyz, r1.y, c1
dp3_pp r2.w, v5, -r1
add r0.w, r2.x, -r1
add r2.z, -r2.y, c15.w
cmp r0.w, -r0, r2.y, r2.z
mul_pp r2.xyz, v5, r2.w
mad_pp r2.xyz, -r2, c13.z, -r1
dp3_pp_sat r2.x, r2, v1
pow_pp r3, r2.x, c7.x
abs r2.y, v6
add r2.w, -r0, c13
cmp r0.w, v6.z, r0, r2
cmp r0.w, v6.x, r0, -r0
mad r2.z, r0.w, c16.x, c16.y
add r2.x, -r1.w, c12.y
mad r0.w, r1, c12.z, c12
mad r0.w, r1, r0, c13.x
add r3.y, -r2, c12
mad r2.w, r2.y, c12.z, c12
mad r2.w, r2, r2.y, c13.x
rsq r2.x, r2.x
rsq r3.y, r3.y
mad r0.w, r1, r0, c13.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v6.z, c12.x, c12.y
mul r2.x, r0.w, r1.w
mad r2.x, -r2, c13.z, r1.w
mad r2.y, r2.w, r2, c13
rcp r3.y, r3.y
mul r2.w, r2.y, r3.y
cmp r2.y, v6, c12.x, c12
mul r3.y, r2, r2.w
mad r1.w, -r3.y, c13.z, r2
mad r2.x, r0.w, c13.w, r2
mad r0.w, r2.y, c13, r1
mul r1.w, r2.x, c14.x
dsx r3.w, r1
mul r2.w, r0, c14.x
mul r4.xy, r4, r4
add r0.w, r4.x, r4.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.z, r0.w, c16.x
dsy r2.y, r1.w
mul r4.zw, r4, r4
add r1.w, r4.z, r4
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r2.x, r1.w, c16
texldd r2, r2.zwzw, s0, r3.zwzw, r2
mul_pp r2.xyz, r2, r0
texld r0, v4, s3
dp4 r0.y, r0, c18
mov_pp r1.w, r3.x
dp3 r3.x, v4, v4
rsq r3.x, r3.x
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mad r0.x, -r0, c17.y, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c12, r0.z
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.x, r0, r0.y
dp3_pp_sat r0.y, v5, r1
add_pp r0.z, r0.y, c12.y
frc_pp r0.w, r0.z
mul r1.xyz, r0.x, c4
mul r1.xyz, r1, c5
add_pp r0.y, r0, c17.x
mul_pp r0.y, r0, c4.w
mul_pp r0.y, r0, r0.x
add_pp_sat r0.z, r0, -r0.w
mul r1.xyz, r1, r1.w
mul r1.xyz, r0.z, r1
mul_pp_sat r0.w, r0.y, c17.z
mov r0.x, c11
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r2.w, r1
add_pp r1.xyz, r0, r1
mul_pp r0.xyz, r2, c6
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_SpecColor]
Vector 9 [_Color]
Float 10 [_Shininess]
Float 11 [_DetailScale]
Float 12 [_DetailVertScale]
Float 13 [_DetailDist]
Float 14 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 138 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c20, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r1.xy, v6, c12.x
texld r2.xyz, r1, s1
mul r0.xy, v6, c11.x
texld r0.xyz, r0, s2
add r3.xyz, r0, -r2
add r0.w, r0, c19.z
mul r1.xy, v6.zyzw, c12.x
mul r0.xy, v6.zyzw, c11.x
dsx r4.zw, v6.xyxy
abs r1.w, v6.z
mad_sat r0.w, r0, c19, c19.y
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
mad r1.xyz, r0.w, r3, r2
abs r3.xy, v6
max r2.x, r3, r1.w
rcp r2.y, r2.x
min r2.x, r3, r1.w
mul r2.w, r2.x, r2.y
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r3.z, r2.w, r2.w
mul r1.xy, v6.zxzw, c12.x
mul r0.xy, v6.zxzw, c11.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3.z, c17.y, c17.z
mad r0.w, r3, r3.z, c17
mad r0.w, r0, r3.z, c18.x
mad r0.w, r0, r3.z, c18.y
mad r0.w, r0, r3.z, c18.z
add_pp r1.xyz, -r0, c15.y
mul r2.x, r0.w, r2.w
mul r2.y, v0.x, c13.x
mul_sat r0.w, r2.y, c16.z
mad_pp r0.xyz, r0.w, r1, r0
dp4 r1.y, c1, c1
add r1.x, -r2, c18.w
add r0.w, r3.x, -r1
cmp r0.w, -r0, r2.x, r1.x
add r1.x, -r0.w, c16.w
cmp r0.w, v6.z, r0, r1.x
rsq r1.y, r1.y
mul r2.xyz, r1.y, c1
dp3_pp r1.y, v5, -r2
mul_pp r1.xyz, v5, r1.y
mad_pp r3.xyz, -r1, c16.z, -r2
abs r1.z, v6.y
cmp r0.w, v6.x, r0, -r0
mad r4.x, r0.w, c19, c19.y
add r1.x, -r1.w, c15.y
mad r0.w, r1, c15.z, c15
mad r0.w, r1, r0, c16.x
mad r0.w, r1, r0, c16.y
add r2.w, -r1.z, c15.y
mad r1.w, r1.z, c15.z, c15
mad r1.w, r1, r1.z, c16.x
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r0.w, v6.z, c15.x, c15.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c16.z, r1.x
rsq r2.w, r2.w
mad r1.z, r1.w, r1, c16.y
rcp r2.w, r2.w
mul r1.w, r1.z, r2
cmp r1.z, v6.y, c15.x, c15.y
mul r2.w, r1.z, r1
mad r1.x, -r2.w, c16.z, r1.w
dp3_pp_sat r2.w, r3, v1
rcp r3.z, v4.w
mad r1.y, r0.w, c16.w, r1
mad r0.w, r1.z, c16, r1.x
mul r1.x, r1.y, c17
mul r4.y, r0.w, c17.x
mul r4.zw, r4, r4
add r0.w, r4.z, r4
rsq r0.w, r0.w
dsx r1.w, r1.x
dsy r1.y, r1.x
dsy r1.xz, v6.xyyw
mul r1.xz, r1, r1
add r1.x, r1, r1.z
rcp r0.w, r0.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.z, r0.w, c19.x
mul r1.x, r1, c19
texldd r1, r4, s0, r1.zwzw, r1
mul_pp r1.xyz, r1, r0
pow_pp r0, r2.w, c10.x
mad r3.xy, v4, r3.z, c6
mov_pp r2.w, r0.x
texld r0.x, r3, s5
mad r3.xy, v4, r3.z, c5
mov r0.w, r0.x
texld r0.x, r3, s5
mad r3.xy, v4, r3.z, c4
mov r0.z, r0.x
texld r0.x, r3, s5
mad r3.xy, v4, r3.z, c3
mov r0.y, r0.x
texld r0.x, r3, s5
mov r3.x, c2
mad r0, -v4.z, r3.z, r0
cmp r0, r0, c15.y, r3.x
dp4_pp r0.z, r0, c20.y
rcp r3.x, v3.w
mad r3.xy, v3, r3.x, c19.y
dp3 r0.x, v3, v3
texld r0.w, r3, s3
cmp r0.y, -v3.z, c15.x, c15
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.y, r0
mul_pp r0.x, r0, r0.z
dp3_pp_sat r0.y, v5, r2
add_pp r0.z, r0.y, c15.y
frc_pp r0.w, r0.z
mul r2.xyz, r0.x, c7
mul r2.xyz, r2, c8
add_pp r0.y, r0, c20.x
mul_pp r0.y, r0, c7.w
mul_pp r0.y, r0, r0.x
add_pp_sat r0.z, r0, -r0.w
mul r2.xyz, r2, r2.w
mul r2.xyz, r0.z, r2
mul_pp_sat r0.w, r0.y, c20.z
mov r0.x, c14
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r2.xyz, r1.w, r2
add_pp r2.xyz, r0, r2
mul_pp r0.xyz, r1, c9
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_SpecColor]
Vector 9 [_Color]
Float 10 [_Shininess]
Float 11 [_DetailScale]
Float 12 [_DetailVertScale]
Float 13 [_DetailDist]
Float 14 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 137 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c20, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c19.z
mul r0.xy, v6.zyzw, c12.x
mul r1.xy, v6.zyzw, c11.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c17.y, c17.z
mad r3.w, r3, r2, c17
mad r3.w, r3, r2, c18.x
mad r3.w, r3, r2, c18.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c19.w, c19.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c12.x
mul r0.xy, v6, c11.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c12.x
mul r0.xy, v6.zxzw, c11.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c18.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c18.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c16.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c13
dsy r3.xy, v6
add_pp r1.xyz, -r0, c15.y
mul_sat r2.x, r2, c16.z
mad_pp r2.xyz, r2.x, r1, r0
abs r1.x, v6.y
cmp r1.w, v6.x, r1, -r1
add r0.y, -r0.w, c15
mad r0.x, r0.w, c15.z, c15.w
mad r0.x, r0.w, r0, c16
add r1.z, -r1.x, c15.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r0.y, r0.y
rsq r1.z, r1.z
rcp r2.w, v4.w
mad r0.z, r1.w, c19.x, c19.y
mad r0.x, r0.w, r0, c16.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c15, c15.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c16.z, r0.y
mad r1.x, r1.y, r1, c16.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v6.y, c15, c15.y
mul r1.z, r1.x, r1.y
mad r0.y, -r1.z, c16.z, r1
mad r0.w, r0.x, c16, r0
mad r0.x, r1, c16.w, r0.y
mul r0.y, r0.w, c17.x
dsx r1.y, r0
mul r3.xy, r3, r3
add r1.x, r3, r3.y
dsx r1.zw, v6.xyxy
mul r1.zw, r1, r1
mul r0.w, r0.x, c17.x
add r0.x, r1.z, r1.w
rsq r1.x, r1.x
rsq r0.x, r0.x
rcp r1.z, r1.x
rcp r0.x, r0.x
mul r1.x, r0, c19
mul r0.x, r1.z, c19
dsy r0.y, r0
texldd r1, r0.zwzw, s0, r1, r0
mul_pp r1.xyz, r1, r2
mad r0.xyz, v4, r2.w, c6
texld r0.x, r0, s5
mad r2.xyz, v4, r2.w, c5
mov_pp r0.w, r0.x
texld r0.x, r2, s5
mad r2.xyz, v4, r2.w, c4
mov_pp r0.z, r0.x
texld r0.x, r2, s5
mad r2.xyz, v4, r2.w, c3
mov_pp r0.y, r0.x
texld r0.x, r2, s5
mov r2.y, c2.x
add r2.y, c15, -r2
mad r0, r0, r2.y, c2.x
dp4_pp r0.y, r0, c20.y
rcp r0.x, v3.w
mad r4.xy, v3, r0.x, c19.y
dp4 r2.x, c1, c1
rsq r2.x, r2.x
mul r2.xyz, r2.x, c1
dp3_pp r0.z, v5, -r2
mul_pp r3.xyz, v5, r0.z
mad_pp r3.xyz, -r3, c16.z, -r2
dp3 r0.x, v3, v3
texld r0.w, r4, s3
cmp r0.z, -v3, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r2.w, r0.x, r0.y
mul r0.xyz, r2.w, c7
dp3_pp_sat r3.w, r3, v1
mul r3.xyz, r0, c8
pow_pp r0, r3.w, c10.x
dp3_pp_sat r0.w, v5, r2
add_pp r2.x, r0.w, c15.y
frc_pp r2.y, r2.x
add_pp r0.w, r0, c20.x
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r3, r0.x
mul r0.xyz, r2.x, r0
mul_pp r0.w, r0, c7
mul r0.xyz, r1.w, r0
mul_pp r1.w, r0, r2
mov r0.w, c14.x
mul_pp_sat r1.w, r1, c20.z
add r2.xyz, c7, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r0.xyz, r2, r0
mul_pp r1.xyz, r1, c9
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 136 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c16.z
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
mad r3.w, r3, r2, c15.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c16.w, c16.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c9.x
mul r0.xy, v6, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c9.x
mul r0.xy, v6.zxzw, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
mad r2.w, r3, r2, c15.z
mul r1.y, r2.w, r1.w
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
abs r2.z, v6.y
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
cmp r1.w, v6.z, r1, r2.x
add r2.y, -r0.w, c12
add r3.x, -r2.z, c12.y
mad r2.w, r2.z, c12.z, c12
mad r2.w, r2, r2.z, c13.x
mul r2.x, v0, c10
rsq r2.y, r2.y
rsq r3.x, r3.x
dsx r3.zw, v6.xyxy
mul r3.zw, r3, r3
mad r2.z, r2.w, r2, c13.y
rcp r3.x, r3.x
mul r2.w, r2.z, r3.x
cmp r2.z, v6.y, c12.x, c12.y
mul r3.x, r2.z, r2.w
add_pp r1.xyz, -r0, c12.y
mul_sat r2.x, r2, c13.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c16, c16.y
mad r1.w, r0, c12.z, c12
mad r1.w, r0, r1, c13.x
mad r0.w, r0, r1, c13.y
rcp r2.y, r2.y
mul r1.w, r0, r2.y
cmp r0.w, v6.z, c12.x, c12.y
mul r2.y, r0.w, r1.w
mad r2.y, -r2, c13.z, r1.w
mad r1.w, -r3.x, c13.z, r2
mad r2.y, r0.w, c13.w, r2
mad r0.w, r2.z, c13, r1
mul r1.w, r2.y, c14.x
mul r2.y, r0.w, c14.x
add r0.w, r3.z, r3
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r3.y, r1.w
mul r3.x, r0.w, c16
add r0.xyz, v4, c17.yzzw
texld r0, r0, s3
dp4 r3.w, r0, c18
add r0.xyz, v4, c17.zyzw
texld r0, r0, s3
dp4 r3.z, r0, c18
dsy r2.w, r1
mul r4.xy, r4, r4
add r1.w, r4.x, r4.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r2.z, r1.w, c16.x
texldd r2, r2, s0, r3, r2.zwzw
mul_pp r2.xyz, r2, r1
add r1.xyz, v4, c17.zzyw
texld r1, r1, s3
dp4 r3.y, r1, c18
dp3 r0.w, v4, v4
rsq r1.x, r0.w
add r0.xyz, v4, c17.y
texld r0, r0, s3
dp4 r3.x, r0, c18
rcp r1.x, r1.x
mul r0.x, r1, c2.w
dp4 r1.x, c1, c1
mad r0, -r0.x, c17.w, r3
mov r1.y, c3.x
cmp r0, r0, c12.y, r1.y
dp4_pp r0.y, r0, c19.x
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_pp r0.z, v5, -r1
mul_pp r3.xyz, v5, r0.z
mad_pp r3.xyz, -r3, c13.z, -r1
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul r1.w, r0.x, r0.y
mul r0.xyz, r1.w, c4
dp3_pp_sat r3.w, r3, v1
mul r3.xyz, r0, c5
pow_pp r0, r3.w, c7.x
dp3_pp_sat r0.w, v5, r1
add_pp r1.x, r0.w, c12.y
frc_pp r1.y, r1.x
add_pp r0.w, r0, c17.x
add_pp_sat r1.x, r1, -r1.y
mul r0.xyz, r3, r0.x
mul r0.xyz, r1.x, r0
mul_pp r0.w, r0, c4
mul_pp r1.x, r0.w, r1.w
mul_pp_sat r1.w, r1.x, c19.y
mov r0.w, c11.x
add r1.xyz, c4, r0.w
mad_sat r1.xyz, r1, r1.w, c0
mul r0.xyz, r2.w, r0
add_pp r0.xyz, r1, r0
mul_pp r1.xyz, r2, c6
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 137 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c16.z
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
mad r3.w, r3, r2, c15.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c16.w, c16.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c9.x
mul r0.xy, v6, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c9.x
mul r0.xy, v6.zxzw, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
mad r2.w, r3, r2, c15.z
mul r1.y, r2.w, r1.w
add_pp r0.xyz, r0, -r2
dsx r3.zw, v6.xyxy
mad_pp r0.xyz, r3.y, r0, r2
mul r3.zw, r3, r3
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c10
add_pp r1.xyz, -r0, c12.y
mul_sat r2.x, r2, c13.z
mad_pp r2.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c16, c16.y
abs r1.w, v6.y
add r1.z, -r0.w, c12.y
mad r1.y, r0.w, c12.z, c12.w
mad r1.y, r0.w, r1, c13.x
add r3.x, -r1.w, c12.y
mad r2.w, r1, c12.z, c12
mad r2.w, r2, r1, c13.x
rsq r1.z, r1.z
rsq r3.x, r3.x
mad r0.w, r0, r1.y, c13.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c12.x, c12.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c13, r1.y
mad r1.z, r0.w, c13.w, r1
mul r1.z, r1, c14.x
mad r1.w, r2, r1, c13.y
rcp r3.x, r3.x
mul r2.w, r1, r3.x
cmp r1.w, v6.y, c12.x, c12.y
mul r3.x, r1.w, r2.w
mad r1.y, -r3.x, c13.z, r2.w
mad r0.w, r1, c13, r1.y
mul r1.y, r0.w, c14.x
add r0.w, r3.z, r3
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r3.y, r1.z
mul r3.x, r0.w, c16
add r0.xyz, v4, c17.yzzw
texld r0, r0, s3
dp4 r3.w, r0, c18
add r0.xyz, v4, c17.zyzw
texld r0, r0, s3
dp4 r3.z, r0, c18
add r0.xyz, v4, c17.y
texld r0, r0, s3
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r1.z, r1, c16.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1.xyz, r1, r2
add r2.xyz, v4, c17.zzyw
texld r2, r2, s3
dp4 r3.y, r2, c18
dp3 r2.x, v4, v4
dp4 r3.x, r0, c18
rsq r2.x, r2.x
rcp r0.x, r2.x
dp4 r2.x, c1, c1
mul r0.x, r0, c2.w
rsq r2.x, r2.x
mul r2.xyz, r2.x, c1
mad r0, -r0.x, c17.w, r3
mov r2.w, c3.x
cmp r0, r0, c12.y, r2.w
dp4_pp r0.y, r0, c19.x
dp3_pp r2.w, v5, -r2
mul_pp r3.xyz, v5, r2.w
mad_pp r3.xyz, -r3, c13.z, -r2
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r2.w, r0.x, r0.y
mul r0.xyz, r2.w, c4
dp3_pp_sat r3.w, r3, v1
mul r3.xyz, r0, c5
pow_pp r0, r3.w, c7.x
dp3_pp_sat r0.w, v5, r2
add_pp r2.x, r0.w, c12.y
frc_pp r2.y, r2.x
add_pp r0.w, r0, c17.x
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r3, r0.x
mul r0.xyz, r2.x, r0
mul_pp r0.w, r0, c4
mul r0.xyz, r1.w, r0
mul_pp r1.w, r0, r2
mov r0.w, c11.x
mul_pp_sat r1.w, r1, c19.y
add r2.xyz, c4, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r0.xyz, r2, r0
mul_pp r1.xyz, r1, c6
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 120 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v5, c7.x
dsx r4.xy, v5
dsy r4.zw, v5.xyxy
abs r1.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v5
mul r1.xy, v5, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4 r0.y, c1, c1
rsq r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul r0.y, r0.x, r0.w
mul r2.xyz, r0.z, c1
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
dp3_pp r2.w, v4, -r2
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v4, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
dp3_pp_sat r0.y, r0, v1
pow_pp r3, r0.y, c5.x
add r2.w, -r0, c11
cmp r0.w, v5.z, r0, r2
cmp r0.x, v5, r0.w, -r0.w
mad r0.z, r0.x, c14.x, c14.y
add r0.y, -r1.w, c10
mad r0.x, r1.w, c10.z, c10.w
mad r0.x, r1.w, r0, c11
mad r0.x, r1.w, r0, c11.y
abs r1.w, v5.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v5.z, c10, c10.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c11.z, r0.y
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v5.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.y, -r3, c11.z, r2.w
mad r0.w, r0.x, c11, r0
mad r0.x, r1.w, c11.w, r0.y
mul r0.y, r0.w, c12.x
dsx r3.w, r0.y
mul r4.zw, r4, r4
add r1.w, r4.z, r4
rsq r1.w, r1.w
mul r0.w, r0.x, c12.x
mul r4.xy, r4, r4
add r0.x, r4, r4.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r3.z, r0.x, c14.x
rcp r1.w, r1.w
mul r0.x, r1.w, c14
dsy r0.y, r0
texldd r0, r0.zwzw, s0, r3.zwzw, r0
mul_pp r1.xyz, r0, r1
dp3_pp_sat r0.y, v4, r2
add_pp r0.z, r0.y, c10.y
dp3 r0.x, v3, v3
texld r0.x, r0.x, s3
mul r2.xyz, r0.x, c2
frc_pp r1.w, r0.z
add_pp r0.y, r0, c15.x
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
add_pp_sat r0.z, r0, -r1.w
mov_pp r2.w, r3.x
mul r2.xyz, r2, c3
mul r2.xyz, r2, r2.w
mul r2.xyz, r0.z, r2
mul r2.xyz, r0.w, r2
mul_pp_sat r0.w, r0.y, c15.y
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
add_pp r2.xyz, r0, r2
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
"ps_3_0
; 118 ALU, 9 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mov r0.xyz, v4
dp3_sat r0.w, v2, -r0
mul r0.xy, v4.zyzw, c7.x
mul r1.xy, v4.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v4, c7.x
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mul r1.xy, v4, c6.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r2.xyz, r0.w, r1, r2
add_pp r3.xyz, r0, -r2
abs r1.xy, v4
abs r1.z, v4
mad_pp r3.xyz, r1.x, r3, r2
max r1.w, r1.x, r1.z
rcp r2.w, r1.w
min r1.w, r1.x, r1.z
mul r1.w, r1, r2
mul r0.xy, v4.zxzw, c6.x
mul r2.xy, v4.zxzw, c7.x
mul r2.w, v0.x, c8.x
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r0.w, r0, r2
mul r0.w, r1, r1
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.y, r0, r3
mad r2.x, r0.w, c12.y, c12.z
mad r1.y, r2.x, r0.w, c12.w
mad r1.y, r1, r0.w, c13.x
add_pp r2.xyz, -r0, c10.y
mul_sat r2.w, r2, c11.z
mad_pp r2.xyz, r2.w, r2, r0
mad r1.y, r1, r0.w, c13
mad r0.x, r1.y, r0.w, c13.z
mul r0.y, r0.x, r1.w
dp4_pp r0.z, c1, c1
rsq_pp r0.x, r0.z
mul_pp r3.xyz, r0.x, c1
add r0.x, r1, -r1.z
add r0.z, -r0.y, c13.w
cmp r0.w, -r0.x, r0.y, r0.z
add r1.x, -r0.w, c11.w
cmp r0.w, v4.z, r0, r1.x
cmp r0.w, v4.x, r0, -r0
mad r1.x, r0.w, c14, c14.y
abs r0.w, v4.y
mad r1.y, r0.w, c10.z, c10.w
dp3_pp r0.x, v3, -r3
mul_pp r0.xyz, v3, r0.x
mad_pp r0.xyz, -r0, c11.z, -r3
dp3_pp_sat r2.w, r0, v1
add r0.y, -r1.z, c10
mad r0.x, r1.z, c10.z, c10.w
mad r0.x, r1.z, r0, c11
mad r0.x, r1.z, r0, c11.y
add r1.z, -r0.w, c10.y
mad r1.y, r1, r0.w, c11.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v4.z, c10, c10.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c11, r0.y
rsq r1.z, r1.z
mad r0.w, r1.y, r0, c11.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v4.y, c10.x, c10.y
mul r1.z, r0.w, r1.y
mad r0.y, -r1.z, c11.z, r1
mad r0.z, r0.x, c11.w, r0
mad r0.x, r0.w, c11.w, r0.y
mul r0.y, r0.z, c12.x
dsx r0.w, r0.y
mul r1.y, r0.x, c12.x
dsx r1.zw, v4.xyxy
mul r1.zw, r1, r1
dsy r0.xz, v4.xyyw
mul r0.xz, r0, r0
add r0.z, r0.x, r0
add r1.z, r1, r1.w
rsq r0.x, r1.z
rsq r0.z, r0.z
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c14.x
mul r0.x, r1.z, c14
dsy r0.y, r0
texldd r1, r1, s0, r0.zwzw, r0
mul_pp r1.xyz, r1, r2
pow_pp r0, r2.w, c5.x
dp3_pp_sat r0.y, v3, r3
mov r2.xyz, c2
add_pp r0.z, r0.y, c10.y
mov_pp r0.w, r0.x
frc_pp r0.x, r0.z
mul r2.xyz, c3, r2
mul r2.xyz, r2, r0.w
add_pp_sat r0.x, r0.z, -r0
mul r2.xyz, r0.x, r2
add_pp r0.x, r0.y, c15
mul_pp r0.y, r0.x, c2.w
mul_pp_sat r0.w, r0.y, c15.y
mov r0.x, c9
add r0.xyz, c2, r0.x
mul r2.xyz, r1.w, r2
mad_sat r0.xyz, r0, r0.w, c0
add_pp r0.xyz, r0, r2
mul_pp r1.xyz, r1, c4
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
"ps_3_0
; 125 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v5, c7.x
dsx r4.xy, v5
dsy r4.zw, v5.xyxy
abs r1.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v5
mul r1.xy, v5, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4 r0.y, c1, c1
rsq r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul r0.y, r0.x, r0.w
mul r2.xyz, r0.z, c1
dp3_pp r2.w, v4, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v4, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
add r2.w, -r0, c11
cmp r0.w, v5.z, r0, r2
dp3_pp_sat r2.z, v4, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v5.x, r0, -r0
pow_pp r0, r3.x, c5.x
add r0.z, -r1.w, c10.y
mad r0.y, r1.w, c10.z, c10.w
mad r0.y, r1.w, r0, c11.x
mad r0.y, r1.w, r0, c11
abs r1.w, v5.y
mad r3.x, r2.w, c14, c14.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v5.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v5.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c11, r2.w
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
dsy r0.w, r0.z
mul r3.y, r0, c12.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c14.x
mul r3.z, r0.y, c14.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
mov_pp r1.w, r0.x
rcp r0.x, v3.w
mad r2.xy, v3, r0.x, c14.y
texld r0.w, r2, s3
add_pp r2.x, r2.z, c10.y
frc_pp r2.y, r2.x
dp3 r0.x, v3, v3
cmp r0.y, -v3.z, c10.x, c10
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.w, r0.y, r0.x
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul r0.xyz, r0, r1.w
add_pp_sat r2.x, r2, -r2.y
add_pp r1.w, r2.z, c15.x
mul r0.xyz, r2.x, r0
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r0
mov r0.w, c9.x
mul r0.xyz, r3.w, r0
mul_pp r1.xyz, r3, r1
mul_pp_sat r1.w, r1, c15.y
add r2.xyz, c2, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r2.xyz, r2, r0
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTextureB0] 2D
SetTexture 4 [_LightTexture0] CUBE
"ps_3_0
; 121 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_cube s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v5, c7.x
dsx r4.xy, v5
dsy r4.zw, v5.xyxy
abs r1.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v5
mul r1.xy, v5, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4 r0.y, c1, c1
rsq r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul r2.xyz, r0.z, c1
mul r0.y, r0.x, r0.w
dp3_pp r2.w, v4, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v4, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
add r2.w, -r0, c11
cmp r0.w, v5.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v5.x, r0, -r0
pow_pp r0, r3.x, c5.x
add r0.z, -r1.w, c10.y
mad r0.y, r1.w, c10.z, c10.w
mad r0.y, r1.w, r0, c11.x
mad r0.y, r1.w, r0, c11
abs r1.w, v5.y
mad r3.x, r2.w, c14, c14.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v5.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v5.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c11, r2.w
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
dp3_pp_sat r1.w, v4, r2
add_pp r2.x, r1.w, c10.y
frc_pp r2.y, r2.x
add_pp r1.w, r1, c15.x
dsy r0.w, r0.z
mul r3.y, r0, c12.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c14.x
mul r3.z, r0.y, c14.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
mov_pp r2.w, r0.x
dp3 r0.x, v3, v3
texld r0.x, r0.x, s3
texld r0.w, v3, s4
mul r0.w, r0.x, r0
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r0
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.x, r0
mov r0.w, c9.x
mul r0.xyz, r3.w, r0
mul_pp r1.xyz, r3, r1
mul_pp_sat r1.w, r1, c15.y
add r2.xyz, c2, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r2.xyz, r2, r0
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
"ps_3_0
; 119 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v5, c7.x
dsx r4.xy, v5
dsy r4.zw, v5.xyxy
abs r1.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v5
mul r1.xy, v5, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4_pp r0.y, c1, c1
rsq_pp r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul_pp r2.xyz, r0.z, c1
mul r0.y, r0.x, r0.w
dp3_pp r2.w, v4, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v4, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
add r2.w, -r0, c11
cmp r0.w, v5.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v5.x, r0, -r0
pow_pp r0, r3.x, c5.x
add r0.z, -r1.w, c10.y
mad r0.y, r1.w, c10.z, c10.w
mad r0.y, r1.w, r0, c11.x
mad r0.y, r1.w, r0, c11
abs r1.w, v5.y
mad r3.x, r2.w, c14, c14.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v5.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v5.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c11, r2.w
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
dp3_pp_sat r1.w, v4, r2
add_pp r2.x, r1.w, c10.y
frc_pp r2.y, r2.x
add_pp r1.w, r1, c15.x
dsy r0.w, r0.z
mul r3.y, r0, c12.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c14.x
mul r3.z, r0.y, c14.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
texld r0.w, v3, s3
mov_pp r2.w, r0.x
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r0
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.x, r0
mov r0.w, c9.x
mul r0.xyz, r3.w, r0
mul_pp r1.xyz, r3, r1
mul_pp_sat r1.w, r1, c15.y
add r2.xyz, c2, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r2.xyz, r2, r0
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 130 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
add r0.w, r0, c15.z
mul r2.xy, v6, c8.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r1.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c15, c15.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v6
mul r1.xy, v6, c7.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v6.zxzw, c7.x
mul r1.xy, v6.zxzw, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c9.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c13.y, c13.z
mad r2.x, r2, r2.w, c13.w
add_pp r1.xyz, -r0, c11.y
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c14
mad r0.x, r2, r2.w, c14.y
dp4 r0.y, c1, c1
rsq r0.z, r0.y
mad r0.x, r0, r2.w, c14.z
mul r2.xyz, r0.z, c1
mul r0.y, r0.x, r0.w
dp3_pp r2.w, v5, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c14.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v5, r2.w
mad_pp r0.xyz, -r0, c12.z, -r2
add r2.w, -r0, c12
cmp r0.w, v6.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v6.x, r0, -r0
pow_pp r0, r3.x, c6.x
add r0.z, -r1.w, c11.y
mad r0.y, r1.w, c11.z, c11.w
mad r0.y, r1.w, r0, c12.x
mad r0.y, r1.w, r0, c12
abs r1.w, v6.y
mad r3.x, r2.w, c15, c15.y
add r3.y, -r1.w, c11
mad r2.w, r1, c11.z, c11
mad r2.w, r2, r1, c12.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c11.x, c11
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c12.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c12.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v6.y, c11.x, c11.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c12, r2.w
mad r0.w, r0.y, c12, r0
mad r0.y, r1.w, c12.w, r0.z
mul r0.z, r0.w, c13.x
dsy r0.w, r0.z
mul r3.y, r0, c13.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c15.x
mul r3.z, r0.y, c15.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
mov_pp r0.y, r0.x
dp3_pp_sat r0.z, v5, r2
texldp r0.x, v4, s5
rcp r0.w, v4.w
mad r0.w, -v4.z, r0, r0.x
mov r1.w, c2.x
cmp r2.z, r0.w, c11.y, r1.w
rcp r0.x, v3.w
mad r2.xy, v3, r0.x, c15.y
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r0, r2.z
add_pp r0.w, r0.z, c11.y
mul r2.xyz, r0.x, c3
frc_pp r1.w, r0
mul r2.xyz, r2, c4
mul r2.xyz, r2, r0.y
add_pp_sat r0.w, r0, -r1
add_pp r0.y, r0.z, c16.x
mul r2.xyz, r0.w, r2
mul_pp r0.y, r0, c3.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c16.y
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r2.xyz, r3.w, r2
add_pp r2.xyz, r0, r2
mul_pp r1.xyz, r3, r1
mul_pp r0.xyz, r1, c5
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 129 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c16, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
add r0.w, r0, c15.z
mul r2.xy, v6, c8.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r1.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c15, c15.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v6
mul r1.xy, v6, c7.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v6.zxzw, c7.x
mul r1.xy, v6.zxzw, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c9.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c13.y, c13.z
mad r2.x, r2, r2.w, c13.w
add_pp r1.xyz, -r0, c11.y
mul_sat r2.y, r2, c12.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c14
mad r0.x, r2, r2.w, c14.y
dp4 r0.y, c1, c1
rsq r0.z, r0.y
mad r0.x, r0, r2.w, c14.z
mul r2.xyz, r0.z, c1
mul r0.y, r0.x, r0.w
dp3_pp r2.w, v5, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c14.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v5, r2.w
mad_pp r0.xyz, -r0, c12.z, -r2
add r2.w, -r0, c12
cmp r0.w, v6.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v6.x, r0, -r0
pow_pp r0, r3.x, c6.x
add r0.z, -r1.w, c11.y
mad r0.y, r1.w, c11.z, c11.w
mad r0.y, r1.w, r0, c12.x
mad r0.y, r1.w, r0, c12
abs r1.w, v6.y
mad r3.x, r2.w, c15, c15.y
add r3.y, -r1.w, c11
mad r2.w, r1, c11.z, c11
mad r2.w, r2, r1, c12.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c11.x, c11
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c12.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c12.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v6.y, c11.x, c11.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c12, r2.w
mad r0.w, r0.y, c12, r0
mad r0.y, r1.w, c12.w, r0.z
mul r0.z, r0.w, c13.x
dsy r0.w, r0.z
mul r3.y, r0, c13.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c15.x
mul r3.z, r0.y, c15.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
mov_pp r0.y, r0.x
mov r0.x, c2
add r1.w, c11.y, -r0.x
dp3_pp_sat r0.z, v5, r2
rcp r0.w, v3.w
mad r2.xy, v3, r0.w, c15.y
texldp r0.x, v4, s5
mad r2.z, r0.x, r1.w, c2.x
dp3 r0.x, v3, v3
texld r0.w, r2, s3
cmp r1.w, -v3.z, c11.x, c11.y
mul_pp r0.w, r1, r0
texld r0.x, r0.x, s4
mul_pp r0.x, r0.w, r0
mul_pp r0.x, r0, r2.z
add_pp r0.w, r0.z, c11.y
mul r2.xyz, r0.x, c3
frc_pp r1.w, r0
mul r2.xyz, r2, c4
mul r2.xyz, r2, r0.y
add_pp_sat r0.w, r0, -r1
add_pp r0.y, r0.z, c16.x
mul r2.xyz, r0.w, r2
mul_pp r0.y, r0, c3.w
mul_pp r0.y, r0, r0.x
mul_pp_sat r0.w, r0.y, c16.y
mov r0.x, c10
add r0.xyz, c3, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r2.xyz, r3.w, r2
add_pp r2.xyz, r0, r2
mul_pp r1.xyz, r3, r1
mul_pp r0.xyz, r1, c5
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
"ps_3_0
; 119 ALU, 10 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v5, c7.x
dsx r4.xy, v5
dsy r4.zw, v5.xyxy
abs r1.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v5
mul r1.xy, v5, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v5.zxzw, c6.x
mul r1.xy, v5.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4_pp r0.y, c1, c1
rsq_pp r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul r0.y, r0.x, r0.w
mul_pp r2.xyz, r0.z, c1
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
dp3_pp r2.w, v4, -r2
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v4, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
add r2.w, -r0, c11
cmp r0.w, v5.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v5.x, r0, -r0
pow_pp r0, r3.x, c5.x
add r0.z, -r1.w, c10.y
mad r0.y, r1.w, c10.z, c10.w
mad r0.y, r1.w, r0, c11.x
mad r0.y, r1.w, r0, c11
abs r1.w, v5.y
mad r3.x, r2.w, c14, c14.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v5.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v5.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c11, r2.w
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
dsy r0.w, r0.z
mul r3.y, r0, c12.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c14.x
mul r3.z, r0.y, c14.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
dp3_pp_sat r0.y, v4, r2
add_pp r0.z, r0.y, c10.y
frc_pp r0.w, r0.z
mov_pp r1.w, r0.x
texldp r0.x, v3, s3
mul r2.xyz, r0.x, c2
mul r2.xyz, r2, c3
add_pp r0.y, r0, c15.x
mul_pp r0.y, r0, c2.w
mul_pp r0.y, r0, r0.x
add_pp_sat r0.z, r0, -r0.w
mul r2.xyz, r2, r1.w
mul r2.xyz, r0.z, r2
mul_pp_sat r0.w, r0.y, c15.y
mov r0.x, c9
add r0.xyz, c2, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r2.xyz, r3.w, r2
add_pp r2.xyz, r0, r2
mul_pp r1.xyz, r3, r1
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] 2D
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 120 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
def c10, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c11, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c12, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c13, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c14, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c15, -0.01000214, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
add r0.w, r0, c14.z
mul r2.xy, v6, c7.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r1.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c14, c14.y
mad r0.xyz, r0.w, r3, r0
abs r3.xy, v6
mul r1.xy, v6, c6.x
max r2.w, r3.x, r1
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r0.xy, v6.zxzw, c6.x
mul r1.xy, v6.zxzw, c7.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mul r2.y, v0.x, c8.x
rcp r1.x, r2.w
min r0.w, r3.x, r1
mul r0.w, r0, r1.x
mul r2.w, r0, r0
mad r2.x, r2.w, c12.y, c12.z
mad r2.x, r2, r2.w, c12.w
add_pp r1.xyz, -r0, c10.y
mul_sat r2.y, r2, c11.z
mad_pp r1.xyz, r2.y, r1, r0
mad r2.x, r2, r2.w, c13
mad r0.x, r2, r2.w, c13.y
dp4_pp r0.y, c1, c1
rsq_pp r0.z, r0.y
mad r0.x, r0, r2.w, c13.z
mul_pp r2.xyz, r0.z, c1
mul r0.y, r0.x, r0.w
dp3_pp r2.w, v5, -r2
add r0.x, r3, -r1.w
add r0.z, -r0.y, c13.w
cmp r0.w, -r0.x, r0.y, r0.z
mul_pp r0.xyz, v5, r2.w
mad_pp r0.xyz, -r0, c11.z, -r2
add r2.w, -r0, c11
cmp r0.w, v6.z, r0, r2
dp3_pp_sat r3.x, r0, v1
cmp r2.w, v6.x, r0, -r0
pow_pp r0, r3.x, c5.x
add r0.z, -r1.w, c10.y
mad r0.y, r1.w, c10.z, c10.w
mad r0.y, r1.w, r0, c11.x
mad r0.y, r1.w, r0, c11
abs r1.w, v6.y
mad r3.x, r2.w, c14, c14.y
add r3.y, -r1.w, c10
mad r2.w, r1, c10.z, c10
mad r2.w, r2, r1, c11.x
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0.y, r0
cmp r0.y, v6.z, c10.x, c10
mul r0.w, r0.y, r0.z
mad r0.w, -r0, c11.z, r0.z
rsq r3.y, r3.y
mad r1.w, r2, r1, c11.y
rcp r3.y, r3.y
mul r2.w, r1, r3.y
cmp r1.w, v6.y, c10.x, c10.y
mul r3.y, r1.w, r2.w
mad r0.z, -r3.y, c11, r2.w
mad r0.w, r0.y, c11, r0
mad r0.y, r1.w, c11.w, r0.z
mul r0.z, r0.w, c12.x
dp3_pp_sat r1.w, v5, r2
add_pp r2.x, r1.w, c10.y
frc_pp r2.y, r2.x
add_pp r1.w, r1, c15.x
dsy r0.w, r0.z
mul r3.y, r0, c12.x
mul r4.xy, r4, r4
add r0.y, r4.x, r4
rsq r0.y, r0.y
rcp r0.y, r0.y
dsx r3.w, r0.z
mul r4.zw, r4, r4
add r0.z, r4, r4.w
rsq r0.z, r0.z
rcp r0.z, r0.z
mul r0.z, r0, c14.x
mul r3.z, r0.y, c14.x
texldd r3, r3, s0, r3.zwzw, r0.zwzw
mov_pp r2.w, r0.x
texldp r0.x, v4, s3
texld r0.w, v3, s4
mul r0.w, r0, r0.x
mul r0.xyz, r0.w, c2
mul r0.xyz, r0, c3
mul_pp r1.w, r1, c2
mul_pp r1.w, r1, r0
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r0, r2.w
mul r0.xyz, r2.x, r0
mov r0.w, c9.x
mul r0.xyz, r3.w, r0
mul_pp r1.xyz, r3, r1
mul_pp_sat r1.w, r1, c15.y
add r2.xyz, c2, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r2.xyz, r2, r0
mul_pp r0.xyz, r1, c4
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c10.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 129 ALU, 11 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.01000214, 0.97000003, 4.03944778, 0
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c16.z
mul r2.xy, v6, c9.x
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c16, c16.y
mul r1.xy, v6, c8.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r2.xyz, r0.w, r1, r2
add_pp r3.xyz, r0, -r2
abs r1.xy, v6
abs r1.z, v6
mad_pp r3.xyz, r1.x, r3, r2
max r1.w, r1.x, r1.z
rcp r2.w, r1.w
min r1.w, r1.x, r1.z
mul r1.w, r1, r2
mul r0.xy, v6.zxzw, c8.x
mul r2.xy, v6.zxzw, c9.x
mul r2.w, v0.x, c10.x
texld r2.xyz, r2, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r2
mad r0.xyz, r0.w, r0, r2
mul r0.w, r1, r1
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.y, r0, r3
mad r2.x, r0.w, c14.y, c14.z
mad r1.y, r2.x, r0.w, c14.w
mad r1.y, r1, r0.w, c15.x
add_pp r2.xyz, -r0, c12.y
mul_sat r2.w, r2, c13.z
mad_pp r3.xyz, r2.w, r2, r0
mad r1.y, r1, r0.w, c15
mad r0.x, r1.y, r0.w, c15.z
mul r0.y, r0.x, r1.w
dp4 r0.z, c1, c1
rsq r0.x, r0.z
mul r2.xyz, r0.x, c1
add r0.x, r1, -r1.z
add r0.z, -r0.y, c15.w
cmp r0.w, -r0.x, r0.y, r0.z
add r1.x, -r0.w, c13.w
cmp r0.w, v6.z, r0, r1.x
dp3_pp r0.x, v5, -r2
cmp r0.w, v6.x, r0, -r0
mad r1.x, r0.w, c16, c16.y
abs r0.w, v6.y
mad r1.y, r0.w, c12.z, c12.w
mul_pp r0.xyz, v5, r0.x
mad_pp r0.xyz, -r0, c13.z, -r2
dp3_pp_sat r2.w, r0, v1
add r0.y, -r1.z, c12
mad r0.x, r1.z, c12.z, c12.w
mad r0.x, r1.z, r0, c13
mad r0.x, r1.z, r0, c13.y
add r1.z, -r0.w, c12.y
mad r1.y, r1, r0.w, c13.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c13, r0.y
rsq r1.z, r1.z
mad r0.w, r1.y, r0, c13.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.y, c12.x, c12.y
mul r1.z, r0.w, r1.y
mad r0.y, -r1.z, c13.z, r1
mad r0.z, r0.x, c13.w, r0
mad r0.x, r0.w, c13.w, r0.y
mul r0.y, r0.z, c14.x
mul r1.y, r0.x, c14.x
dsx r0.w, r0.y
dsx r1.zw, v6.xyxy
mul r1.zw, r1, r1
dsy r0.xz, v6.xyyw
mul r0.xz, r0, r0
add r0.z, r0.x, r0
add r1.z, r1, r1.w
rsq r0.x, r1.z
rsq r0.z, r0.z
rcp r1.z, r0.z
rcp r0.x, r0.x
mul r0.z, r0.x, c16.x
mul r0.x, r1.z, c16
dsy r0.y, r0
texldd r0, r1, s0, r0.zwzw, r0
mul_pp r3.xyz, r0, r3
pow_pp r1, r2.w, c7.x
mov_pp r0.y, r1.x
texld r1, v4, s3
dp4 r0.z, r1, c18
dp3 r0.x, v4, v4
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.x, r0, c2.w
mad r0.z, -r0.x, c17.y, r0
mov r1.x, c3
dp3 r0.x, v3, v3
cmp r0.z, r0, c12.y, r1.x
texld r0.x, r0.x, s4
mul r0.x, r0, r0.z
dp3_pp_sat r0.z, v5, r2
add_pp r1.w, r0.z, c12.y
mul r1.xyz, r0.x, c4
mul r1.xyz, r1, c5
mul r1.xyz, r1, r0.y
add_pp r0.y, r0.z, c17.x
frc_pp r2.x, r1.w
add_pp_sat r1.w, r1, -r2.x
mul r1.xyz, r1.w, r1
mul_pp r0.y, r0, c4.w
mul_pp r0.y, r0, r0.x
mul r1.xyz, r0.w, r1
mul_pp_sat r0.w, r0.y, c17.z
mov r0.x, c11
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
add_pp r0.xyz, r0, r1
mul_pp r1.xyz, r3, c6
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 130 ALU, 12 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.01000214, 0.97000003, 4.03944778, 0
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c16.z
mul r2.xy, v6, c9.x
mul r2.w, v0.x, c10.x
dsx r4.xy, v6
dsy r4.zw, v6.xyxy
abs r1.w, v6.z
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c16, c16.y
mul r1.xy, v6, c8.x
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
abs r2.xy, v6
mad r0.xyz, r0.w, r3, r0
add_pp r0.xyz, r0, -r1
mad_pp r3.xyz, r2.x, r0, r1
mul r0.xy, v6.zxzw, c8.x
mul r1.xy, v6.zxzw, c9.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
max r2.z, r2.x, r1.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r2.y, r0, r3
rcp r1.x, r2.z
min r0.w, r2.x, r1
mul r0.w, r0, r1.x
mul r2.z, r0.w, r0.w
mad r2.y, r2.z, c14, c14.z
mad r2.y, r2, r2.z, c14.w
add_pp r1.xyz, -r0, c12.y
mul_sat r2.w, r2, c13.z
mad_pp r0.xyz, r2.w, r1, r0
mad r2.y, r2, r2.z, c15.x
mad r1.x, r2.y, r2.z, c15.y
mad r1.x, r1, r2.z, c15.z
mul r2.y, r1.x, r0.w
dp4 r1.y, c1, c1
rsq r1.y, r1.y
mul r1.xyz, r1.y, c1
dp3_pp r2.w, v5, -r1
add r0.w, r2.x, -r1
add r2.z, -r2.y, c15.w
cmp r0.w, -r0, r2.y, r2.z
mul_pp r2.xyz, v5, r2.w
mad_pp r2.xyz, -r2, c13.z, -r1
dp3_pp_sat r2.x, r2, v1
pow_pp r3, r2.x, c7.x
abs r2.y, v6
add r2.w, -r0, c13
cmp r0.w, v6.z, r0, r2
cmp r0.w, v6.x, r0, -r0
mad r2.z, r0.w, c16.x, c16.y
add r2.x, -r1.w, c12.y
mad r0.w, r1, c12.z, c12
mad r0.w, r1, r0, c13.x
add r3.y, -r2, c12
mad r2.w, r2.y, c12.z, c12
mad r2.w, r2, r2.y, c13.x
rsq r2.x, r2.x
rsq r3.y, r3.y
mad r0.w, r1, r0, c13.y
rcp r2.x, r2.x
mul r1.w, r0, r2.x
cmp r0.w, v6.z, c12.x, c12.y
mul r2.x, r0.w, r1.w
mad r2.x, -r2, c13.z, r1.w
mad r2.y, r2.w, r2, c13
rcp r3.y, r3.y
mul r2.w, r2.y, r3.y
cmp r2.y, v6, c12.x, c12
mul r3.y, r2, r2.w
mad r1.w, -r3.y, c13.z, r2
mad r2.x, r0.w, c13.w, r2
mad r0.w, r2.y, c13, r1
mul r1.w, r2.x, c14.x
dsx r3.w, r1
mul r2.w, r0, c14.x
mul r4.xy, r4, r4
add r0.w, r4.x, r4.y
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r3.z, r0.w, c16.x
dsy r2.y, r1.w
mul r4.zw, r4, r4
add r1.w, r4.z, r4
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r2.x, r1.w, c16
texldd r2, r2.zwzw, s0, r3.zwzw, r2
mul_pp r2.xyz, r2, r0
texld r0, v4, s3
dp4 r0.y, r0, c18
mov_pp r1.w, r3.x
dp3 r3.x, v4, v4
rsq r3.x, r3.x
rcp r0.x, r3.x
mul r0.x, r0, c2.w
mad r0.x, -r0, c17.y, r0.y
mov r0.z, c3.x
cmp r0.y, r0.x, c12, r0.z
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r0.x, r0, r0.y
dp3_pp_sat r0.y, v5, r1
add_pp r0.z, r0.y, c12.y
frc_pp r0.w, r0.z
mul r1.xyz, r0.x, c4
mul r1.xyz, r1, c5
add_pp r0.y, r0, c17.x
mul_pp r0.y, r0, c4.w
mul_pp r0.y, r0, r0.x
add_pp_sat r0.z, r0, -r0.w
mul r1.xyz, r1, r1.w
mul r1.xyz, r0.z, r1
mul_pp_sat r0.w, r0.y, c17.z
mov r0.x, c11
add r0.xyz, c4, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r1.xyz, r2.w, r1
add_pp r1.xyz, r0, r1
mul_pp r0.xyz, r2, c6
mul_pp oC0.xyz, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_SpecColor]
Vector 9 [_Color]
Float 10 [_Shininess]
Float 11 [_DetailScale]
Float 12 [_DetailVertScale]
Float 13 [_DetailDist]
Float 14 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 138 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c20, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r1.xy, v6, c12.x
texld r2.xyz, r1, s1
mul r0.xy, v6, c11.x
texld r0.xyz, r0, s2
add r3.xyz, r0, -r2
add r0.w, r0, c19.z
mul r1.xy, v6.zyzw, c12.x
mul r0.xy, v6.zyzw, c11.x
dsx r4.zw, v6.xyxy
abs r1.w, v6.z
mad_sat r0.w, r0, c19, c19.y
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
mad r1.xyz, r0.w, r3, r2
abs r3.xy, v6
max r2.x, r3, r1.w
rcp r2.y, r2.x
min r2.x, r3, r1.w
mul r2.w, r2.x, r2.y
add_pp r0.xyz, r0, -r1
mad_pp r2.xyz, r3.x, r0, r1
mul r3.z, r2.w, r2.w
mul r1.xy, v6.zxzw, c12.x
mul r0.xy, v6.zxzw, c11.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
mad r3.w, r3.z, c17.y, c17.z
mad r0.w, r3, r3.z, c17
mad r0.w, r0, r3.z, c18.x
mad r0.w, r0, r3.z, c18.y
mad r0.w, r0, r3.z, c18.z
add_pp r1.xyz, -r0, c15.y
mul r2.x, r0.w, r2.w
mul r2.y, v0.x, c13.x
mul_sat r0.w, r2.y, c16.z
mad_pp r0.xyz, r0.w, r1, r0
dp4 r1.y, c1, c1
add r1.x, -r2, c18.w
add r0.w, r3.x, -r1
cmp r0.w, -r0, r2.x, r1.x
add r1.x, -r0.w, c16.w
cmp r0.w, v6.z, r0, r1.x
rsq r1.y, r1.y
mul r2.xyz, r1.y, c1
dp3_pp r1.y, v5, -r2
mul_pp r1.xyz, v5, r1.y
mad_pp r3.xyz, -r1, c16.z, -r2
abs r1.z, v6.y
cmp r0.w, v6.x, r0, -r0
mad r4.x, r0.w, c19, c19.y
add r1.x, -r1.w, c15.y
mad r0.w, r1, c15.z, c15
mad r0.w, r1, r0, c16.x
mad r0.w, r1, r0, c16.y
add r2.w, -r1.z, c15.y
mad r1.w, r1.z, c15.z, c15
mad r1.w, r1, r1.z, c16.x
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.x, r0.w, r1
cmp r0.w, v6.z, c15.x, c15.y
mul r1.y, r0.w, r1.x
mad r1.y, -r1, c16.z, r1.x
rsq r2.w, r2.w
mad r1.z, r1.w, r1, c16.y
rcp r2.w, r2.w
mul r1.w, r1.z, r2
cmp r1.z, v6.y, c15.x, c15.y
mul r2.w, r1.z, r1
mad r1.x, -r2.w, c16.z, r1.w
dp3_pp_sat r2.w, r3, v1
rcp r3.z, v4.w
mad r1.y, r0.w, c16.w, r1
mad r0.w, r1.z, c16, r1.x
mul r1.x, r1.y, c17
mul r4.y, r0.w, c17.x
mul r4.zw, r4, r4
add r0.w, r4.z, r4
rsq r0.w, r0.w
dsx r1.w, r1.x
dsy r1.y, r1.x
dsy r1.xz, v6.xyyw
mul r1.xz, r1, r1
add r1.x, r1, r1.z
rcp r0.w, r0.w
rsq r1.x, r1.x
rcp r1.x, r1.x
mul r1.z, r0.w, c19.x
mul r1.x, r1, c19
texldd r1, r4, s0, r1.zwzw, r1
mul_pp r1.xyz, r1, r0
pow_pp r0, r2.w, c10.x
mad r3.xy, v4, r3.z, c6
mov_pp r2.w, r0.x
texld r0.x, r3, s5
mad r3.xy, v4, r3.z, c5
mov r0.w, r0.x
texld r0.x, r3, s5
mad r3.xy, v4, r3.z, c4
mov r0.z, r0.x
texld r0.x, r3, s5
mad r3.xy, v4, r3.z, c3
mov r0.y, r0.x
texld r0.x, r3, s5
mov r3.x, c2
mad r0, -v4.z, r3.z, r0
cmp r0, r0, c15.y, r3.x
dp4_pp r0.z, r0, c20.y
rcp r3.x, v3.w
mad r3.xy, v3, r3.x, c19.y
dp3 r0.x, v3, v3
texld r0.w, r3, s3
cmp r0.y, -v3.z, c15.x, c15
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.y, r0
mul_pp r0.x, r0, r0.z
dp3_pp_sat r0.y, v5, r2
add_pp r0.z, r0.y, c15.y
frc_pp r0.w, r0.z
mul r2.xyz, r0.x, c7
mul r2.xyz, r2, c8
add_pp r0.y, r0, c20.x
mul_pp r0.y, r0, c7.w
mul_pp r0.y, r0, r0.x
add_pp_sat r0.z, r0, -r0.w
mul r2.xyz, r2, r2.w
mul r2.xyz, r0.z, r2
mul_pp_sat r0.w, r0.y, c20.z
mov r0.x, c14
add r0.xyz, c7, r0.x
mad_sat r0.xyz, r0, r0.w, c0
mul r2.xyz, r1.w, r2
add_pp r2.xyz, r0, r2
mul_pp r0.xyz, r1, c9
mul_pp oC0.xyz, r0, r2
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_SpecColor]
Vector 9 [_Color]
Float 10 [_Shininess]
Float 11 [_DetailScale]
Float 12 [_DetailVertScale]
Float 13 [_DetailDist]
Float 14 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_LightTexture0] 2D
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_ShadowMapTexture] 2D
"ps_3_0
; 137 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c15, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c16, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c17, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c18, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c19, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c20, -0.01000214, 0.25000000, 4.03944778, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c19.z
mul r0.xy, v6.zyzw, c12.x
mul r1.xy, v6.zyzw, c11.x
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c17.y, c17.z
mad r3.w, r3, r2, c17
mad r3.w, r3, r2, c18.x
mad r3.w, r3, r2, c18.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c19.w, c19.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c12.x
mul r0.xy, v6, c11.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c12.x
mul r0.xy, v6.zxzw, c11.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r0.xyz, r0, -r2
mad r2.w, r3, r2, c18.z
mul r1.y, r2.w, r1.w
mad_pp r0.xyz, r3.y, r0, r2
add r1.x, r3, -r0.w
add r1.z, -r1.y, c18.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c16.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c13
dsy r3.xy, v6
add_pp r1.xyz, -r0, c15.y
mul_sat r2.x, r2, c16.z
mad_pp r2.xyz, r2.x, r1, r0
abs r1.x, v6.y
cmp r1.w, v6.x, r1, -r1
add r0.y, -r0.w, c15
mad r0.x, r0.w, c15.z, c15.w
mad r0.x, r0.w, r0, c16
add r1.z, -r1.x, c15.y
mad r1.y, r1.x, c15.z, c15.w
mad r1.y, r1, r1.x, c16.x
rsq r0.y, r0.y
rsq r1.z, r1.z
rcp r2.w, v4.w
mad r0.z, r1.w, c19.x, c19.y
mad r0.x, r0.w, r0, c16.y
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c15, c15.y
mul r0.w, r0.x, r0.y
mad r0.w, -r0, c16.z, r0.y
mad r1.x, r1.y, r1, c16.y
rcp r1.z, r1.z
mul r1.y, r1.x, r1.z
cmp r1.x, v6.y, c15, c15.y
mul r1.z, r1.x, r1.y
mad r0.y, -r1.z, c16.z, r1
mad r0.w, r0.x, c16, r0
mad r0.x, r1, c16.w, r0.y
mul r0.y, r0.w, c17.x
dsx r1.y, r0
mul r3.xy, r3, r3
add r1.x, r3, r3.y
dsx r1.zw, v6.xyxy
mul r1.zw, r1, r1
mul r0.w, r0.x, c17.x
add r0.x, r1.z, r1.w
rsq r1.x, r1.x
rsq r0.x, r0.x
rcp r1.z, r1.x
rcp r0.x, r0.x
mul r1.x, r0, c19
mul r0.x, r1.z, c19
dsy r0.y, r0
texldd r1, r0.zwzw, s0, r1, r0
mul_pp r1.xyz, r1, r2
mad r0.xyz, v4, r2.w, c6
texld r0.x, r0, s5
mad r2.xyz, v4, r2.w, c5
mov_pp r0.w, r0.x
texld r0.x, r2, s5
mad r2.xyz, v4, r2.w, c4
mov_pp r0.z, r0.x
texld r0.x, r2, s5
mad r2.xyz, v4, r2.w, c3
mov_pp r0.y, r0.x
texld r0.x, r2, s5
mov r2.y, c2.x
add r2.y, c15, -r2
mad r0, r0, r2.y, c2.x
dp4_pp r0.y, r0, c20.y
rcp r0.x, v3.w
mad r4.xy, v3, r0.x, c19.y
dp4 r2.x, c1, c1
rsq r2.x, r2.x
mul r2.xyz, r2.x, c1
dp3_pp r0.z, v5, -r2
mul_pp r3.xyz, v5, r0.z
mad_pp r3.xyz, -r3, c16.z, -r2
dp3 r0.x, v3, v3
texld r0.w, r4, s3
cmp r0.z, -v3, c15.x, c15.y
mul_pp r0.z, r0, r0.w
texld r0.x, r0.x, s4
mul_pp r0.x, r0.z, r0
mul_pp r2.w, r0.x, r0.y
mul r0.xyz, r2.w, c7
dp3_pp_sat r3.w, r3, v1
mul r3.xyz, r0, c8
pow_pp r0, r3.w, c10.x
dp3_pp_sat r0.w, v5, r2
add_pp r2.x, r0.w, c15.y
frc_pp r2.y, r2.x
add_pp r0.w, r0, c20.x
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r3, r0.x
mul r0.xyz, r2.x, r0
mul_pp r0.w, r0, c7
mul r0.xyz, r1.w, r0
mul_pp r1.w, r0, r2
mov r0.w, c14.x
mul_pp_sat r1.w, r1, c20.z
add r2.xyz, c7, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r0.xyz, r2, r0
mul_pp r1.xyz, r1, c9
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c15.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTexture0] 2D
"ps_3_0
; 136 ALU, 14 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c16.z
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
mad r3.w, r3, r2, c15.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c16.w, c16.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c9.x
mul r0.xy, v6, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c9.x
mul r0.xy, v6.zxzw, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
mad r2.w, r3, r2, c15.z
mul r1.y, r2.w, r1.w
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r3.y, r0, r2
abs r2.z, v6.y
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
cmp r1.w, v6.z, r1, r2.x
add r2.y, -r0.w, c12
add r3.x, -r2.z, c12.y
mad r2.w, r2.z, c12.z, c12
mad r2.w, r2, r2.z, c13.x
mul r2.x, v0, c10
rsq r2.y, r2.y
rsq r3.x, r3.x
dsx r3.zw, v6.xyxy
mul r3.zw, r3, r3
mad r2.z, r2.w, r2, c13.y
rcp r3.x, r3.x
mul r2.w, r2.z, r3.x
cmp r2.z, v6.y, c12.x, c12.y
mul r3.x, r2.z, r2.w
add_pp r1.xyz, -r0, c12.y
mul_sat r2.x, r2, c13.z
mad_pp r1.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r2.x, r1.w, c16, c16.y
mad r1.w, r0, c12.z, c12
mad r1.w, r0, r1, c13.x
mad r0.w, r0, r1, c13.y
rcp r2.y, r2.y
mul r1.w, r0, r2.y
cmp r0.w, v6.z, c12.x, c12.y
mul r2.y, r0.w, r1.w
mad r2.y, -r2, c13.z, r1.w
mad r1.w, -r3.x, c13.z, r2
mad r2.y, r0.w, c13.w, r2
mad r0.w, r2.z, c13, r1
mul r1.w, r2.y, c14.x
mul r2.y, r0.w, c14.x
add r0.w, r3.z, r3
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r3.y, r1.w
mul r3.x, r0.w, c16
add r0.xyz, v4, c17.yzzw
texld r0, r0, s3
dp4 r3.w, r0, c18
add r0.xyz, v4, c17.zyzw
texld r0, r0, s3
dp4 r3.z, r0, c18
dsy r2.w, r1
mul r4.xy, r4, r4
add r1.w, r4.x, r4.y
rsq r1.w, r1.w
rcp r1.w, r1.w
mul r2.z, r1.w, c16.x
texldd r2, r2, s0, r3, r2.zwzw
mul_pp r2.xyz, r2, r1
add r1.xyz, v4, c17.zzyw
texld r1, r1, s3
dp4 r3.y, r1, c18
dp3 r0.w, v4, v4
rsq r1.x, r0.w
add r0.xyz, v4, c17.y
texld r0, r0, s3
dp4 r3.x, r0, c18
rcp r1.x, r1.x
mul r0.x, r1, c2.w
dp4 r1.x, c1, c1
mad r0, -r0.x, c17.w, r3
mov r1.y, c3.x
cmp r0, r0, c12.y, r1.y
dp4_pp r0.y, r0, c19.x
rsq r1.x, r1.x
mul r1.xyz, r1.x, c1
dp3_pp r0.z, v5, -r1
mul_pp r3.xyz, v5, r0.z
mad_pp r3.xyz, -r3, c13.z, -r1
dp3 r0.x, v3, v3
texld r0.x, r0.x, s4
mul r1.w, r0.x, r0.y
mul r0.xyz, r1.w, c4
dp3_pp_sat r3.w, r3, v1
mul r3.xyz, r0, c5
pow_pp r0, r3.w, c7.x
dp3_pp_sat r0.w, v5, r1
add_pp r1.x, r0.w, c12.y
frc_pp r1.y, r1.x
add_pp r0.w, r0, c17.x
add_pp_sat r1.x, r1, -r1.y
mul r0.xyz, r3, r0.x
mul r0.xyz, r1.x, r0
mul_pp r0.w, r0, c4
mul_pp r1.x, r0.w, r1.w
mul_pp_sat r1.w, r1.x, c19.y
mov r0.w, c11.x
add r1.xyz, c4, r0.w
mad_sat r1.xyz, r1, r1.w, c0
mul r0.xyz, r2.w, r0
add_pp r0.xyz, r1, r0
mul_pp r1.xyz, r2, c6
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_ShadowMapTexture] CUBE
SetTexture 4 [_LightTextureB0] 2D
SetTexture 5 [_LightTexture0] CUBE
"ps_3_0
; 137 ALU, 15 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_cube s3
dcl_2d s4
dcl_cube s5
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.94999999, 32.00000000
def c17, -0.01000214, 0.00781250, -0.00781250, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 0.25000000, 4.03944778, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r2.xyz, v6
dp3_sat r2.x, v2, -r2
add r2.y, r2.x, c16.z
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
dsy r4.xy, v6
abs r0.w, v6.z
abs r3.xy, v6
max r1.w, r3.x, r0
rcp r2.x, r1.w
min r1.w, r3.x, r0
mul r1.w, r1, r2.x
mul r2.w, r1, r1
mad r3.w, r2, c14.y, c14.z
mad r3.w, r3, r2, c14
mad r3.w, r3, r2, c15.x
mad r3.w, r3, r2, c15.y
texld r0.xyz, r0, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r0
mad_sat r3.z, r2.y, c16.w, c16.y
mad r2.xyz, r3.z, r1, r0
mul r1.xy, v6, c9.x
mul r0.xy, v6, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
add_pp r1.xyz, r2, -r0
mad_pp r2.xyz, r3.x, r1, r0
mul r1.xy, v6.zxzw, c9.x
mul r0.xy, v6.zxzw, c8.x
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r3.z, r0, r1
mad r2.w, r3, r2, c15.z
mul r1.y, r2.w, r1.w
add_pp r0.xyz, r0, -r2
dsx r3.zw, v6.xyxy
mad_pp r0.xyz, r3.y, r0, r2
mul r3.zw, r3, r3
add r1.x, r3, -r0.w
add r1.z, -r1.y, c15.w
cmp r1.w, -r1.x, r1.y, r1.z
add r2.x, -r1.w, c13.w
cmp r1.w, v6.z, r1, r2.x
mul r2.x, v0, c10
add_pp r1.xyz, -r0, c12.y
mul_sat r2.x, r2, c13.z
mad_pp r2.xyz, r2.x, r1, r0
cmp r1.w, v6.x, r1, -r1
mad r1.x, r1.w, c16, c16.y
abs r1.w, v6.y
add r1.z, -r0.w, c12.y
mad r1.y, r0.w, c12.z, c12.w
mad r1.y, r0.w, r1, c13.x
add r3.x, -r1.w, c12.y
mad r2.w, r1, c12.z, c12
mad r2.w, r2, r1, c13.x
rsq r1.z, r1.z
rsq r3.x, r3.x
mad r0.w, r0, r1.y, c13.y
rcp r1.z, r1.z
mul r1.y, r0.w, r1.z
cmp r0.w, v6.z, c12.x, c12.y
mul r1.z, r0.w, r1.y
mad r1.z, -r1, c13, r1.y
mad r1.z, r0.w, c13.w, r1
mul r1.z, r1, c14.x
mad r1.w, r2, r1, c13.y
rcp r3.x, r3.x
mul r2.w, r1, r3.x
cmp r1.w, v6.y, c12.x, c12.y
mul r3.x, r1.w, r2.w
mad r1.y, -r3.x, c13.z, r2.w
mad r0.w, r1, c13, r1.y
mul r1.y, r0.w, c14.x
add r0.w, r3.z, r3
rsq r0.w, r0.w
rcp r0.w, r0.w
dsx r3.y, r1.z
mul r3.x, r0.w, c16
add r0.xyz, v4, c17.yzzw
texld r0, r0, s3
dp4 r3.w, r0, c18
add r0.xyz, v4, c17.zyzw
texld r0, r0, s3
dp4 r3.z, r0, c18
add r0.xyz, v4, c17.y
texld r0, r0, s3
dsy r1.w, r1.z
mul r4.xy, r4, r4
add r1.z, r4.x, r4.y
rsq r1.z, r1.z
rcp r1.z, r1.z
mul r1.z, r1, c16.x
texldd r1, r1, s0, r3, r1.zwzw
mul_pp r1.xyz, r1, r2
add r2.xyz, v4, c17.zzyw
texld r2, r2, s3
dp4 r3.y, r2, c18
dp3 r2.x, v4, v4
dp4 r3.x, r0, c18
rsq r2.x, r2.x
rcp r0.x, r2.x
dp4 r2.x, c1, c1
mul r0.x, r0, c2.w
rsq r2.x, r2.x
mul r2.xyz, r2.x, c1
mad r0, -r0.x, c17.w, r3
mov r2.w, c3.x
cmp r0, r0, c12.y, r2.w
dp4_pp r0.y, r0, c19.x
dp3_pp r2.w, v5, -r2
mul_pp r3.xyz, v5, r2.w
mad_pp r3.xyz, -r3, c13.z, -r2
dp3 r0.x, v3, v3
texld r0.w, v3, s5
texld r0.x, r0.x, s4
mul r0.x, r0, r0.w
mul r2.w, r0.x, r0.y
mul r0.xyz, r2.w, c4
dp3_pp_sat r3.w, r3, v1
mul r3.xyz, r0, c5
pow_pp r0, r3.w, c7.x
dp3_pp_sat r0.w, v5, r2
add_pp r2.x, r0.w, c12.y
frc_pp r2.y, r2.x
add_pp r0.w, r0, c17.x
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r3, r0.x
mul r0.xyz, r2.x, r0
mul_pp r0.w, r0, c4
mul r0.xyz, r1.w, r0
mul_pp r1.w, r0, r2
mov r0.w, c11.x
mul_pp_sat r1.w, r1, c19.y
add r2.xyz, c4, r0.w
mad_sat r2.xyz, r2, r1.w, c0
add_pp r0.xyz, r2, r0
mul_pp r1.xyz, r1, c6
mul_pp oC0.xyz, r1, r0
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_OFF" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 140 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r5.xy, v5.zyzw, c10.x
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v5, c6.x
abs r2.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v5.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v5.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v5.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v5, r3.w, r3
cmp r3.z, v5.x, r3, -r3
abs r3.w, v5.y
mul r1.xy, v5.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v5, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v5.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v5.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v5.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v4, -r4
mul_pp r6.xyz, v4, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
dp3_pp_sat r2.w, v4, r4
add_pp r1.w, r2, c11.y
dp3 r1.x, v3, v3
texld r1.x, r1.x, s6
mul r3.xyz, r1.x, c2
frc_pp r1.z, r1.w
mov_pp r1.y, r5.x
mul r3.xyz, r3, c3
mul r3.xyz, r3, r1.y
add_pp_sat r1.y, r1.w, -r1.z
mul r3.xyz, r1.y, r3
add_pp r1.y, r2.w, c15.z
mul_pp r1.z, r1.y, c2.w
mul_pp r1.w, r1.z, r1.x
mov r1.y, c9.x
mul_pp_sat r1.w, r1, c15
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mul r3.xyz, r4.w, r3
add_pp r1.xyz, r1, r3
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 138 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mov r0.xyz, v4
dp3_sat r0.w, v2, -r0
mul r5.xy, v4.zyzw, c10.x
mul r0.xy, v4.zyzw, c7.x
mul r1.xy, v4.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v4, c6.x
abs r2.w, v4.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v4, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v4.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v4.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v4.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v4, r3.w, r3
cmp r3.z, v4.x, r3, -r3
abs r3.w, v4.y
mul r1.xy, v4.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v4, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v4.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v4.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v4.xyxy
dp4_pp r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v4
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq_pp r2.w, r2.w
mul_pp r4.xyz, r2.w, c1
dp3_pp r2.w, v3, -r4
mul_pp r6.xyz, v3, r2.w
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r2.w, v3, r4
add_pp r4.y, r2.w, c11
add_pp r2.w, r2, c15.z
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
mov r3.xyz, c2
mov_pp r3.w, r5.x
mul r3.xyz, c3, r3
mul r3.xyz, r3, r3.w
frc_pp r4.x, r4.y
add_pp_sat r3.w, r4.y, -r4.x
mul r3.xyz, r3.w, r3
mul r1.xyz, r4.w, r3
mov r1.w, c9.x
add r3.xyz, c2, r1.w
mul_pp r2.w, r2, c2
mul_pp_sat r1.w, r2, c15
mad_sat r3.xyz, r1.w, r3, c0
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 145 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r5.xy, v5.zyzw, c10.x
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v5, c6.x
abs r2.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v5.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v5.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v5.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v5, r3.w, r3
cmp r3.z, v5.x, r3, -r3
abs r3.w, v5.y
mul r1.xy, v5.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v5, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v5.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v5.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v5.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v4, -r4
mul_pp r6.xyz, v4, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
rcp r1.x, v3.w
mad r3.xy, v3, r1.x, c15.y
dp3 r1.x, v3, v3
texld r1.w, r3, s6
dp3_pp_sat r2.w, v4, r4
add_pp r3.y, r2.w, c11
frc_pp r3.x, r3.y
cmp r1.y, -v3.z, c11.x, c11
mul_pp r1.y, r1, r1.w
texld r1.x, r1.x, s7
mul_pp r1.w, r1.y, r1.x
mul r1.xyz, r1.w, c2
add_pp_sat r3.x, r3.y, -r3
mov_pp r3.z, r5.x
mul r1.xyz, r1, c3
mul r1.xyz, r1, r3.z
mul r1.xyz, r3.x, r1
add_pp r2.w, r2, c15.z
mul_pp r3.x, r2.w, c2.w
mul_pp r1.w, r3.x, r1
mov r2.w, c9.x
mul_pp_sat r1.w, r1, c15
add r3.xyz, c2, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 141 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r5.xy, v5.zyzw, c10.x
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v5, c6.x
abs r2.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v5.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v5.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v5.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v5, r3.w, r3
cmp r3.z, v5.x, r3, -r3
abs r3.w, v5.y
mul r1.xy, v5.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v5, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v5.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v5.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v5.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v4, -r4
mul_pp r6.xyz, v4, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
dp3_pp_sat r2.w, v4, r4
add_pp r3.z, r2.w, c11.y
dp3 r1.x, v3, v3
mov_pp r3.x, r5
texld r1.x, r1.x, s6
texld r1.w, v3, s7
mul r1.w, r1.x, r1
mul r1.xyz, r1.w, c2
mul r1.xyz, r1, c3
mul r1.xyz, r1, r3.x
frc_pp r3.y, r3.z
add_pp_sat r3.x, r3.z, -r3.y
mul r1.xyz, r3.x, r1
add_pp r2.w, r2, c15.z
mul_pp r3.x, r2.w, c2.w
mul_pp r1.w, r3.x, r1
mov r2.w, c9.x
mul_pp_sat r1.w, r1, c15
add r3.xyz, c2, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 139 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r5.xy, v5.zyzw, c10.x
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v5, c6.x
abs r2.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v5.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v5.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v5.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v5, r3.w, r3
cmp r3.z, v5.x, r3, -r3
abs r3.w, v5.y
mul r1.xy, v5.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v5, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v5.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v5.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v5.xyxy
dp4_pp r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq_pp r2.w, r2.w
mul_pp r4.xyz, r2.w, c1
dp3_pp r2.w, v4, -r4
mul_pp r6.xyz, v4, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
dp3_pp_sat r3.z, v4, r4
add_pp r3.y, r3.z, c11
texld r1.w, v3, s6
mul r1.xyz, r1.w, c2
frc_pp r3.x, r3.y
mov_pp r2.w, r5.x
mul r1.xyz, r1, c3
mul r1.xyz, r1, r2.w
add_pp_sat r2.w, r3.y, -r3.x
mul r1.xyz, r2.w, r1
add_pp r2.w, r3.z, c15.z
mul_pp r3.x, r2.w, c2.w
mul_pp r1.w, r3.x, r1
mov r2.w, c9.x
mul_pp_sat r1.w, r1, c15
add r3.xyz, c2, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 150 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c17, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r5.xy, v6.zyzw, c11.x
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
add r0.w, r0, c17.y
mul r3.xy, v6, c7.x
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c17.z, c17
mul r1.xy, v6, c8.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v6.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v6.zxzw, c7.x
texld r2.xyz, r1, s2
mul r0.xy, v6.zxzw, c8.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c14.y, c14.z
mad r0.w, r0, r1.x, c14
mad r0.w, r0, r1.x, c15.x
mad r1.y, r0.w, r1.x, c15
mad r1.x, r1.y, r1, c15.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c9.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c15.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c13.w
cmp r3.z, v6, r3.w, r3
cmp r3.z, v6.x, r3, -r3
abs r3.w, v6.y
mul r1.xy, v6.zxzw, c11.x
mad r3.z, r3, c16.x, c16.y
add_pp r2.xyz, -r0, c12.y
mul_sat r0.w, r0, c13.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v6, c11.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c12.y
mad r0.y, r2.w, c12.z, c12.w
mad r0.y, r2.w, r0, c13.x
mad r0.y, r2.w, r0, c13
add r0.w, -r3, c12.y
mad r2.w, r3, c12.z, c12
mad r2.w, r2, r3, c13.x
mad r2.w, r2, r3, c13.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v6.z, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mul r0.x, r0, c14
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v6.y, c12.x, c12.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c13, r2.w
mad r0.y, r3.w, c13.w, r0.z
dsy r0.zw, v6.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c14.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c16.x
mul r7.x, r0, c16
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v5, -r4
mul_pp r6.xyz, v5, r2.w
mul_pp r2.xyz, r2, c5
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c13.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c6.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
rcp r1.z, v3.w
mad r3.xy, v3, r1.z, c16.y
texld r1.w, r3, s6
dp3_pp_sat r2.w, v5, r4
add_pp r3.y, r2.w, c12
frc_pp r3.x, r3.y
cmp r1.z, -v3, c12.x, c12.y
mul_pp r1.z, r1, r1.w
add_pp_sat r3.x, r3.y, -r3
mov_pp r3.z, r5.x
texldp r1.x, v4, s8
rcp r1.y, v4.w
mad r1.y, -v4.z, r1, r1.x
mov r1.x, c2
cmp r1.y, r1, c12, r1.x
dp3 r1.x, v3, v3
texld r1.x, r1.x, s7
mul_pp r1.x, r1.z, r1
mul_pp r1.w, r1.x, r1.y
mul r1.xyz, r1.w, c3
mul r1.xyz, r1, c4
mul r1.xyz, r1, r3.z
mul r1.xyz, r3.x, r1
add_pp r2.w, r2, c16.z
mul_pp r3.x, r2.w, c3.w
mul_pp r1.w, r3.x, r1
mov r2.w, c10.x
mul_pp_sat r1.w, r1, c16
add r3.xyz, c3, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c17.x
add_pp r1.w, -r1, c12.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 149 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c17, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r5.xy, v6.zyzw, c11.x
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
add r0.w, r0, c17.y
mul r3.xy, v6, c7.x
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c17.z, c17
mul r1.xy, v6, c8.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v6.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v6.zxzw, c7.x
texld r2.xyz, r1, s2
mul r0.xy, v6.zxzw, c8.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c14.y, c14.z
mad r0.w, r0, r1.x, c14
mad r0.w, r0, r1.x, c15.x
mad r1.y, r0.w, r1.x, c15
mad r1.x, r1.y, r1, c15.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c9.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c15.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c13.w
cmp r3.z, v6, r3.w, r3
cmp r3.z, v6.x, r3, -r3
abs r3.w, v6.y
mul r1.xy, v6.zxzw, c11.x
mad r3.z, r3, c16.x, c16.y
add_pp r2.xyz, -r0, c12.y
mul_sat r0.w, r0, c13.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v6, c11.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c12.y
mad r0.y, r2.w, c12.z, c12.w
mad r0.y, r2.w, r0, c13.x
mad r0.y, r2.w, r0, c13
add r0.w, -r3, c12.y
mad r2.w, r3, c12.z, c12
mad r2.w, r2, r3, c13.x
mad r2.w, r2, r3, c13.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v6.z, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mul r0.x, r0, c14
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v6.y, c12.x, c12.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c13, r2.w
mad r0.y, r3.w, c13.w, r0.z
dsy r0.zw, v6.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c14.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c16.x
mul r7.x, r0, c16
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v5, -r4
mul_pp r6.xyz, v5, r2.w
mul_pp r2.xyz, r2, c5
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c13.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c6.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
mov r1.x, c2
rcp r1.z, v3.w
mad r3.xy, v3, r1.z, c16.y
add r1.y, c12, -r1.x
texldp r1.x, v4, s8
mad r1.y, r1.x, r1, c2.x
dp3 r1.x, v3, v3
texld r1.w, r3, s6
dp3_pp_sat r2.w, v5, r4
add_pp r3.y, r2.w, c12
frc_pp r3.x, r3.y
cmp r1.z, -v3, c12.x, c12.y
mul_pp r1.z, r1, r1.w
texld r1.x, r1.x, s7
mul_pp r1.x, r1.z, r1
mul_pp r1.w, r1.x, r1.y
mul r1.xyz, r1.w, c3
add_pp_sat r3.x, r3.y, -r3
mov_pp r3.z, r5.x
mul r1.xyz, r1, c4
mul r1.xyz, r1, r3.z
mul r1.xyz, r3.x, r1
add_pp r2.w, r2, c16.z
mul_pp r3.x, r2.w, c3.w
mul_pp r1.w, r3.x, r1
mov r2.w, c10.x
mul_pp_sat r1.w, r1, c16
add r3.xyz, c3, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c17.x
add_pp r1.w, -r1, c12.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 139 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r5.xy, v5.zyzw, c10.x
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v5, c6.x
abs r2.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v5.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v5.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v5.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v5, r3.w, r3
cmp r3.z, v5.x, r3, -r3
abs r3.w, v5.y
mul r1.xy, v5.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v5, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v5.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v5.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v5.xyxy
dp4_pp r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq_pp r2.w, r2.w
mul_pp r4.xyz, r2.w, c1
dp3_pp r2.w, v4, -r4
mul_pp r6.xyz, v4, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
dp3_pp_sat r3.z, v4, r4
add_pp r3.y, r3.z, c11
mul_pp r0, r0, r1
texldp r3.x, v3, s6
mul r1.xyz, r3.x, c2
frc_pp r2.w, r3.y
mov_pp r1.w, r5.x
mul r1.xyz, r1, c3
mul r1.xyz, r1, r1.w
add_pp_sat r1.w, r3.y, -r2
mul r1.xyz, r1.w, r1
add_pp r1.w, r3.z, c15.z
mul_pp r2.w, r1, c2
mov r1.w, c9.x
mul_pp r2.w, r2, r3.x
add r3.xyz, c2, r1.w
mul_pp_sat r1.w, r2, c15
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 140 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r5.xy, v6.zyzw, c10.x
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v6, c6.x
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v6.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v6.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v6.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v6, r3.w, r3
cmp r3.z, v6.x, r3, -r3
abs r3.w, v6.y
mul r1.xy, v6.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v6, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v6.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v6.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v6.xyxy
dp4_pp r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq_pp r2.w, r2.w
mul_pp r4.xyz, r2.w, c1
dp3_pp r2.w, v5, -r4
mul_pp r6.xyz, v5, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
dp3_pp_sat r3.z, v5, r4
add_pp r3.y, r3.z, c11
frc_pp r3.x, r3.y
mov_pp r2.w, r5.x
texldp r1.x, v4, s6
texld r1.w, v3, s7
mul r1.w, r1, r1.x
mul r1.xyz, r1.w, c2
mul r1.xyz, r1, c3
mul r1.xyz, r1, r2.w
add_pp_sat r2.w, r3.y, -r3.x
mul r1.xyz, r2.w, r1
add_pp r2.w, r3.z, c15.z
mul_pp r3.x, r2.w, c2.w
mul_pp r1.w, r3.x, r1
mov r2.w, c9.x
mul_pp_sat r1.w, r1, c15
add r3.xyz, c2, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 148 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.03944778, 1.50000000, -0.94999999, 0
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c19.z
mul r2.xy, v6, c9.x
abs r6.zw, v6.xyxy
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c20.x, c20.y
mul r1.xy, v6, c8.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r2.xyz, r0, -r1
mad_pp r2.xyz, r6.z, r2, r1
max r0.x, r6.z, r2.w
rcp r0.y, r0.x
min r0.x, r6.z, r2.w
mul r1.w, r0.x, r0.y
mul r1.xy, v6.zxzw, c9.x
mul r0.xy, v6.zxzw, c8.x
mul r3.x, r1.w, r1.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r6.w, r0, r2
mad r0.w, r3.x, c15.y, c15.z
mad r0.w, r0, r3.x, c15
mad r0.w, r0, r3.x, c16.x
mad r0.w, r0, r3.x, c16.y
mad r0.w, r0, r3.x, c16.z
mul r3.y, r0.w, r1.w
mul r2.x, v0, c10
add_pp r1.xyz, -r0, c13.y
mul_sat r2.x, r2, c14.z
mad_pp r2.xyz, r2.x, r1, r0
mul r5.xy, v6, c12.x
mul r7.xy, v6.zyzw, c12.x
texld r1, r5, s5
texld r0, r7, s5
add_pp r0, r0, -r1
mad_pp r1, r6.z, r0, r1
add r3.z, -r3.y, c16.w
add r3.x, r6.z, -r2.w
cmp r3.x, -r3, r3.y, r3.z
add r0.x, -r3, c14.w
cmp r3.x, v6.z, r3, r0
mul r6.xy, v6.zxzw, c12.x
cmp r3.x, v6, r3, -r3
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r1, r6.w, r0, r1
add r0.y, -r2.w, c13
mad r0.x, r2.w, c13.z, c13.w
mad r0.x, r2.w, r0, c14
rsq r0.y, r0.y
mad r4.x, r3, c17, c17.y
abs r0.w, v6.y
mad r0.x, r2.w, r0, c14.y
add r3.x, -r0.w, c13.y
mad r2.w, r0, c13.z, c13
mad r2.w, r2, r0, c14.x
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c14, r0.y
rsq r3.x, r3.x
mad r0.w, r2, r0, c14.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v6.y, c13.x, c13.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c14.z, r2.w
mad r0.z, r0.x, c14.w, r0
mad r0.x, r0.w, c14.w, r0.y
mul r0.y, r0.z, c15.x
dsy r0.zw, v6.xyxy
mul r4.y, r0.x, c15.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0, r4, s3, r3.zwzw, r3
texldd r3, r4, s0, r3.zwzw, r3
mul_pp r1, r0, r1
mul_pp r4.xyz, r3, r2
mad_pp r1.xyz, -r3, r2, r1
mad_pp r1.xyz, r1.w, r1, r4
mul_pp r4.xyz, r1, c6
dp4 r1.w, c1, c1
rsq r1.x, r1.w
mul r3.xyz, r1.x, c1
texld r1, r5, s4
dp3_pp r4.w, v5, -r3
mul_pp r5.xyz, v5, r4.w
texld r2, r7, s4
add_pp r2, r2, -r1
mad_pp r1, r6.z, r2, r1
mad_pp r5.xyz, -r5, c14.z, -r3
texld r2, r6, s4
add_pp r2, r2, -r1
mad_pp r2, r6.w, r2, r1
mul_pp r2, r0, r2
dp3_pp_sat r4.w, r5, v1
pow_pp r1, r4.w, c7.x
dp3 r0.x, v4, v4
rsq r1.y, r0.x
texld r0, v4, s6
dp4 r0.y, r0, c18
rcp r1.y, r1.y
mul r0.x, r1.y, c2.w
dp3_pp_sat r1.y, v5, r3
add_pp r1.z, r1.y, c13.y
mad r0.y, -r0.x, c17.w, r0
mov r0.z, c3.x
dp3 r0.x, v3, v3
frc_pp r1.w, r1.z
cmp r0.y, r0, c13, r0.z
texld r0.x, r0.x, s7
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c4
mul r0.xyz, r0, c5
mul r0.xyz, r0, r1.x
add_pp_sat r1.x, r1.z, -r1.w
mul r0.xyz, r1.x, r0
add_pp r1.w, r1.y, c17.z
mul r1.xyz, r3.w, r0
mul_pp r0.x, r1.w, c4.w
mul_pp r0.w, r0.x, r0
mov r0.y, c11.x
mul_pp_sat r0.w, r0, c19.x
add r0.xyz, c4, r0.y
mad_sat r0.xyz, r0.w, r0, c0
add_pp r0.xyz, r0, r1
mad_pp r1.xyz, -r4, r0, r2
mul_pp_sat r0.w, r0, c19.y
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r2.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 150 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.03944778, 1.50000000, -0.94999999, 0
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r5.xy, v6.zyzw, c12.x
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c19.z
mul r3.xy, v6, c8.x
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c20.x, c20.y
mul r1.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v6.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v6.zxzw, c8.x
texld r2.xyz, r1, s2
mul r0.xy, v6.zxzw, c9.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c15.y, c15.z
mad r0.w, r0, r1.x, c15
mad r0.w, r0, r1.x, c16.x
mad r1.y, r0.w, r1.x, c16
mad r1.x, r1.y, r1, c16.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c10.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c16.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c14.w
cmp r3.z, v6, r3.w, r3
cmp r3.z, v6.x, r3, -r3
abs r3.w, v6.y
mul r1.xy, v6.zxzw, c12.x
mad r3.z, r3, c17.x, c17.y
add_pp r2.xyz, -r0, c13.y
mul_sat r0.w, r0, c14.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v6, c12.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c13.y
mad r0.y, r2.w, c13.z, c13.w
mad r0.y, r2.w, r0, c14.x
mad r0.y, r2.w, r0, c14
add r0.w, -r3, c13.y
mad r2.w, r3, c13.z, c13
mad r2.w, r2, r3, c14.x
mad r2.w, r2, r3, c14.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v6.z, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mul r0.x, r0, c15
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v6.y, c13.x, c13.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c14, r2.w
mad r0.y, r3.w, c14.w, r0.z
dsy r0.zw, v6.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c15.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c17.x
mul r7.x, r0, c17
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v5, -r4
mul_pp r6.xyz, v5, r2.w
mul_pp r2.xyz, r2, c6
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c14.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c7.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
texld r1, v4, s6
dp4 r1.y, r1, c18
dp3_pp_sat r3.z, v5, r4
dp3 r3.x, v4, v4
rsq r3.x, r3.x
rcp r1.z, r3.x
add_pp r3.y, r3.z, c13
mul r1.z, r1, c2.w
frc_pp r3.x, r3.y
mov_pp r2.w, r5.x
mov r1.x, c3
mad r1.y, -r1.z, c17.w, r1
cmp r1.y, r1, c13, r1.x
dp3 r1.x, v3, v3
texld r1.w, v3, s8
texld r1.x, r1.x, s7
mul r1.x, r1, r1.w
mul r1.w, r1.x, r1.y
mul r1.xyz, r1.w, c4
mul r1.xyz, r1, c5
mul r1.xyz, r1, r2.w
add_pp_sat r2.w, r3.y, -r3.x
mul r1.xyz, r2.w, r1
add_pp r2.w, r3.z, c17.z
mul_pp r3.x, r2.w, c4.w
mul_pp r1.w, r3.x, r1
mov r2.w, c11.x
mul_pp_sat r1.w, r1, c19.x
add r3.xyz, c4, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c19.y
add_pp r1.w, -r1, c13.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_SpecColor]
Vector 9 [_Color]
Float 10 [_Shininess]
Float 11 [_DetailScale]
Float 12 [_DetailVertScale]
Float 13 [_DetailDist]
Float 14 [_MinLight]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 158 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, -0.01000214, 0.25000000
def c21, 4.03944778, 1.50000000, -0.94999999, 0
def c22, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c12.x
mul r1.xy, v6.zyzw, c11.x
add r0.w, r0, c21.z
mul r2.xy, v6, c12.x
abs r5.zw, v6.xyxy
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c22.x, c22.y
mul r1.xy, v6, c11.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r2.xyz, r0, -r1
mad_pp r2.xyz, r5.z, r2, r1
max r0.x, r5.z, r2.w
rcp r0.y, r0.x
min r0.x, r5.z, r2.w
mul r1.w, r0.x, r0.y
mul r1.xy, v6.zxzw, c12.x
mul r0.xy, v6.zxzw, c11.x
mul r3.x, r1.w, r1.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r5.w, r0, r2
mad r0.w, r3.x, c18.y, c18.z
mad r0.w, r0, r3.x, c18
mad r0.w, r0, r3.x, c19.x
mad r0.w, r0, r3.x, c19.y
mad r0.w, r0, r3.x, c19.z
mul r3.y, r0.w, r1.w
mul r2.x, v0, c13
add_pp r1.xyz, -r0, c16.y
mul_sat r2.x, r2, c17.z
mad_pp r2.xyz, r2.x, r1, r0
mul r6.xy, v6, c15.x
mul r7.xy, v6.zyzw, c15.x
add r3.z, -r3.y, c19.w
add r3.x, r5.z, -r2.w
cmp r3.x, -r3, r3.y, r3.z
mul r5.xy, v6.zxzw, c15.x
texld r1, r6, s5
texld r0, r7, s5
add_pp r0, r0, -r1
mad_pp r1, r5.z, r0, r1
add r0.x, -r3, c17.w
cmp r3.x, v6.z, r3, r0
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r1, r5.w, r0, r1
cmp r3.x, v6, r3, -r3
add r0.y, -r2.w, c16
mad r0.x, r2.w, c16.z, c16.w
mad r0.x, r2.w, r0, c17
rsq r0.y, r0.y
mad r4.x, r3, c20, c20.y
abs r0.w, v6.y
mad r0.x, r2.w, r0, c17.y
add r3.x, -r0.w, c16.y
mad r2.w, r0, c16.z, c16
mad r2.w, r2, r0, c17.x
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c17, r0.y
rsq r3.x, r3.x
mad r0.w, r2, r0, c17.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v6.y, c16.x, c16.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c17.z, r2.w
mad r0.z, r0.x, c17.w, r0
mad r0.x, r0.w, c17.w, r0.y
mul r0.y, r0.z, c18.x
dsy r0.zw, v6.xyxy
mul r4.y, r0.x, c18.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c20.x
mul r3.x, r0.y, c20
texldd r0, r4, s3, r3.zwzw, r3
texldd r3, r4, s0, r3.zwzw, r3
mul_pp r1, r0, r1
mul_pp r4.xyz, r3, r2
mad_pp r1.xyz, -r3, r2, r1
mad_pp r1.xyz, r1.w, r1, r4
mul_pp r4.xyz, r1, c9
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul r3.xyz, r3.x, c1
texld r1, r6, s4
texld r2, r7, s4
add_pp r2, r2, -r1
mad_pp r2, r5.z, r2, r1
texld r1, r5, s4
add_pp r1, r1, -r2
mad_pp r1, r5.w, r1, r2
dp3_pp r4.w, v5, -r3
mul_pp r5.xyz, v5, r4.w
mad_pp r5.xyz, -r5, c17.z, -r3
rcp r2.w, v4.w
mul_pp r1, r0, r1
dp3_pp_sat r2.x, r5, v1
pow_pp r0, r2.x, c10.x
mad r2.xy, v4, r2.w, c6
mov_pp r2.z, r0.x
texld r0.x, r2, s8
mad r2.xy, v4, r2.w, c5
mov r0.w, r0.x
texld r0.x, r2, s8
mad r2.xy, v4, r2.w, c4
mov r0.z, r0.x
texld r0.x, r2, s8
mad r2.xy, v4, r2.w, c3
mov r0.y, r0.x
texld r0.x, r2, s8
mov r2.x, c2
mad r0, -v4.z, r2.w, r0
cmp r0, r0, c16.y, r2.x
dp4_pp r0.z, r0, c20.w
rcp r2.x, v3.w
mad r2.xy, v3, r2.x, c20.y
texld r0.w, r2, s6
dp3_pp_sat r2.x, v5, r3
add_pp r2.y, r2.x, c16
frc_pp r2.w, r2.y
add_pp_sat r2.y, r2, -r2.w
dp3 r0.x, v3, v3
cmp r0.y, -v3.z, c16.x, c16
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul r0.xyz, r0.w, c7
mul r0.xyz, r0, c8
mul r0.xyz, r0, r2.z
mul r0.xyz, r2.y, r0
add_pp r2.w, r2.x, c20.z
mul r2.xyz, r3.w, r0
mul_pp r0.x, r2.w, c7.w
mul_pp r0.w, r0.x, r0
mov r0.y, c14.x
mul_pp_sat r0.w, r0, c21.x
add r0.xyz, c7, r0.y
mad_sat r0.xyz, r0.w, r0, c0
add_pp r0.xyz, r0, r2
mul_pp_sat r0.w, r0, c21.y
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c16.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_SpecColor]
Vector 9 [_Color]
Float 10 [_Shininess]
Float 11 [_DetailScale]
Float 12 [_DetailVertScale]
Float 13 [_DetailDist]
Float 14 [_MinLight]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 157 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, -0.01000214, 0.25000000
def c21, 4.03944778, 1.50000000, -0.94999999, 0
def c22, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c12.x
mul r1.xy, v6.zyzw, c11.x
add r0.w, r0, c21.z
mul r2.xy, v6, c12.x
abs r4.zw, v6.xyxy
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c22.x, c22.y
mul r1.xy, v6, c11.x
mad r0.xyz, r0.w, r3, r0
mul r4.xy, v6.zxzw, c15.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r2.xyz, r0, -r1
mad_pp r2.xyz, r4.z, r2, r1
max r0.x, r4.z, r2.w
rcp r0.y, r0.x
min r0.x, r4.z, r2.w
mul r1.w, r0.x, r0.y
mul r1.xy, v6.zxzw, c12.x
mul r0.xy, v6.zxzw, c11.x
mul r3.x, r1.w, r1.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r4.w, r0, r2
mad r0.w, r3.x, c18.y, c18.z
mad r0.w, r0, r3.x, c18
mad r0.w, r0, r3.x, c19.x
mad r0.w, r0, r3.x, c19.y
mad r0.w, r0, r3.x, c19.z
mul r3.y, r0.w, r1.w
mul r2.x, v0, c13
add_pp r1.xyz, -r0, c16.y
mul_sat r2.x, r2, c17.z
mad_pp r2.xyz, r2.x, r1, r0
mul r7.xy, v6, c15.x
mul r6.xy, v6.zyzw, c15.x
add r3.z, -r3.y, c19.w
add r3.x, r4.z, -r2.w
cmp r3.x, -r3, r3.y, r3.z
texld r1, r7, s5
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r0.x, -r3, c17.w
cmp r3.x, v6.z, r3, r0
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r1, r4.w, r0, r1
cmp r3.x, v6, r3, -r3
add r0.y, -r2.w, c16
mad r0.x, r2.w, c16.z, c16.w
mad r0.x, r2.w, r0, c17
rsq r0.y, r0.y
mad r5.x, r3, c20, c20.y
abs r0.w, v6.y
mad r0.x, r2.w, r0, c17.y
add r3.x, -r0.w, c16.y
mad r2.w, r0, c16.z, c16
mad r2.w, r2, r0, c17.x
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c17, r0.y
rsq r3.x, r3.x
mad r0.w, r2, r0, c17.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v6.y, c16.x, c16.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c17.z, r2.w
mad r0.z, r0.x, c17.w, r0
mad r0.x, r0.w, c17.w, r0.y
mul r0.y, r0.z, c18.x
dsy r0.zw, v6.xyxy
mul r5.y, r0.x, c18.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c20.x
mul r3.x, r0.y, c20
texldd r0, r5, s3, r3.zwzw, r3
texldd r3, r5, s0, r3.zwzw, r3
mul_pp r1, r0, r1
mul_pp r5.xyz, r3, r2
mad_pp r1.xyz, -r3, r2, r1
mad_pp r3.xyz, r1.w, r1, r5
texld r2, r7, s4
texld r1, r6, s4
add_pp r1, r1, -r2
mad_pp r1, r4.z, r1, r2
texld r2, r4, s4
add_pp r2, r2, -r1
mad_pp r1, r4.w, r2, r1
rcp r4.x, v4.w
mul_pp r1, r0, r1
mad r2.xyz, v4, r4.x, c6
texld r0.x, r2, s8
mad r2.xyz, v4, r4.x, c5
mov_pp r0.w, r0.x
texld r0.x, r2, s8
mad r2.xyz, v4, r4.x, c4
mov_pp r0.z, r0.x
texld r0.x, r2, s8
mad r2.xyz, v4, r4.x, c3
mov_pp r0.y, r0.x
texld r0.x, r2, s8
mov r2.y, c2.x
add r2.y, c16, -r2
mad r0, r0, r2.y, c2.x
dp4_pp r0.z, r0, c20.w
rcp r0.x, v3.w
mad r5.xy, v3, r0.x, c20.y
dp4 r2.x, c1, c1
rsq r2.x, r2.x
mul r2.xyz, r2.x, c1
dp3_pp r0.y, v5, -r2
mul_pp r4.xyz, v5, r0.y
mad_pp r4.xyz, -r4, c17.z, -r2
dp3 r0.x, v3, v3
mul_pp r3.xyz, r3, c9
texld r0.w, r5, s6
cmp r0.y, -v3.z, c16.x, c16
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.y, r0
mul_pp r2.w, r0.x, r0.z
mul r0.xyz, r2.w, c7
dp3_pp_sat r4.w, r4, v1
mul r4.xyz, r0, c8
pow_pp r0, r4.w, c10.x
dp3_pp_sat r0.w, v5, r2
add_pp r2.x, r0.w, c16.y
frc_pp r2.y, r2.x
add_pp r0.w, r0, c20.z
mul_pp r0.w, r0, c7
mul_pp r0.w, r0, r2
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r4, r0.x
mul r0.xyz, r2.x, r0
mov r2.x, c14
mul_pp_sat r0.w, r0, c21.x
add r2.xyz, c7, r2.x
mad_sat r2.xyz, r0.w, r2, c0
mul r0.xyz, r3.w, r0
add_pp r0.xyz, r2, r0
mul_pp_sat r0.w, r0, c21.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c16.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 156 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 0.00781250
def c18, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 4.03944778, 1.50000000, -0.94999999, 0
def c21, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c20.z
mul r2.xy, v6, c9.x
abs r4.zw, v6.xyxy
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c21.x, c21.y
mul r1.xy, v6, c8.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r2.xyz, r0, -r1
mad_pp r2.xyz, r4.z, r2, r1
max r0.x, r4.z, r2.w
rcp r0.y, r0.x
min r0.x, r4.z, r2.w
mul r1.w, r0.x, r0.y
mul r1.xy, v6.zxzw, c9.x
mul r0.xy, v6.zxzw, c8.x
mul r3.x, r1.w, r1.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r4.w, r0, r2
mad r0.w, r3.x, c15.y, c15.z
mad r0.w, r0, r3.x, c15
mad r0.w, r0, r3.x, c16.x
mad r0.w, r0, r3.x, c16.y
mad r0.w, r0, r3.x, c16.z
mul r3.y, r0.w, r1.w
mul r2.x, v0, c10
add_pp r1.xyz, -r0, c13.y
mul_sat r2.x, r2, c14.z
mad_pp r2.xyz, r2.x, r1, r0
mul r7.xy, v6, c12.x
mul r6.xy, v6.zyzw, c12.x
add r3.z, -r3.y, c16.w
add r3.x, r4.z, -r2.w
cmp r3.x, -r3, r3.y, r3.z
mul r4.xy, v6.zxzw, c12.x
texld r1, r7, s5
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r0.x, -r3, c14.w
cmp r3.x, v6.z, r3, r0
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r1, r4.w, r0, r1
cmp r3.x, v6, r3, -r3
add r0.y, -r2.w, c13
mad r0.x, r2.w, c13.z, c13.w
mad r0.x, r2.w, r0, c14
rsq r0.y, r0.y
mad r5.x, r3, c17, c17.y
abs r0.w, v6.y
mad r0.x, r2.w, r0, c14.y
add r3.x, -r0.w, c13.y
mad r2.w, r0, c13.z, c13
mad r2.w, r2, r0, c14.x
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c14, r0.y
rsq r3.x, r3.x
mad r0.w, r2, r0, c14.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v6.y, c13.x, c13.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c14.z, r2.w
mad r0.z, r0.x, c14.w, r0
mad r0.x, r0.w, c14.w, r0.y
mul r0.y, r0.z, c15.x
dsy r0.zw, v6.xyxy
mul r5.y, r0.x, c15.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0, r5, s3, r3.zwzw, r3
texldd r3, r5, s0, r3.zwzw, r3
mul_pp r1, r0, r1
mad_pp r1.xyz, -r3, r2, r1
mul_pp r5.xyz, r3, r2
mad_pp r3.xyz, r1.w, r1, r5
texld r2, r7, s4
texld r1, r6, s4
add_pp r1, r1, -r2
mad_pp r1, r4.z, r1, r2
texld r2, r4, s4
add_pp r2, r2, -r1
mad_pp r1, r4.w, r2, r1
mul_pp r1, r0, r1
add r4.xyz, v4, c18.xyyw
texld r2, r4, s6
dp4 r4.w, r2, c19
add r0.xyz, v4, c18.yxyw
texld r0, r0, s6
dp4 r4.z, r0, c19
add r2.xyz, v4, c18.yyxw
texld r2, r2, s6
dp4 r4.y, r2, c19
dp3 r0.w, v4, v4
rsq r2.x, r0.w
add r0.xyz, v4, c17.w
texld r0, r0, s6
dp4 r4.x, r0, c19
rcp r2.x, r2.x
mul r0.x, r2, c2.w
dp4 r2.x, c1, c1
mad r0, -r0.x, c18.z, r4
mov r2.y, c3.x
cmp r0, r0, c13.y, r2.y
dp4_pp r0.y, r0, c18.w
rsq r2.x, r2.x
mul r2.xyz, r2.x, c1
dp3_pp r0.z, v5, -r2
mul_pp r4.xyz, v5, r0.z
mad_pp r4.xyz, -r4, c14.z, -r2
dp3 r0.x, v3, v3
texld r0.x, r0.x, s7
mul r2.w, r0.x, r0.y
mul_pp r3.xyz, r3, c6
mul r0.xyz, r2.w, c4
dp3_pp_sat r4.w, r4, v1
mul r4.xyz, r0, c5
pow_pp r0, r4.w, c7.x
dp3_pp_sat r0.w, v5, r2
add_pp r2.x, r0.w, c13.y
frc_pp r2.y, r2.x
add_pp r0.w, r0, c17.z
mul_pp r0.w, r0, c4
mul_pp r0.w, r0, r2
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r4, r0.x
mul r0.xyz, r2.x, r0
mov r2.x, c11
mul_pp_sat r0.w, r0, c20.x
add r2.xyz, c4, r2.x
mad_sat r2.xyz, r0.w, r2, c0
mul r0.xyz, r3.w, r0
add_pp r0.xyz, r2, r0
mul_pp_sat r0.w, r0, c20.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 157 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 0.00781250
def c18, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 4.03944778, 1.50000000, -0.94999999, 0
def c21, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c20.z
mul r2.xy, v6, c9.x
abs r4.zw, v6.xyxy
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c21.x, c21.y
mul r1.xy, v6, c8.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r2.xyz, r0, -r1
mad_pp r2.xyz, r4.z, r2, r1
max r0.x, r4.z, r2.w
rcp r0.y, r0.x
min r0.x, r4.z, r2.w
mul r1.w, r0.x, r0.y
mul r1.xy, v6.zxzw, c9.x
mul r0.xy, v6.zxzw, c8.x
mul r3.x, r1.w, r1.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r4.w, r0, r2
mad r0.w, r3.x, c15.y, c15.z
mad r0.w, r0, r3.x, c15
mad r0.w, r0, r3.x, c16.x
mad r0.w, r0, r3.x, c16.y
mad r0.w, r0, r3.x, c16.z
mul r3.y, r0.w, r1.w
mul r2.x, v0, c10
add_pp r1.xyz, -r0, c13.y
mul_sat r2.x, r2, c14.z
mad_pp r2.xyz, r2.x, r1, r0
mul r7.xy, v6, c12.x
mul r6.xy, v6.zyzw, c12.x
add r3.z, -r3.y, c16.w
add r3.x, r4.z, -r2.w
cmp r3.x, -r3, r3.y, r3.z
mul r4.xy, v6.zxzw, c12.x
texld r1, r7, s5
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r0.x, -r3, c14.w
cmp r3.x, v6.z, r3, r0
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r1, r4.w, r0, r1
cmp r3.x, v6, r3, -r3
add r0.y, -r2.w, c13
mad r0.x, r2.w, c13.z, c13.w
mad r0.x, r2.w, r0, c14
rsq r0.y, r0.y
mad r5.x, r3, c17, c17.y
abs r0.w, v6.y
mad r0.x, r2.w, r0, c14.y
add r3.x, -r0.w, c13.y
mad r2.w, r0, c13.z, c13
mad r2.w, r2, r0, c14.x
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c14, r0.y
rsq r3.x, r3.x
mad r0.w, r2, r0, c14.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v6.y, c13.x, c13.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c14.z, r2.w
mad r0.z, r0.x, c14.w, r0
mad r0.x, r0.w, c14.w, r0.y
mul r0.y, r0.z, c15.x
dsy r0.zw, v6.xyxy
mul r5.y, r0.x, c15.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0, r5, s3, r3.zwzw, r3
texldd r3, r5, s0, r3.zwzw, r3
mul_pp r1, r0, r1
mad_pp r1.xyz, -r3, r2, r1
mul_pp r5.xyz, r3, r2
mad_pp r3.xyz, r1.w, r1, r5
texld r2, r7, s4
texld r1, r6, s4
add_pp r1, r1, -r2
mad_pp r1, r4.z, r1, r2
texld r2, r4, s4
add_pp r2, r2, -r1
mad_pp r1, r4.w, r2, r1
mul_pp r1, r0, r1
add r4.xyz, v4, c18.xyyw
texld r2, r4, s6
dp4 r4.w, r2, c19
add r0.xyz, v4, c18.yxyw
texld r0, r0, s6
dp4 r4.z, r0, c19
add r2.xyz, v4, c18.yyxw
texld r2, r2, s6
dp4 r4.y, r2, c19
add r0.xyz, v4, c17.w
texld r0, r0, s6
dp3 r2.x, v4, v4
dp4 r4.x, r0, c19
rsq r2.x, r2.x
rcp r0.x, r2.x
dp4 r2.x, c1, c1
mul r0.x, r0, c2.w
rsq r2.x, r2.x
mul r2.xyz, r2.x, c1
mad r0, -r0.x, c18.z, r4
mov r2.w, c3.x
cmp r0, r0, c13.y, r2.w
dp4_pp r0.y, r0, c18.w
dp3_pp r2.w, v5, -r2
mul_pp r4.xyz, v5, r2.w
mad_pp r4.xyz, -r4, c14.z, -r2
dp3 r0.x, v3, v3
mul_pp r3.xyz, r3, c6
texld r0.w, v3, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r2.w, r0.x, r0.y
mul r0.xyz, r2.w, c4
dp3_pp_sat r4.w, r4, v1
mul r4.xyz, r0, c5
pow_pp r0, r4.w, c7.x
dp3_pp_sat r0.w, v5, r2
add_pp r2.x, r0.w, c13.y
frc_pp r2.y, r2.x
add_pp r0.w, r0, c17.z
mul_pp r0.w, r0, c4
mul_pp r0.w, r0, r2
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r4, r0.x
mul r0.xyz, r2.x, r0
mov r2.x, c11
mul_pp_sat r0.w, r0, c20.x
add r2.xyz, c4, r2.x
mad_sat r2.xyz, r0.w, r2, c0
mul r0.xyz, r3.w, r0
add_pp r0.xyz, r2, r0
mul_pp_sat r0.w, r0, c20.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_OFF" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 140 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r5.xy, v5.zyzw, c10.x
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v5, c6.x
abs r2.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v5.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v5.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v5.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v5, r3.w, r3
cmp r3.z, v5.x, r3, -r3
abs r3.w, v5.y
mul r1.xy, v5.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v5, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v5.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v5.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v5.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v4, -r4
mul_pp r6.xyz, v4, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
dp3_pp_sat r2.w, v4, r4
add_pp r1.w, r2, c11.y
dp3 r1.x, v3, v3
texld r1.x, r1.x, s6
mul r3.xyz, r1.x, c2
frc_pp r1.z, r1.w
mov_pp r1.y, r5.x
mul r3.xyz, r3, c3
mul r3.xyz, r3, r1.y
add_pp_sat r1.y, r1.w, -r1.z
mul r3.xyz, r1.y, r3
add_pp r1.y, r2.w, c15.z
mul_pp r1.z, r1.y, c2.w
mul_pp r1.w, r1.z, r1.x
mov r1.y, c9.x
mul_pp_sat r1.w, r1, c15
add r1.xyz, c2, r1.y
mad_sat r1.xyz, r1.w, r1, c0
mul r3.xyz, r4.w, r3
add_pp r1.xyz, r1, r3
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
"ps_3_0
; 138 ALU, 18 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord5 v3.xyz
dcl_texcoord6 v4.xyz
mov r0.xyz, v4
dp3_sat r0.w, v2, -r0
mul r5.xy, v4.zyzw, c10.x
mul r0.xy, v4.zyzw, c7.x
mul r1.xy, v4.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v4, c6.x
abs r2.w, v4.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v4, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v4.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v4.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v4.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v4, r3.w, r3
cmp r3.z, v4.x, r3, -r3
abs r3.w, v4.y
mul r1.xy, v4.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v4, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v4.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v4.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v4.xyxy
dp4_pp r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v4
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq_pp r2.w, r2.w
mul_pp r4.xyz, r2.w, c1
dp3_pp r2.w, v3, -r4
mul_pp r6.xyz, v3, r2.w
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r2.w, v3, r4
add_pp r4.y, r2.w, c11
add_pp r2.w, r2, c15.z
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
mov r3.xyz, c2
mov_pp r3.w, r5.x
mul r3.xyz, c3, r3
mul r3.xyz, r3, r3.w
frc_pp r4.x, r4.y
add_pp_sat r3.w, r4.y, -r4.x
mul r3.xyz, r3.w, r3
mul r1.xyz, r4.w, r3
mov r1.w, c9.x
add r3.xyz, c2, r1.w
mul_pp r2.w, r2, c2
mul_pp_sat r1.w, r2, c15
mad_sat r3.xyz, r1.w, r3, c0
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
"ps_3_0
; 145 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r5.xy, v5.zyzw, c10.x
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v5, c6.x
abs r2.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v5.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v5.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v5.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v5, r3.w, r3
cmp r3.z, v5.x, r3, -r3
abs r3.w, v5.y
mul r1.xy, v5.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v5, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v5.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v5.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v5.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v4, -r4
mul_pp r6.xyz, v4, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
rcp r1.x, v3.w
mad r3.xy, v3, r1.x, c15.y
dp3 r1.x, v3, v3
texld r1.w, r3, s6
dp3_pp_sat r2.w, v4, r4
add_pp r3.y, r2.w, c11
frc_pp r3.x, r3.y
cmp r1.y, -v3.z, c11.x, c11
mul_pp r1.y, r1, r1.w
texld r1.x, r1.x, s7
mul_pp r1.w, r1.y, r1.x
mul r1.xyz, r1.w, c2
add_pp_sat r3.x, r3.y, -r3
mov_pp r3.z, r5.x
mul r1.xyz, r1, c3
mul r1.xyz, r1, r3.z
mul r1.xyz, r3.x, r1
add_pp r2.w, r2, c15.z
mul_pp r3.x, r2.w, c2.w
mul_pp r1.w, r3.x, r1
mov r2.w, c9.x
mul_pp_sat r1.w, r1, c15
add r3.xyz, c2, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTextureB0] 2D
SetTexture 7 [_LightTexture0] CUBE
"ps_3_0
; 141 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_cube s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r5.xy, v5.zyzw, c10.x
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v5, c6.x
abs r2.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v5.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v5.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v5.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v5, r3.w, r3
cmp r3.z, v5.x, r3, -r3
abs r3.w, v5.y
mul r1.xy, v5.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v5, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v5.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v5.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v5.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v4, -r4
mul_pp r6.xyz, v4, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
dp3_pp_sat r2.w, v4, r4
add_pp r3.z, r2.w, c11.y
dp3 r1.x, v3, v3
mov_pp r3.x, r5
texld r1.x, r1.x, s6
texld r1.w, v3, s7
mul r1.w, r1.x, r1
mul r1.xyz, r1.w, c2
mul r1.xyz, r1, c3
mul r1.xyz, r1, r3.x
frc_pp r3.y, r3.z
add_pp_sat r3.x, r3.z, -r3.y
mul r1.xyz, r3.x, r1
add_pp r2.w, r2, c15.z
mul_pp r3.x, r2.w, c2.w
mul_pp r1.w, r3.x, r1
mov r2.w, c9.x
mul_pp_sat r1.w, r1, c15
add r3.xyz, c2, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
"ps_3_0
; 139 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r5.xy, v5.zyzw, c10.x
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v5, c6.x
abs r2.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v5.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v5.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v5.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v5, r3.w, r3
cmp r3.z, v5.x, r3, -r3
abs r3.w, v5.y
mul r1.xy, v5.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v5, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v5.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v5.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v5.xyxy
dp4_pp r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq_pp r2.w, r2.w
mul_pp r4.xyz, r2.w, c1
dp3_pp r2.w, v4, -r4
mul_pp r6.xyz, v4, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
dp3_pp_sat r3.z, v4, r4
add_pp r3.y, r3.z, c11
texld r1.w, v3, s6
mul r1.xyz, r1.w, c2
frc_pp r3.x, r3.y
mov_pp r2.w, r5.x
mul r1.xyz, r1, c3
mul r1.xyz, r1, r2.w
add_pp_sat r2.w, r3.y, -r3.x
mul r1.xyz, r2.w, r1
add_pp r2.w, r3.z, c15.z
mul_pp r3.x, r2.w, c2.w
mul_pp r1.w, r3.x, r1
mov r2.w, c9.x
mul_pp_sat r1.w, r1, c15
add r3.xyz, c2, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_OFF" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 150 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c17, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r5.xy, v6.zyzw, c11.x
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
add r0.w, r0, c17.y
mul r3.xy, v6, c7.x
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c17.z, c17
mul r1.xy, v6, c8.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v6.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v6.zxzw, c7.x
texld r2.xyz, r1, s2
mul r0.xy, v6.zxzw, c8.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c14.y, c14.z
mad r0.w, r0, r1.x, c14
mad r0.w, r0, r1.x, c15.x
mad r1.y, r0.w, r1.x, c15
mad r1.x, r1.y, r1, c15.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c9.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c15.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c13.w
cmp r3.z, v6, r3.w, r3
cmp r3.z, v6.x, r3, -r3
abs r3.w, v6.y
mul r1.xy, v6.zxzw, c11.x
mad r3.z, r3, c16.x, c16.y
add_pp r2.xyz, -r0, c12.y
mul_sat r0.w, r0, c13.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v6, c11.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c12.y
mad r0.y, r2.w, c12.z, c12.w
mad r0.y, r2.w, r0, c13.x
mad r0.y, r2.w, r0, c13
add r0.w, -r3, c12.y
mad r2.w, r3, c12.z, c12
mad r2.w, r2, r3, c13.x
mad r2.w, r2, r3, c13.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v6.z, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mul r0.x, r0, c14
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v6.y, c12.x, c12.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c13, r2.w
mad r0.y, r3.w, c13.w, r0.z
dsy r0.zw, v6.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c14.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c16.x
mul r7.x, r0, c16
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v5, -r4
mul_pp r6.xyz, v5, r2.w
mul_pp r2.xyz, r2, c5
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c13.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c6.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
rcp r1.z, v3.w
mad r3.xy, v3, r1.z, c16.y
texld r1.w, r3, s6
dp3_pp_sat r2.w, v5, r4
add_pp r3.y, r2.w, c12
frc_pp r3.x, r3.y
cmp r1.z, -v3, c12.x, c12.y
mul_pp r1.z, r1, r1.w
add_pp_sat r3.x, r3.y, -r3
mov_pp r3.z, r5.x
texldp r1.x, v4, s8
rcp r1.y, v4.w
mad r1.y, -v4.z, r1, r1.x
mov r1.x, c2
cmp r1.y, r1, c12, r1.x
dp3 r1.x, v3, v3
texld r1.x, r1.x, s7
mul_pp r1.x, r1.z, r1
mul_pp r1.w, r1.x, r1.y
mul r1.xyz, r1.w, c3
mul r1.xyz, r1, c4
mul r1.xyz, r1, r3.z
mul r1.xyz, r3.x, r1
add_pp r2.w, r2, c16.z
mul_pp r3.x, r2.w, c3.w
mul_pp r1.w, r3.x, r1
mov r2.w, c10.x
mul_pp_sat r1.w, r1, c16
add r3.xyz, c3, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c17.x
add_pp r1.w, -r1, c12.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_LightColor0]
Vector 4 [_SpecColor]
Vector 5 [_Color]
Float 6 [_Shininess]
Float 7 [_DetailScale]
Float 8 [_DetailVertScale]
Float 9 [_DetailDist]
Float 10 [_MinLight]
Float 11 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 149 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c12, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c13, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c14, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c15, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c16, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c17, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r5.xy, v6.zyzw, c11.x
mul r0.xy, v6.zyzw, c8.x
mul r1.xy, v6.zyzw, c7.x
add r0.w, r0, c17.y
mul r3.xy, v6, c7.x
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c17.z, c17
mul r1.xy, v6, c8.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v6.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v6.zxzw, c7.x
texld r2.xyz, r1, s2
mul r0.xy, v6.zxzw, c8.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c14.y, c14.z
mad r0.w, r0, r1.x, c14
mad r0.w, r0, r1.x, c15.x
mad r1.y, r0.w, r1.x, c15
mad r1.x, r1.y, r1, c15.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c9.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c15.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c13.w
cmp r3.z, v6, r3.w, r3
cmp r3.z, v6.x, r3, -r3
abs r3.w, v6.y
mul r1.xy, v6.zxzw, c11.x
mad r3.z, r3, c16.x, c16.y
add_pp r2.xyz, -r0, c12.y
mul_sat r0.w, r0, c13.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v6, c11.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c12.y
mad r0.y, r2.w, c12.z, c12.w
mad r0.y, r2.w, r0, c13.x
mad r0.y, r2.w, r0, c13
add r0.w, -r3, c12.y
mad r2.w, r3, c12.z, c12
mad r2.w, r2, r3, c13.x
mad r2.w, r2, r3, c13.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v6.z, c12, c12.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c13.z, r0
mad r0.x, r0, c13.w, r0.y
mul r0.x, r0, c14
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v6.y, c12.x, c12.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c13, r2.w
mad r0.y, r3.w, c13.w, r0.z
dsy r0.zw, v6.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c14.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c16.x
mul r7.x, r0, c16
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v5, -r4
mul_pp r6.xyz, v5, r2.w
mul_pp r2.xyz, r2, c5
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c13.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c6.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
mov r1.x, c2
rcp r1.z, v3.w
mad r3.xy, v3, r1.z, c16.y
add r1.y, c12, -r1.x
texldp r1.x, v4, s8
mad r1.y, r1.x, r1, c2.x
dp3 r1.x, v3, v3
texld r1.w, r3, s6
dp3_pp_sat r2.w, v5, r4
add_pp r3.y, r2.w, c12
frc_pp r3.x, r3.y
cmp r1.z, -v3, c12.x, c12.y
mul_pp r1.z, r1, r1.w
texld r1.x, r1.x, s7
mul_pp r1.x, r1.z, r1
mul_pp r1.w, r1.x, r1.y
mul r1.xyz, r1.w, c3
add_pp_sat r3.x, r3.y, -r3
mov_pp r3.z, r5.x
mul r1.xyz, r1, c4
mul r1.xyz, r1, r3.z
mul r1.xyz, r3.x, r1
add_pp r2.w, r2, c16.z
mul_pp r3.x, r2.w, c3.w
mul_pp r1.w, r3.x, r1
mov r2.w, c10.x
mul_pp_sat r1.w, r1, c16
add r3.xyz, c3, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c17.x
add_pp r1.w, -r1, c12.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c12.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
"ps_3_0
; 139 ALU, 19 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord5 v4.xyz
dcl_texcoord6 v5.xyz
mov r0.xyz, v5
dp3_sat r0.w, v2, -r0
mul r5.xy, v5.zyzw, c10.x
mul r0.xy, v5.zyzw, c7.x
mul r1.xy, v5.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v5, c6.x
abs r2.w, v5.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v5, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v5.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v5.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v5.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v5, r3.w, r3
cmp r3.z, v5.x, r3, -r3
abs r3.w, v5.y
mul r1.xy, v5.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v5, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v5.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v5.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v5.xyxy
dp4_pp r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v5
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq_pp r2.w, r2.w
mul_pp r4.xyz, r2.w, c1
dp3_pp r2.w, v4, -r4
mul_pp r6.xyz, v4, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
dp3_pp_sat r3.z, v4, r4
add_pp r3.y, r3.z, c11
mul_pp r0, r0, r1
texldp r3.x, v3, s6
mul r1.xyz, r3.x, c2
frc_pp r2.w, r3.y
mov_pp r1.w, r5.x
mul r1.xyz, r1, c3
mul r1.xyz, r1, r1.w
add_pp_sat r1.w, r3.y, -r2
mul r1.xyz, r1.w, r1
add_pp r1.w, r3.z, c15.z
mul_pp r2.w, r1, c2
mov r1.w, c9.x
mul_pp r2.w, r2, r3.x
add r3.xyz, c2, r1.w
mul_pp_sat r1.w, r2, c15
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightColor0]
Vector 3 [_SpecColor]
Vector 4 [_Color]
Float 5 [_Shininess]
Float 6 [_DetailScale]
Float 7 [_DetailVertScale]
Float 8 [_DetailDist]
Float 9 [_MinLight]
Float 10 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] 2D
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 140 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
def c11, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c12, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c13, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c14, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c15, 0.15915494, 0.50000000, -0.01000214, 4.03944778
def c16, 1.50000000, -0.94999999, 32.00000000, 0.50000000
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xy
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r5.xy, v6.zyzw, c10.x
mul r0.xy, v6.zyzw, c7.x
mul r1.xy, v6.zyzw, c6.x
add r0.w, r0, c16.y
mul r3.xy, v6, c6.x
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c16.z, c16
mul r1.xy, v6, c7.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v6.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v6.zxzw, c6.x
texld r2.xyz, r1, s2
mul r0.xy, v6.zxzw, c7.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c13.y, c13.z
mad r0.w, r0, r1.x, c13
mad r0.w, r0, r1.x, c14.x
mad r1.y, r0.w, r1.x, c14
mad r1.x, r1.y, r1, c14.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c8.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c14.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c12.w
cmp r3.z, v6, r3.w, r3
cmp r3.z, v6.x, r3, -r3
abs r3.w, v6.y
mul r1.xy, v6.zxzw, c10.x
mad r3.z, r3, c15.x, c15.y
add_pp r2.xyz, -r0, c11.y
mul_sat r0.w, r0, c12.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v6, c10.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c11.y
mad r0.y, r2.w, c11.z, c11.w
mad r0.y, r2.w, r0, c12.x
mad r0.y, r2.w, r0, c12
add r0.w, -r3, c11.y
mad r2.w, r3, c11.z, c11
mad r2.w, r2, r3, c12.x
mad r2.w, r2, r3, c12.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v6.z, c11, c11.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c12.z, r0
mad r0.x, r0, c12.w, r0.y
mul r0.x, r0, c13
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v6.y, c11.x, c11.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c12, r2.w
mad r0.y, r3.w, c12.w, r0.z
dsy r0.zw, v6.xyxy
dp4_pp r2.w, c1, c1
mul r3.w, r0.y, c13.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c15.x
mul r7.x, r0, c15
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq_pp r2.w, r2.w
mul_pp r4.xyz, r2.w, c1
dp3_pp r2.w, v5, -r4
mul_pp r6.xyz, v5, r2.w
mul_pp r2.xyz, r2, c4
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c12.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c5.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
dp3_pp_sat r3.z, v5, r4
add_pp r3.y, r3.z, c11
frc_pp r3.x, r3.y
mov_pp r2.w, r5.x
texldp r1.x, v4, s6
texld r1.w, v3, s7
mul r1.w, r1, r1.x
mul r1.xyz, r1.w, c2
mul r1.xyz, r1, c3
mul r1.xyz, r1, r2.w
add_pp_sat r2.w, r3.y, -r3.x
mul r1.xyz, r2.w, r1
add_pp r2.w, r3.z, c15.z
mul_pp r3.x, r2.w, c2.w
mul_pp r1.w, r3.x, r1
mov r2.w, c9.x
mul_pp_sat r1.w, r1, c15
add r3.xyz, c2, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c16.x
add_pp r1.w, -r1, c11.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c11.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "DIRECTIONAL_COOKIE" "SHADOWS_SCREEN" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 148 ALU, 20 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.03944778, 1.50000000, -0.94999999, 0
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c19.z
mul r2.xy, v6, c9.x
abs r6.zw, v6.xyxy
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c20.x, c20.y
mul r1.xy, v6, c8.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r2.xyz, r0, -r1
mad_pp r2.xyz, r6.z, r2, r1
max r0.x, r6.z, r2.w
rcp r0.y, r0.x
min r0.x, r6.z, r2.w
mul r1.w, r0.x, r0.y
mul r1.xy, v6.zxzw, c9.x
mul r0.xy, v6.zxzw, c8.x
mul r3.x, r1.w, r1.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r6.w, r0, r2
mad r0.w, r3.x, c15.y, c15.z
mad r0.w, r0, r3.x, c15
mad r0.w, r0, r3.x, c16.x
mad r0.w, r0, r3.x, c16.y
mad r0.w, r0, r3.x, c16.z
mul r3.y, r0.w, r1.w
mul r2.x, v0, c10
add_pp r1.xyz, -r0, c13.y
mul_sat r2.x, r2, c14.z
mad_pp r2.xyz, r2.x, r1, r0
mul r5.xy, v6, c12.x
mul r7.xy, v6.zyzw, c12.x
texld r1, r5, s5
texld r0, r7, s5
add_pp r0, r0, -r1
mad_pp r1, r6.z, r0, r1
add r3.z, -r3.y, c16.w
add r3.x, r6.z, -r2.w
cmp r3.x, -r3, r3.y, r3.z
add r0.x, -r3, c14.w
cmp r3.x, v6.z, r3, r0
mul r6.xy, v6.zxzw, c12.x
cmp r3.x, v6, r3, -r3
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r1, r6.w, r0, r1
add r0.y, -r2.w, c13
mad r0.x, r2.w, c13.z, c13.w
mad r0.x, r2.w, r0, c14
rsq r0.y, r0.y
mad r4.x, r3, c17, c17.y
abs r0.w, v6.y
mad r0.x, r2.w, r0, c14.y
add r3.x, -r0.w, c13.y
mad r2.w, r0, c13.z, c13
mad r2.w, r2, r0, c14.x
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c14, r0.y
rsq r3.x, r3.x
mad r0.w, r2, r0, c14.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v6.y, c13.x, c13.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c14.z, r2.w
mad r0.z, r0.x, c14.w, r0
mad r0.x, r0.w, c14.w, r0.y
mul r0.y, r0.z, c15.x
dsy r0.zw, v6.xyxy
mul r4.y, r0.x, c15.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0, r4, s3, r3.zwzw, r3
texldd r3, r4, s0, r3.zwzw, r3
mul_pp r1, r0, r1
mul_pp r4.xyz, r3, r2
mad_pp r1.xyz, -r3, r2, r1
mad_pp r1.xyz, r1.w, r1, r4
mul_pp r4.xyz, r1, c6
dp4 r1.w, c1, c1
rsq r1.x, r1.w
mul r3.xyz, r1.x, c1
texld r1, r5, s4
dp3_pp r4.w, v5, -r3
mul_pp r5.xyz, v5, r4.w
texld r2, r7, s4
add_pp r2, r2, -r1
mad_pp r1, r6.z, r2, r1
mad_pp r5.xyz, -r5, c14.z, -r3
texld r2, r6, s4
add_pp r2, r2, -r1
mad_pp r2, r6.w, r2, r1
mul_pp r2, r0, r2
dp3_pp_sat r4.w, r5, v1
pow_pp r1, r4.w, c7.x
dp3 r0.x, v4, v4
rsq r1.y, r0.x
texld r0, v4, s6
dp4 r0.y, r0, c18
rcp r1.y, r1.y
mul r0.x, r1.y, c2.w
dp3_pp_sat r1.y, v5, r3
add_pp r1.z, r1.y, c13.y
mad r0.y, -r0.x, c17.w, r0
mov r0.z, c3.x
dp3 r0.x, v3, v3
frc_pp r1.w, r1.z
cmp r0.y, r0, c13, r0.z
texld r0.x, r0.x, s7
mul r0.w, r0.x, r0.y
mul r0.xyz, r0.w, c4
mul r0.xyz, r0, c5
mul r0.xyz, r0, r1.x
add_pp_sat r1.x, r1.z, -r1.w
mul r0.xyz, r1.x, r0
add_pp r1.w, r1.y, c17.z
mul r1.xyz, r3.w, r0
mul_pp r0.x, r1.w, c4.w
mul_pp r0.w, r0.x, r0
mov r0.y, c11.x
mul_pp_sat r0.w, r0, c19.x
add r0.xyz, c4, r0.y
mad_sat r0.xyz, r0.w, r0, c0
add_pp r0.xyz, r0, r1
mad_pp r1.xyz, -r4, r0, r2
mul_pp_sat r0.w, r0, c19.y
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r2.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 150 ALU, 21 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 0.97000003
def c18, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c19, 4.03944778, 1.50000000, -0.94999999, 0
def c20, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r5.xy, v6.zyzw, c12.x
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c19.z
mul r3.xy, v6, c8.x
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r2.xyz, r1, -r0
mad_sat r0.w, r0, c20.x, c20.y
mul r1.xy, v6, c9.x
texld r1.xyz, r1, s1
texld r3.xyz, r3, s2
add r3.xyz, r3, -r1
mad r3.xyz, r0.w, r3, r1
abs r1.zw, v6.xyxy
mad r0.xyz, r0.w, r2, r0
add_pp r0.xyz, r0, -r3
mad_pp r3.xyz, r1.z, r0, r3
max r1.x, r1.z, r2.w
rcp r0.x, r1.x
min r0.y, r1.z, r2.w
mul r3.w, r0.y, r0.x
mul r1.xy, v6.zxzw, c8.x
texld r2.xyz, r1, s2
mul r0.xy, v6.zxzw, c9.x
texld r0.xyz, r0, s1
add r2.xyz, r2, -r0
mad r0.xyz, r0.w, r2, r0
mul r1.x, r3.w, r3.w
add_pp r0.xyz, r0, -r3
mad_pp r0.xyz, r1.w, r0, r3
mad r0.w, r1.x, c15.y, c15.z
mad r0.w, r0, r1.x, c15
mad r0.w, r0, r1.x, c16.x
mad r1.y, r0.w, r1.x, c16
mad r1.x, r1.y, r1, c16.z
mul r1.y, r1.x, r3.w
mul r0.w, v0.x, c10.x
add r3.z, r1, -r2.w
add r1.x, -r1.y, c16.w
cmp r3.w, -r3.z, r1.y, r1.x
add r3.z, -r3.w, c14.w
cmp r3.z, v6, r3.w, r3
cmp r3.z, v6.x, r3, -r3
abs r3.w, v6.y
mul r1.xy, v6.zxzw, c12.x
mad r3.z, r3, c17.x, c17.y
add_pp r2.xyz, -r0, c13.y
mul_sat r0.w, r0, c14.z
mad_pp r2.xyz, r0.w, r2, r0
mul r3.xy, v6, c12.x
texld r0, r3, s5
texld r4, r5, s5
add_pp r4, r4, -r0
mad_pp r0, r1.z, r4, r0
texld r4, r1, s5
add_pp r4, r4, -r0
mad_pp r4, r1.w, r4, r0
add r0.x, -r2.w, c13.y
mad r0.y, r2.w, c13.z, c13.w
mad r0.y, r2.w, r0, c14.x
mad r0.y, r2.w, r0, c14
add r0.w, -r3, c13.y
mad r2.w, r3, c13.z, c13
mad r2.w, r2, r3, c14.x
mad r2.w, r2, r3, c14.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r0.y, r0, r0.x
cmp r0.x, v6.z, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.y, -r0.z, c14.z, r0
mad r0.x, r0, c14.w, r0.y
mul r0.x, r0, c15
rsq r0.w, r0.w
rcp r0.w, r0.w
mul r2.w, r2, r0
cmp r3.w, v6.y, c13.x, c13.y
mul r0.w, r3, r2
mad r0.z, -r0.w, c14, r2.w
mad r0.y, r3.w, c14.w, r0.z
dsy r0.zw, v6.xyxy
dp4 r2.w, c1, c1
mul r3.w, r0.y, c15.x
dsx r5.w, r0.x
dsy r7.y, r0.x
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.y, r0.x, r0
mul r0.zw, r0, r0
add r0.x, r0.z, r0.w
rsq r0.y, r0.y
rcp r0.y, r0.y
rsq r0.x, r0.x
rcp r0.x, r0.x
mul r5.z, r0.y, c17.x
mul r7.x, r0, c17
texldd r0, r3.zwzw, s3, r5.zwzw, r7
mul_pp r6, r0, r4
texldd r4, r3.zwzw, s0, r5.zwzw, r7
mad_pp r6.xyz, -r4, r2, r6
mul_pp r2.xyz, r4, r2
mad_pp r2.xyz, r6.w, r6, r2
rsq r2.w, r2.w
mul r4.xyz, r2.w, c1
dp3_pp r2.w, v5, -r4
mul_pp r6.xyz, v5, r2.w
mul_pp r2.xyz, r2, c6
texld r3, r3, s4
texld r5, r5, s4
add_pp r5, r5, -r3
mad_pp r3, r1.z, r5, r3
mad_pp r6.xyz, -r6, c14.z, -r4
dp3_pp_sat r1.z, r6, v1
texld r5, r1, s4
add_pp r6, r5, -r3
pow_pp r5, r1.z, c7.x
mad_pp r1, r1.w, r6, r3
mul_pp r0, r0, r1
texld r1, v4, s6
dp4 r1.y, r1, c18
dp3_pp_sat r3.z, v5, r4
dp3 r3.x, v4, v4
rsq r3.x, r3.x
rcp r1.z, r3.x
add_pp r3.y, r3.z, c13
mul r1.z, r1, c2.w
frc_pp r3.x, r3.y
mov_pp r2.w, r5.x
mov r1.x, c3
mad r1.y, -r1.z, c17.w, r1
cmp r1.y, r1, c13, r1.x
dp3 r1.x, v3, v3
texld r1.w, v3, s8
texld r1.x, r1.x, s7
mul r1.x, r1, r1.w
mul r1.w, r1.x, r1.y
mul r1.xyz, r1.w, c4
mul r1.xyz, r1, c5
mul r1.xyz, r1, r2.w
add_pp_sat r2.w, r3.y, -r3.x
mul r1.xyz, r2.w, r1
add_pp r2.w, r3.z, c17.z
mul_pp r3.x, r2.w, c4.w
mul_pp r1.w, r3.x, r1
mov r2.w, c11.x
mul_pp_sat r1.w, r1, c19.x
add r3.xyz, c4, r2.w
mad_sat r3.xyz, r1.w, r3, c0
mul r1.xyz, r4.w, r1
add_pp r1.xyz, r3, r1
mad_pp r0.xyz, -r2, r1, r0
mul_pp_sat r1.w, r1, c19.y
add_pp r1.w, -r1, c13.y
mul_pp r1.xyz, r2, r1
mul_pp r0.w, r0, r1
mad_pp oC0.xyz, r0.w, r0, r1
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_SpecColor]
Vector 9 [_Color]
Float 10 [_Shininess]
Float 11 [_DetailScale]
Float 12 [_DetailVertScale]
Float 13 [_DetailDist]
Float 14 [_MinLight]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 158 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, -0.01000214, 0.25000000
def c21, 4.03944778, 1.50000000, -0.94999999, 0
def c22, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c12.x
mul r1.xy, v6.zyzw, c11.x
add r0.w, r0, c21.z
mul r2.xy, v6, c12.x
abs r5.zw, v6.xyxy
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c22.x, c22.y
mul r1.xy, v6, c11.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r2.xyz, r0, -r1
mad_pp r2.xyz, r5.z, r2, r1
max r0.x, r5.z, r2.w
rcp r0.y, r0.x
min r0.x, r5.z, r2.w
mul r1.w, r0.x, r0.y
mul r1.xy, v6.zxzw, c12.x
mul r0.xy, v6.zxzw, c11.x
mul r3.x, r1.w, r1.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r5.w, r0, r2
mad r0.w, r3.x, c18.y, c18.z
mad r0.w, r0, r3.x, c18
mad r0.w, r0, r3.x, c19.x
mad r0.w, r0, r3.x, c19.y
mad r0.w, r0, r3.x, c19.z
mul r3.y, r0.w, r1.w
mul r2.x, v0, c13
add_pp r1.xyz, -r0, c16.y
mul_sat r2.x, r2, c17.z
mad_pp r2.xyz, r2.x, r1, r0
mul r6.xy, v6, c15.x
mul r7.xy, v6.zyzw, c15.x
add r3.z, -r3.y, c19.w
add r3.x, r5.z, -r2.w
cmp r3.x, -r3, r3.y, r3.z
mul r5.xy, v6.zxzw, c15.x
texld r1, r6, s5
texld r0, r7, s5
add_pp r0, r0, -r1
mad_pp r1, r5.z, r0, r1
add r0.x, -r3, c17.w
cmp r3.x, v6.z, r3, r0
texld r0, r5, s5
add_pp r0, r0, -r1
mad_pp r1, r5.w, r0, r1
cmp r3.x, v6, r3, -r3
add r0.y, -r2.w, c16
mad r0.x, r2.w, c16.z, c16.w
mad r0.x, r2.w, r0, c17
rsq r0.y, r0.y
mad r4.x, r3, c20, c20.y
abs r0.w, v6.y
mad r0.x, r2.w, r0, c17.y
add r3.x, -r0.w, c16.y
mad r2.w, r0, c16.z, c16
mad r2.w, r2, r0, c17.x
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c17, r0.y
rsq r3.x, r3.x
mad r0.w, r2, r0, c17.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v6.y, c16.x, c16.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c17.z, r2.w
mad r0.z, r0.x, c17.w, r0
mad r0.x, r0.w, c17.w, r0.y
mul r0.y, r0.z, c18.x
dsy r0.zw, v6.xyxy
mul r4.y, r0.x, c18.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c20.x
mul r3.x, r0.y, c20
texldd r0, r4, s3, r3.zwzw, r3
texldd r3, r4, s0, r3.zwzw, r3
mul_pp r1, r0, r1
mul_pp r4.xyz, r3, r2
mad_pp r1.xyz, -r3, r2, r1
mad_pp r1.xyz, r1.w, r1, r4
mul_pp r4.xyz, r1, c9
dp4 r3.x, c1, c1
rsq r3.x, r3.x
mul r3.xyz, r3.x, c1
texld r1, r6, s4
texld r2, r7, s4
add_pp r2, r2, -r1
mad_pp r2, r5.z, r2, r1
texld r1, r5, s4
add_pp r1, r1, -r2
mad_pp r1, r5.w, r1, r2
dp3_pp r4.w, v5, -r3
mul_pp r5.xyz, v5, r4.w
mad_pp r5.xyz, -r5, c17.z, -r3
rcp r2.w, v4.w
mul_pp r1, r0, r1
dp3_pp_sat r2.x, r5, v1
pow_pp r0, r2.x, c10.x
mad r2.xy, v4, r2.w, c6
mov_pp r2.z, r0.x
texld r0.x, r2, s8
mad r2.xy, v4, r2.w, c5
mov r0.w, r0.x
texld r0.x, r2, s8
mad r2.xy, v4, r2.w, c4
mov r0.z, r0.x
texld r0.x, r2, s8
mad r2.xy, v4, r2.w, c3
mov r0.y, r0.x
texld r0.x, r2, s8
mov r2.x, c2
mad r0, -v4.z, r2.w, r0
cmp r0, r0, c16.y, r2.x
dp4_pp r0.z, r0, c20.w
rcp r2.x, v3.w
mad r2.xy, v3, r2.x, c20.y
texld r0.w, r2, s6
dp3_pp_sat r2.x, v5, r3
add_pp r2.y, r2.x, c16
frc_pp r2.w, r2.y
add_pp_sat r2.y, r2, -r2.w
dp3 r0.x, v3, v3
cmp r0.y, -v3.z, c16.x, c16
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.y, r0
mul_pp r0.w, r0.x, r0.z
mul r0.xyz, r0.w, c7
mul r0.xyz, r0, c8
mul r0.xyz, r0, r2.z
mul r0.xyz, r2.y, r0
add_pp r2.w, r2.x, c20.z
mul r2.xyz, r3.w, r0
mul_pp r0.x, r2.w, c7.w
mul_pp r0.w, r0.x, r0
mov r0.y, c14.x
mul_pp_sat r0.w, r0, c21.x
add r0.xyz, c7, r0.y
mad_sat r0.xyz, r0.w, r0, c0
add_pp r0.xyz, r0, r2
mul_pp_sat r0.w, r0, c21.y
mad_pp r1.xyz, -r4, r0, r1
mul_pp r2.xyz, r4, r0
add_pp r0.w, -r0, c16.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightShadowData]
Vector 3 [_ShadowOffsets0]
Vector 4 [_ShadowOffsets1]
Vector 5 [_ShadowOffsets2]
Vector 6 [_ShadowOffsets3]
Vector 7 [_LightColor0]
Vector 8 [_SpecColor]
Vector 9 [_Color]
Float 10 [_Shininess]
Float 11 [_DetailScale]
Float 12 [_DetailVertScale]
Float 13 [_DetailDist]
Float 14 [_MinLight]
Float 15 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_LightTexture0] 2D
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_ShadowMapTexture] 2D
"ps_3_0
; 157 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_2d s6
dcl_2d s7
dcl_2d s8
def c16, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c17, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c18, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c19, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c20, 0.15915494, 0.50000000, -0.01000214, 0.25000000
def c21, 4.03944778, 1.50000000, -0.94999999, 0
def c22, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3
dcl_texcoord4 v4
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c12.x
mul r1.xy, v6.zyzw, c11.x
add r0.w, r0, c21.z
mul r2.xy, v6, c12.x
abs r4.zw, v6.xyxy
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c22.x, c22.y
mul r1.xy, v6, c11.x
mad r0.xyz, r0.w, r3, r0
mul r4.xy, v6.zxzw, c15.x
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r2.xyz, r0, -r1
mad_pp r2.xyz, r4.z, r2, r1
max r0.x, r4.z, r2.w
rcp r0.y, r0.x
min r0.x, r4.z, r2.w
mul r1.w, r0.x, r0.y
mul r1.xy, v6.zxzw, c12.x
mul r0.xy, v6.zxzw, c11.x
mul r3.x, r1.w, r1.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r4.w, r0, r2
mad r0.w, r3.x, c18.y, c18.z
mad r0.w, r0, r3.x, c18
mad r0.w, r0, r3.x, c19.x
mad r0.w, r0, r3.x, c19.y
mad r0.w, r0, r3.x, c19.z
mul r3.y, r0.w, r1.w
mul r2.x, v0, c13
add_pp r1.xyz, -r0, c16.y
mul_sat r2.x, r2, c17.z
mad_pp r2.xyz, r2.x, r1, r0
mul r7.xy, v6, c15.x
mul r6.xy, v6.zyzw, c15.x
add r3.z, -r3.y, c19.w
add r3.x, r4.z, -r2.w
cmp r3.x, -r3, r3.y, r3.z
texld r1, r7, s5
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r0.x, -r3, c17.w
cmp r3.x, v6.z, r3, r0
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r1, r4.w, r0, r1
cmp r3.x, v6, r3, -r3
add r0.y, -r2.w, c16
mad r0.x, r2.w, c16.z, c16.w
mad r0.x, r2.w, r0, c17
rsq r0.y, r0.y
mad r5.x, r3, c20, c20.y
abs r0.w, v6.y
mad r0.x, r2.w, r0, c17.y
add r3.x, -r0.w, c16.y
mad r2.w, r0, c16.z, c16
mad r2.w, r2, r0, c17.x
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c16, c16.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c17, r0.y
rsq r3.x, r3.x
mad r0.w, r2, r0, c17.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v6.y, c16.x, c16.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c17.z, r2.w
mad r0.z, r0.x, c17.w, r0
mad r0.x, r0.w, c17.w, r0.y
mul r0.y, r0.z, c18.x
dsy r0.zw, v6.xyxy
mul r5.y, r0.x, c18.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c20.x
mul r3.x, r0.y, c20
texldd r0, r5, s3, r3.zwzw, r3
texldd r3, r5, s0, r3.zwzw, r3
mul_pp r1, r0, r1
mul_pp r5.xyz, r3, r2
mad_pp r1.xyz, -r3, r2, r1
mad_pp r3.xyz, r1.w, r1, r5
texld r2, r7, s4
texld r1, r6, s4
add_pp r1, r1, -r2
mad_pp r1, r4.z, r1, r2
texld r2, r4, s4
add_pp r2, r2, -r1
mad_pp r1, r4.w, r2, r1
rcp r4.x, v4.w
mul_pp r1, r0, r1
mad r2.xyz, v4, r4.x, c6
texld r0.x, r2, s8
mad r2.xyz, v4, r4.x, c5
mov_pp r0.w, r0.x
texld r0.x, r2, s8
mad r2.xyz, v4, r4.x, c4
mov_pp r0.z, r0.x
texld r0.x, r2, s8
mad r2.xyz, v4, r4.x, c3
mov_pp r0.y, r0.x
texld r0.x, r2, s8
mov r2.y, c2.x
add r2.y, c16, -r2
mad r0, r0, r2.y, c2.x
dp4_pp r0.z, r0, c20.w
rcp r0.x, v3.w
mad r5.xy, v3, r0.x, c20.y
dp4 r2.x, c1, c1
rsq r2.x, r2.x
mul r2.xyz, r2.x, c1
dp3_pp r0.y, v5, -r2
mul_pp r4.xyz, v5, r0.y
mad_pp r4.xyz, -r4, c17.z, -r2
dp3 r0.x, v3, v3
mul_pp r3.xyz, r3, c9
texld r0.w, r5, s6
cmp r0.y, -v3.z, c16.x, c16
mul_pp r0.y, r0, r0.w
texld r0.x, r0.x, s7
mul_pp r0.x, r0.y, r0
mul_pp r2.w, r0.x, r0.z
mul r0.xyz, r2.w, c7
dp3_pp_sat r4.w, r4, v1
mul r4.xyz, r0, c8
pow_pp r0, r4.w, c10.x
dp3_pp_sat r0.w, v5, r2
add_pp r2.x, r0.w, c16.y
frc_pp r2.y, r2.x
add_pp r0.w, r0, c20.z
mul_pp r0.w, r0, c7
mul_pp r0.w, r0, r2
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r4, r0.x
mul r0.xyz, r2.x, r0
mov r2.x, c14
mul_pp_sat r0.w, r0, c21.x
add r2.xyz, c7, r2.x
mad_sat r2.xyz, r0.w, r2, c0
mul r0.xyz, r3.w, r0
add_pp r0.xyz, r2, r0
mul_pp_sat r0.w, r0, c21.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c16.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c16.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "SPOT" "SHADOWS_DEPTH" "SHADOWS_SOFT" "SHADOWS_NATIVE" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTexture0] 2D
"ps_3_0
; 156 ALU, 23 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 0.00781250
def c18, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 4.03944778, 1.50000000, -0.94999999, 0
def c21, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c20.z
mul r2.xy, v6, c9.x
abs r4.zw, v6.xyxy
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c21.x, c21.y
mul r1.xy, v6, c8.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r2.xyz, r0, -r1
mad_pp r2.xyz, r4.z, r2, r1
max r0.x, r4.z, r2.w
rcp r0.y, r0.x
min r0.x, r4.z, r2.w
mul r1.w, r0.x, r0.y
mul r1.xy, v6.zxzw, c9.x
mul r0.xy, v6.zxzw, c8.x
mul r3.x, r1.w, r1.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r4.w, r0, r2
mad r0.w, r3.x, c15.y, c15.z
mad r0.w, r0, r3.x, c15
mad r0.w, r0, r3.x, c16.x
mad r0.w, r0, r3.x, c16.y
mad r0.w, r0, r3.x, c16.z
mul r3.y, r0.w, r1.w
mul r2.x, v0, c10
add_pp r1.xyz, -r0, c13.y
mul_sat r2.x, r2, c14.z
mad_pp r2.xyz, r2.x, r1, r0
mul r7.xy, v6, c12.x
mul r6.xy, v6.zyzw, c12.x
add r3.z, -r3.y, c16.w
add r3.x, r4.z, -r2.w
cmp r3.x, -r3, r3.y, r3.z
mul r4.xy, v6.zxzw, c12.x
texld r1, r7, s5
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r0.x, -r3, c14.w
cmp r3.x, v6.z, r3, r0
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r1, r4.w, r0, r1
cmp r3.x, v6, r3, -r3
add r0.y, -r2.w, c13
mad r0.x, r2.w, c13.z, c13.w
mad r0.x, r2.w, r0, c14
rsq r0.y, r0.y
mad r5.x, r3, c17, c17.y
abs r0.w, v6.y
mad r0.x, r2.w, r0, c14.y
add r3.x, -r0.w, c13.y
mad r2.w, r0, c13.z, c13
mad r2.w, r2, r0, c14.x
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c14, r0.y
rsq r3.x, r3.x
mad r0.w, r2, r0, c14.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v6.y, c13.x, c13.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c14.z, r2.w
mad r0.z, r0.x, c14.w, r0
mad r0.x, r0.w, c14.w, r0.y
mul r0.y, r0.z, c15.x
dsy r0.zw, v6.xyxy
mul r5.y, r0.x, c15.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0, r5, s3, r3.zwzw, r3
texldd r3, r5, s0, r3.zwzw, r3
mul_pp r1, r0, r1
mad_pp r1.xyz, -r3, r2, r1
mul_pp r5.xyz, r3, r2
mad_pp r3.xyz, r1.w, r1, r5
texld r2, r7, s4
texld r1, r6, s4
add_pp r1, r1, -r2
mad_pp r1, r4.z, r1, r2
texld r2, r4, s4
add_pp r2, r2, -r1
mad_pp r1, r4.w, r2, r1
mul_pp r1, r0, r1
add r4.xyz, v4, c18.xyyw
texld r2, r4, s6
dp4 r4.w, r2, c19
add r0.xyz, v4, c18.yxyw
texld r0, r0, s6
dp4 r4.z, r0, c19
add r2.xyz, v4, c18.yyxw
texld r2, r2, s6
dp4 r4.y, r2, c19
dp3 r0.w, v4, v4
rsq r2.x, r0.w
add r0.xyz, v4, c17.w
texld r0, r0, s6
dp4 r4.x, r0, c19
rcp r2.x, r2.x
mul r0.x, r2, c2.w
dp4 r2.x, c1, c1
mad r0, -r0.x, c18.z, r4
mov r2.y, c3.x
cmp r0, r0, c13.y, r2.y
dp4_pp r0.y, r0, c18.w
rsq r2.x, r2.x
mul r2.xyz, r2.x, c1
dp3_pp r0.z, v5, -r2
mul_pp r4.xyz, v5, r0.z
mad_pp r4.xyz, -r4, c14.z, -r2
dp3 r0.x, v3, v3
texld r0.x, r0.x, s7
mul r2.w, r0.x, r0.y
mul_pp r3.xyz, r3, c6
mul r0.xyz, r2.w, c4
dp3_pp_sat r4.w, r4, v1
mul r4.xyz, r0, c5
pow_pp r0, r4.w, c7.x
dp3_pp_sat r0.w, v5, r2
add_pp r2.x, r0.w, c13.y
frc_pp r2.y, r2.x
add_pp r0.w, r0, c17.z
mul_pp r0.w, r0, c4
mul_pp r0.w, r0, r2
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r4, r0.x
mul r0.xyz, r2.x, r0
mov r2.x, c11
mul_pp_sat r0.w, r0, c20.x
add r2.xyz, c4, r2.x
mad_sat r2.xyz, r0.w, r2, c0
mul r0.xyz, r3.w, r0
add_pp r0.xyz, r2, r0
mul_pp_sat r0.w, r0, c20.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

SubProgram "opengl " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLSL"
}

SubProgram "d3d9 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
Vector 0 [glstate_lightmodel_ambient]
Vector 1 [_WorldSpaceLightPos0]
Vector 2 [_LightPositionRange]
Vector 3 [_LightShadowData]
Vector 4 [_LightColor0]
Vector 5 [_SpecColor]
Vector 6 [_Color]
Float 7 [_Shininess]
Float 8 [_DetailScale]
Float 9 [_DetailVertScale]
Float 10 [_DetailDist]
Float 11 [_MinLight]
Float 12 [_CityOverlayDetailScale]
SetTexture 0 [_MainTex] 2D
SetTexture 1 [_DetailVertTex] 2D
SetTexture 2 [_DetailTex] 2D
SetTexture 3 [_CityOverlayTex] 2D
SetTexture 4 [_CityDarkOverlayDetailTex] 2D
SetTexture 5 [_CityLightOverlayDetailTex] 2D
SetTexture 6 [_ShadowMapTexture] CUBE
SetTexture 7 [_LightTextureB0] 2D
SetTexture 8 [_LightTexture0] CUBE
"ps_3_0
; 157 ALU, 24 TEX
dcl_2d s0
dcl_2d s1
dcl_2d s2
dcl_2d s3
dcl_2d s4
dcl_2d s5
dcl_cube s6
dcl_2d s7
dcl_cube s8
def c13, 0.00000000, 1.00000000, -0.01872930, 0.07426100
def c14, -0.21211439, 1.57072902, 2.00000000, 3.14159298
def c15, 0.31830987, -0.01348047, 0.05747731, -0.12123910
def c16, 0.19563590, -0.33299461, 0.99999559, 1.57079601
def c17, 0.15915494, 0.50000000, -0.01000214, 0.00781250
def c18, 0.00781250, -0.00781250, 0.97000003, 0.25000000
def c19, 1.00000000, 0.00392157, 0.00001538, 0.00000001
def c20, 4.03944778, 1.50000000, -0.94999999, 0
def c21, 32.00000000, 0.50000000, 0, 0
dcl_texcoord0 v0.x
dcl_texcoord1 v1.xyz
dcl_texcoord2 v2.xyz
dcl_texcoord3 v3.xyz
dcl_texcoord4 v4.xyz
dcl_texcoord5 v5.xyz
dcl_texcoord6 v6.xyz
mov r0.xyz, v6
dp3_sat r0.w, v2, -r0
mul r0.xy, v6.zyzw, c9.x
mul r1.xy, v6.zyzw, c8.x
add r0.w, r0, c20.z
mul r2.xy, v6, c9.x
abs r4.zw, v6.xyxy
abs r2.w, v6.z
texld r1.xyz, r1, s2
texld r0.xyz, r0, s1
add r3.xyz, r1, -r0
mad_sat r0.w, r0, c21.x, c21.y
mul r1.xy, v6, c8.x
mad r0.xyz, r0.w, r3, r0
texld r2.xyz, r2, s1
texld r1.xyz, r1, s2
add r1.xyz, r1, -r2
mad r1.xyz, r0.w, r1, r2
add_pp r2.xyz, r0, -r1
mad_pp r2.xyz, r4.z, r2, r1
max r0.x, r4.z, r2.w
rcp r0.y, r0.x
min r0.x, r4.z, r2.w
mul r1.w, r0.x, r0.y
mul r1.xy, v6.zxzw, c9.x
mul r0.xy, v6.zxzw, c8.x
mul r3.x, r1.w, r1.w
texld r1.xyz, r1, s1
texld r0.xyz, r0, s2
add r0.xyz, r0, -r1
mad r0.xyz, r0.w, r0, r1
add_pp r0.xyz, r0, -r2
mad_pp r0.xyz, r4.w, r0, r2
mad r0.w, r3.x, c15.y, c15.z
mad r0.w, r0, r3.x, c15
mad r0.w, r0, r3.x, c16.x
mad r0.w, r0, r3.x, c16.y
mad r0.w, r0, r3.x, c16.z
mul r3.y, r0.w, r1.w
mul r2.x, v0, c10
add_pp r1.xyz, -r0, c13.y
mul_sat r2.x, r2, c14.z
mad_pp r2.xyz, r2.x, r1, r0
mul r7.xy, v6, c12.x
mul r6.xy, v6.zyzw, c12.x
add r3.z, -r3.y, c16.w
add r3.x, r4.z, -r2.w
cmp r3.x, -r3, r3.y, r3.z
mul r4.xy, v6.zxzw, c12.x
texld r1, r7, s5
texld r0, r6, s5
add_pp r0, r0, -r1
mad_pp r1, r4.z, r0, r1
add r0.x, -r3, c14.w
cmp r3.x, v6.z, r3, r0
texld r0, r4, s5
add_pp r0, r0, -r1
mad_pp r1, r4.w, r0, r1
cmp r3.x, v6, r3, -r3
add r0.y, -r2.w, c13
mad r0.x, r2.w, c13.z, c13.w
mad r0.x, r2.w, r0, c14
rsq r0.y, r0.y
mad r5.x, r3, c17, c17.y
abs r0.w, v6.y
mad r0.x, r2.w, r0, c14.y
add r3.x, -r0.w, c13.y
mad r2.w, r0, c13.z, c13
mad r2.w, r2, r0, c14.x
rcp r0.y, r0.y
mul r0.y, r0.x, r0
cmp r0.x, v6.z, c13, c13.y
mul r0.z, r0.x, r0.y
mad r0.z, -r0, c14, r0.y
rsq r3.x, r3.x
mad r0.w, r2, r0, c14.y
rcp r3.x, r3.x
mul r2.w, r0, r3.x
cmp r0.w, v6.y, c13.x, c13.y
mul r3.x, r0.w, r2.w
mad r0.y, -r3.x, c14.z, r2.w
mad r0.z, r0.x, c14.w, r0
mad r0.x, r0.w, c14.w, r0.y
mul r0.y, r0.z, c15.x
dsy r0.zw, v6.xyxy
mul r5.y, r0.x, c15.x
dsx r3.w, r0.y
dsy r3.y, r0
dsx r0.xy, v6
mul r0.xy, r0, r0
add r0.x, r0, r0.y
mul r0.zw, r0, r0
add r0.y, r0.z, r0.w
rsq r0.x, r0.x
rcp r0.x, r0.x
rsq r0.y, r0.y
rcp r0.y, r0.y
mul r3.z, r0.x, c17.x
mul r3.x, r0.y, c17
texldd r0, r5, s3, r3.zwzw, r3
texldd r3, r5, s0, r3.zwzw, r3
mul_pp r1, r0, r1
mad_pp r1.xyz, -r3, r2, r1
mul_pp r5.xyz, r3, r2
mad_pp r3.xyz, r1.w, r1, r5
texld r2, r7, s4
texld r1, r6, s4
add_pp r1, r1, -r2
mad_pp r1, r4.z, r1, r2
texld r2, r4, s4
add_pp r2, r2, -r1
mad_pp r1, r4.w, r2, r1
mul_pp r1, r0, r1
add r4.xyz, v4, c18.xyyw
texld r2, r4, s6
dp4 r4.w, r2, c19
add r0.xyz, v4, c18.yxyw
texld r0, r0, s6
dp4 r4.z, r0, c19
add r2.xyz, v4, c18.yyxw
texld r2, r2, s6
dp4 r4.y, r2, c19
add r0.xyz, v4, c17.w
texld r0, r0, s6
dp3 r2.x, v4, v4
dp4 r4.x, r0, c19
rsq r2.x, r2.x
rcp r0.x, r2.x
dp4 r2.x, c1, c1
mul r0.x, r0, c2.w
rsq r2.x, r2.x
mul r2.xyz, r2.x, c1
mad r0, -r0.x, c18.z, r4
mov r2.w, c3.x
cmp r0, r0, c13.y, r2.w
dp4_pp r0.y, r0, c18.w
dp3_pp r2.w, v5, -r2
mul_pp r4.xyz, v5, r2.w
mad_pp r4.xyz, -r4, c14.z, -r2
dp3 r0.x, v3, v3
mul_pp r3.xyz, r3, c6
texld r0.w, v3, s8
texld r0.x, r0.x, s7
mul r0.x, r0, r0.w
mul r2.w, r0.x, r0.y
mul r0.xyz, r2.w, c4
dp3_pp_sat r4.w, r4, v1
mul r4.xyz, r0, c5
pow_pp r0, r4.w, c7.x
dp3_pp_sat r0.w, v5, r2
add_pp r2.x, r0.w, c13.y
frc_pp r2.y, r2.x
add_pp r0.w, r0, c17.z
mul_pp r0.w, r0, c4
mul_pp r0.w, r0, r2
add_pp_sat r2.x, r2, -r2.y
mul r0.xyz, r4, r0.x
mul r0.xyz, r2.x, r0
mov r2.x, c11
mul_pp_sat r0.w, r0, c20.x
add r2.xyz, c4, r2.x
mad_sat r2.xyz, r0.w, r2, c0
mul r0.xyz, r3.w, r0
add_pp r0.xyz, r2, r0
mul_pp_sat r0.w, r0, c20.y
mad_pp r1.xyz, -r3, r0, r1
mul_pp r2.xyz, r3, r0
add_pp r0.w, -r0, c13.y
mul_pp r0.x, r1.w, r0.w
mad_pp oC0.xyz, r0.x, r1, r2
mov_pp oC0.w, c13.y
"
}

SubProgram "gles " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "glesdesktop " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES"
}

SubProgram "gles3 " {
Keywords { "CITYOVERLAY_ON" "DETAIL_MAP_ON" "POINT_COOKIE" "SHADOWS_CUBE" "SHADOWS_SOFT" }
"!!GLES3"
}

}

#LINE 194

	
		}
		
	} 
	
	FallBack "VertexLit"
}